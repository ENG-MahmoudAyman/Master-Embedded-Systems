
ARM.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011bc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080012ec  080012ec  000112ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800133c  0800133c  00020434  2**0
                  CONTENTS
  4 .ARM          00000000  0800133c  0800133c  00020434  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800133c  0800133c  00020434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800133c  0800133c  0001133c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001344  08001344  00011344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000434  20000000  08001348  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000434  0800177c  00020434  2**2
                  ALLOC
 10 ._user_heap_stack 00000204  20000814  0800177c  00020814  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005ae5  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ea6  00000000  00000000  00025f42  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002e8  00000000  00000000  00026de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000270  00000000  00000000  000270d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00002a95  00000000  00000000  00027340  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000016f3  00000000  00000000  00029dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0002b4c8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000afc  00000000  00000000  0002b544  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    000009e0  00000000  00000000  0002c040  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000434 	.word	0x20000434
 800014c:	00000000 	.word	0x00000000
 8000150:	080012d4 	.word	0x080012d4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000438 	.word	0x20000438
 800016c:	080012d4 	.word	0x080012d4

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <EXTI0_IRQHandler>:
 * ==================================================================================================
 *                                           ISR FUNCTIONS
 * ==================================================================================================
 */

void EXTI0_IRQHandler(void){
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	EXTI->PR|=(1<<0);
 8000188:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <EXTI0_IRQHandler+0x1c>)
 800018a:	695b      	ldr	r3, [r3, #20]
 800018c:	4a04      	ldr	r2, [pc, #16]	; (80001a0 <EXTI0_IRQHandler+0x1c>)
 800018e:	f043 0301 	orr.w	r3, r3, #1
 8000192:	6153      	str	r3, [r2, #20]
	//call the IRQ_Call_Function
	GP_IRQ_EXTI_CallBack[0]();
 8000194:	4b03      	ldr	r3, [pc, #12]	; (80001a4 <EXTI0_IRQHandler+0x20>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4798      	blx	r3
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010400 	.word	0x40010400
 80001a4:	2000045c 	.word	0x2000045c

080001a8 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	EXTI->PR|=(1<<1);
 80001ac:	4b05      	ldr	r3, [pc, #20]	; (80001c4 <EXTI1_IRQHandler+0x1c>)
 80001ae:	695b      	ldr	r3, [r3, #20]
 80001b0:	4a04      	ldr	r2, [pc, #16]	; (80001c4 <EXTI1_IRQHandler+0x1c>)
 80001b2:	f043 0302 	orr.w	r3, r3, #2
 80001b6:	6153      	str	r3, [r2, #20]
	//call the IRQ_Call_Function
	GP_IRQ_EXTI_CallBack[1]();
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <EXTI1_IRQHandler+0x20>)
 80001ba:	685b      	ldr	r3, [r3, #4]
 80001bc:	4798      	blx	r3
}
 80001be:	bf00      	nop
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010400 	.word	0x40010400
 80001c8:	2000045c 	.word	0x2000045c

080001cc <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	EXTI->PR|=(1<<2);
 80001d0:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <EXTI2_IRQHandler+0x1c>)
 80001d2:	695b      	ldr	r3, [r3, #20]
 80001d4:	4a04      	ldr	r2, [pc, #16]	; (80001e8 <EXTI2_IRQHandler+0x1c>)
 80001d6:	f043 0304 	orr.w	r3, r3, #4
 80001da:	6153      	str	r3, [r2, #20]
	//call the IRQ_Call_Function
	GP_IRQ_EXTI_CallBack[2]();
 80001dc:	4b03      	ldr	r3, [pc, #12]	; (80001ec <EXTI2_IRQHandler+0x20>)
 80001de:	689b      	ldr	r3, [r3, #8]
 80001e0:	4798      	blx	r3
}
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	40010400 	.word	0x40010400
 80001ec:	2000045c 	.word	0x2000045c

080001f0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	EXTI->PR|=(1<<3);
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <EXTI3_IRQHandler+0x1c>)
 80001f6:	695b      	ldr	r3, [r3, #20]
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <EXTI3_IRQHandler+0x1c>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6153      	str	r3, [r2, #20]
	//call the IRQ_Call_Function
	GP_IRQ_EXTI_CallBack[3]();
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <EXTI3_IRQHandler+0x20>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	4798      	blx	r3
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40010400 	.word	0x40010400
 8000210:	2000045c 	.word	0x2000045c

08000214 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	EXTI->PR|=(1<<4);
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <EXTI4_IRQHandler+0x1c>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4a04      	ldr	r2, [pc, #16]	; (8000230 <EXTI4_IRQHandler+0x1c>)
 800021e:	f043 0310 	orr.w	r3, r3, #16
 8000222:	6153      	str	r3, [r2, #20]
	//call the IRQ_Call_Function
	GP_IRQ_EXTI_CallBack[4]();
 8000224:	4b03      	ldr	r3, [pc, #12]	; (8000234 <EXTI4_IRQHandler+0x20>)
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	4798      	blx	r3
}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40010400 	.word	0x40010400
 8000234:	2000045c 	.word	0x2000045c

08000238 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	if(EXTI->PR &(1<<5)){EXTI->PR|=(1<<5);GP_IRQ_EXTI_CallBack[5]();}
 800023c:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800023e:	695b      	ldr	r3, [r3, #20]
 8000240:	f003 0320 	and.w	r3, r3, #32
 8000244:	2b00      	cmp	r3, #0
 8000246:	d008      	beq.n	800025a <EXTI9_5_IRQHandler+0x22>
 8000248:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	4a22      	ldr	r2, [pc, #136]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800024e:	f043 0320 	orr.w	r3, r3, #32
 8000252:	6153      	str	r3, [r2, #20]
 8000254:	4b21      	ldr	r3, [pc, #132]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 8000256:	695b      	ldr	r3, [r3, #20]
 8000258:	4798      	blx	r3
	if(EXTI->PR &(1<<6)){EXTI->PR|=(1<<6);GP_IRQ_EXTI_CallBack[6]();}
 800025a:	4b1f      	ldr	r3, [pc, #124]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000262:	2b00      	cmp	r3, #0
 8000264:	d008      	beq.n	8000278 <EXTI9_5_IRQHandler+0x40>
 8000266:	4b1c      	ldr	r3, [pc, #112]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	4a1b      	ldr	r2, [pc, #108]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800026c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000270:	6153      	str	r3, [r2, #20]
 8000272:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	4798      	blx	r3
	if(EXTI->PR &(1<<7)){EXTI->PR|=(1<<7);GP_IRQ_EXTI_CallBack[7]();}
 8000278:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000280:	2b00      	cmp	r3, #0
 8000282:	d008      	beq.n	8000296 <EXTI9_5_IRQHandler+0x5e>
 8000284:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a13      	ldr	r2, [pc, #76]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800028a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800028e:	6153      	str	r3, [r2, #20]
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 8000292:	69db      	ldr	r3, [r3, #28]
 8000294:	4798      	blx	r3
	if(EXTI->PR &(1<<8)){EXTI->PR|=(1<<8);GP_IRQ_EXTI_CallBack[8]();}
 8000296:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d008      	beq.n	80002b4 <EXTI9_5_IRQHandler+0x7c>
 80002a2:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	4a0c      	ldr	r2, [pc, #48]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ac:	6153      	str	r3, [r2, #20]
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 80002b0:	6a1b      	ldr	r3, [r3, #32]
 80002b2:	4798      	blx	r3
	if(EXTI->PR &(1<<9)){EXTI->PR|=(1<<9);GP_IRQ_EXTI_CallBack[9]();}
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d008      	beq.n	80002d2 <EXTI9_5_IRQHandler+0x9a>
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ca:	6153      	str	r3, [r2, #20]
 80002cc:	4b03      	ldr	r3, [pc, #12]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 80002ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d0:	4798      	blx	r3
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40010400 	.word	0x40010400
 80002dc:	2000045c 	.word	0x2000045c

080002e0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	if(EXTI->PR &(1<<10)){EXTI->PR|=(1<<10);GP_IRQ_EXTI_CallBack[10]();}
 80002e4:	4b2d      	ldr	r3, [pc, #180]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d008      	beq.n	8000302 <EXTI15_10_IRQHandler+0x22>
 80002f0:	4b2a      	ldr	r3, [pc, #168]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a29      	ldr	r2, [pc, #164]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 80002f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fa:	6153      	str	r3, [r2, #20]
 80002fc:	4b28      	ldr	r3, [pc, #160]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 80002fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000300:	4798      	blx	r3
	if(EXTI->PR &(1<<11)){EXTI->PR|=(1<<11);GP_IRQ_EXTI_CallBack[11]();}
 8000302:	4b26      	ldr	r3, [pc, #152]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800030a:	2b00      	cmp	r3, #0
 800030c:	d008      	beq.n	8000320 <EXTI15_10_IRQHandler+0x40>
 800030e:	4b23      	ldr	r3, [pc, #140]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a22      	ldr	r2, [pc, #136]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b21      	ldr	r3, [pc, #132]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 800031c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800031e:	4798      	blx	r3
	if(EXTI->PR &(1<<12)){EXTI->PR|=(1<<12);GP_IRQ_EXTI_CallBack[12]();}
 8000320:	4b1e      	ldr	r3, [pc, #120]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000328:	2b00      	cmp	r3, #0
 800032a:	d008      	beq.n	800033e <EXTI15_10_IRQHandler+0x5e>
 800032c:	4b1b      	ldr	r3, [pc, #108]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	4a1a      	ldr	r2, [pc, #104]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000332:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000336:	6153      	str	r3, [r2, #20]
 8000338:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4798      	blx	r3
	if(EXTI->PR &(1<<13)){EXTI->PR|=(1<<13);GP_IRQ_EXTI_CallBack[13]();}
 800033e:	4b17      	ldr	r3, [pc, #92]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000346:	2b00      	cmp	r3, #0
 8000348:	d008      	beq.n	800035c <EXTI15_10_IRQHandler+0x7c>
 800034a:	4b14      	ldr	r3, [pc, #80]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	4a13      	ldr	r2, [pc, #76]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000350:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000354:	6153      	str	r3, [r2, #20]
 8000356:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 8000358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800035a:	4798      	blx	r3
	if(EXTI->PR &(1<<14)){EXTI->PR|=(1<<14);GP_IRQ_EXTI_CallBack[14]();}
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000364:	2b00      	cmp	r3, #0
 8000366:	d008      	beq.n	800037a <EXTI15_10_IRQHandler+0x9a>
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a0b      	ldr	r2, [pc, #44]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800036e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000372:	6153      	str	r3, [r2, #20]
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 8000376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000378:	4798      	blx	r3
	if(EXTI->PR &(1<<15)){EXTI->PR|=(1<<15);GP_IRQ_EXTI_CallBack[15]();}
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000382:	2b00      	cmp	r3, #0
 8000384:	d008      	beq.n	8000398 <EXTI15_10_IRQHandler+0xb8>
 8000386:	4b05      	ldr	r3, [pc, #20]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a04      	ldr	r2, [pc, #16]	; (800039c <EXTI15_10_IRQHandler+0xbc>)
 800038c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	4b03      	ldr	r3, [pc, #12]	; (80003a0 <EXTI15_10_IRQHandler+0xc0>)
 8000394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000396:	4798      	blx	r3
}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40010400 	.word	0x40010400
 80003a0:	2000045c 	.word	0x2000045c

080003a4 <SPI1_IRQHandler>:

void MCAL_SPI_Wait_TC(SPI_TypeDef* SPIx){
	while(!(SPIx->SR & (1<<1)));
}

void SPI1_IRQHandler(void){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	GP_IRQ_SPI_CallBack[0]();
 80003a8:	4b02      	ldr	r3, [pc, #8]	; (80003b4 <SPI1_IRQHandler+0x10>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4798      	blx	r3
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	2000049c 	.word	0x2000049c

080003b8 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	GP_IRQ_SPI_CallBack[1]();
 80003bc:	4b02      	ldr	r3, [pc, #8]	; (80003c8 <SPI2_IRQHandler+0x10>)
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4798      	blx	r3
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	2000049c 	.word	0x2000049c

080003cc <USART1_IRQHandler>:
*/
void MCAL_UART_Wait_TC(USART_TypeDef* USARTx){
	while(!(USARTx->SR & (1<<6)));
}

void USART1_IRQHandler(void){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	GP_IRQ_UART_CallBack[0]();
 80003d0:	4b02      	ldr	r3, [pc, #8]	; (80003dc <USART1_IRQHandler+0x10>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4798      	blx	r3
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	200004a4 	.word	0x200004a4

080003e0 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	GP_IRQ_UART_CallBack[1]();
 80003e4:	4b02      	ldr	r3, [pc, #8]	; (80003f0 <USART2_IRQHandler+0x10>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	4798      	blx	r3
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	200004a4 	.word	0x200004a4

080003f4 <USART3_IRQHandler>:
void USART3_IRQHandler(void){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	GP_IRQ_UART_CallBack[2]();
 80003f8:	4b02      	ldr	r3, [pc, #8]	; (8000404 <USART3_IRQHandler+0x10>)
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	4798      	blx	r3
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	200004a4 	.word	0x200004a4

08000408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	6039      	str	r1, [r7, #0]
 8000412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000418:	2b00      	cmp	r3, #0
 800041a:	db0a      	blt.n	8000432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	b2da      	uxtb	r2, r3
 8000420:	490c      	ldr	r1, [pc, #48]	; (8000454 <__NVIC_SetPriority+0x4c>)
 8000422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000426:	0152      	lsls	r2, r2, #5
 8000428:	b2d2      	uxtb	r2, r2
 800042a:	440b      	add	r3, r1
 800042c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000430:	e00a      	b.n	8000448 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	b2da      	uxtb	r2, r3
 8000436:	4908      	ldr	r1, [pc, #32]	; (8000458 <__NVIC_SetPriority+0x50>)
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	f003 030f 	and.w	r3, r3, #15
 800043e:	3b04      	subs	r3, #4
 8000440:	0152      	lsls	r2, r2, #5
 8000442:	b2d2      	uxtb	r2, r2
 8000444:	440b      	add	r3, r1
 8000446:	761a      	strb	r2, [r3, #24]
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	e000e100 	.word	0xe000e100
 8000458:	e000ed00 	.word	0xe000ed00

0800045c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	3b01      	subs	r3, #1
 8000468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800046c:	d301      	bcc.n	8000472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800046e:	2301      	movs	r3, #1
 8000470:	e00f      	b.n	8000492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000472:	4a0a      	ldr	r2, [pc, #40]	; (800049c <SysTick_Config+0x40>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3b01      	subs	r3, #1
 8000478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800047a:	2107      	movs	r1, #7
 800047c:	f04f 30ff 	mov.w	r0, #4294967295
 8000480:	f7ff ffc2 	bl	8000408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <SysTick_Config+0x40>)
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800048a:	4b04      	ldr	r3, [pc, #16]	; (800049c <SysTick_Config+0x40>)
 800048c:	2207      	movs	r2, #7
 800048e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000490:	2300      	movs	r3, #0
}
 8000492:	4618      	mov	r0, r3
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	e000e010 	.word	0xe000e010

080004a0 <HardFault_Handler>:
#include "CortexM3&4_OS_Porting.h"

void DecideNext(void);
void MY_RTOS_Update_TaskingTime(void);

  void HardFault_Handler(void){
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
	  while(1);
 80004a4:	e7fe      	b.n	80004a4 <HardFault_Handler+0x4>

080004a6 <MemManage_Handler>:
  }
  void	MemManage_Handler(void){
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0
	  while(1);
 80004aa:	e7fe      	b.n	80004aa <MemManage_Handler+0x4>

080004ac <BusFault_Handler>:
  }
  void	BusFault_Handler(void){
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
	  while(1);
 80004b0:	e7fe      	b.n	80004b0 <BusFault_Handler+0x4>

080004b2 <UsageFault_Handler>:
  }
  void	UsageFault_Handler(void){
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0
	  while(1);
 80004b6:	e7fe      	b.n	80004b6 <UsageFault_Handler+0x4>

080004b8 <SVC_Handler>:
  }

  __attribute ((naked)) void SVC_Handler(){
  	__asm("TST LR, #4 \n\t"
 80004b8:	f01e 0f04 	tst.w	lr, #4
 80004bc:	bf0c      	ite	eq
 80004be:	f3ef 8008 	mrseq	r0, MSP
 80004c2:	f3ef 8009 	mrsne	r0, PSP
 80004c6:	f000 bbd7 	b.w	8000c78 <OS_SVC>
  			"ITE EQ \n\t"
  			"MRSEQ R0,MSP \n\t"
  			"MRSNE R0,PSP \n\t"
  			"B OS_SVC \n\t");
  }
 80004ca:	bf00      	nop

080004cc <HW_init>:

  void HW_init(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	  //8MHZ
	  //0.125 us
	  // 1ms -> 8000 Ticks

	  //Decrease PenSV priority = SysTick timer
	  __NVIC_SetPriority(PendSV_IRQn, 15);
 80004d0:	210f      	movs	r1, #15
 80004d2:	f06f 0001 	mvn.w	r0, #1
 80004d6:	f7ff ff97 	bl	8000408 <__NVIC_SetPriority>
  }
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <Trigger_OS_PendSV>:

  void Trigger_OS_PendSV(){
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
	  SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80004e4:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <Trigger_OS_PendSV+0x18>)
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	4a03      	ldr	r2, [pc, #12]	; (80004f8 <Trigger_OS_PendSV+0x18>)
 80004ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ee:	6053      	str	r3, [r2, #4]
  }
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	e000ed00 	.word	0xe000ed00

080004fc <StartTicker>:

  void StartTicker(){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	  //SysTick Config
	  SysTick_Config(8000);
 8000500:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000504:	f7ff ffaa 	bl	800045c <SysTick_Config>
  }
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}

0800050c <SysTick_Handler>:

  vuint8 SysTickIndic;
  void SysTick_Handler(){
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0

	  //Decide Next
	  SysTickIndic ^= 1;
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <SysTick_Handler+0x24>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	f083 0301 	eor.w	r3, r3, #1
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <SysTick_Handler+0x24>)
 800051e:	701a      	strb	r2, [r3, #0]
	  MY_RTOS_Update_TaskingTime();
 8000520:	f000 fc56 	bl	8000dd0 <MY_RTOS_Update_TaskingTime>
	  DecideNext();
 8000524:	f000 fb56 	bl	8000bd4 <DecideNext>
	  Trigger_OS_PendSV();
 8000528:	f7ff ffda 	bl	80004e0 <Trigger_OS_PendSV>
  }
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	200004b0 	.word	0x200004b0

08000534 <FIFO_Enqueue>:

#include "MY_RTOS_FIFO.h"


//APIs
FIFO_Status FIFO_Enqueue(FIFO_Buf_t* FBuf, Element_Type Item){
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	// check FIFO is valid
	if(!FBuf->base || !FBuf->head || !FBuf->tail)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d007      	beq.n	8000556 <FIFO_Enqueue+0x22>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	68db      	ldr	r3, [r3, #12]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d003      	beq.n	8000556 <FIFO_Enqueue+0x22>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d101      	bne.n	800055a <FIFO_Enqueue+0x26>
		return FIFO_Null;
 8000556:	2303      	movs	r3, #3
 8000558:	e029      	b.n	80005ae <FIFO_Enqueue+0x7a>
	// check FIFO not Full
	if(FIFO_Is_Full(FBuf) == FIFO_Full)
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f000 f88d 	bl	800067a <FIFO_Is_Full>
 8000560:	4603      	mov	r3, r0
 8000562:	2b01      	cmp	r3, #1
 8000564:	d101      	bne.n	800056a <FIFO_Enqueue+0x36>
		return FIFO_Full;
 8000566:	2301      	movs	r3, #1
 8000568:	e021      	b.n	80005ae <FIFO_Enqueue+0x7a>
	// Enqueue item to FIFO
	*(FBuf->head) = Item;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	601a      	str	r2, [r3, #0]
	FBuf->count++;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	885b      	ldrh	r3, [r3, #2]
 8000576:	3301      	adds	r3, #1
 8000578:	b29a      	uxth	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	805a      	strh	r2, [r3, #2]
	if((uint32)FBuf->head == ((uint32)FBuf->base +(4*FBuf->length) -4))
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	461a      	mov	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	4619      	mov	r1, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	440b      	add	r3, r1
 8000592:	3b04      	subs	r3, #4
 8000594:	429a      	cmp	r2, r3
 8000596:	d104      	bne.n	80005a2 <FIFO_Enqueue+0x6e>
		FBuf->head = FBuf->base;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	685a      	ldr	r2, [r3, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	e004      	b.n	80005ac <FIFO_Enqueue+0x78>
	else
		FBuf->head++;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	68db      	ldr	r3, [r3, #12]
 80005a6:	1d1a      	adds	r2, r3, #4
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	60da      	str	r2, [r3, #12]

	return FIFO_No_Error;
 80005ac:	2300      	movs	r3, #0


}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <FIFO_Dequeue>:
FIFO_Status FIFO_Dequeue(FIFO_Buf_t* FBuf, Element_Type* Item){
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	6039      	str	r1, [r7, #0]
	// check FIFO is valid
	if(!FBuf->base || !FBuf->head || !FBuf->tail)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d007      	beq.n	80005d8 <FIFO_Dequeue+0x22>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d003      	beq.n	80005d8 <FIFO_Dequeue+0x22>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d101      	bne.n	80005dc <FIFO_Dequeue+0x26>
		return FIFO_Null;
 80005d8:	2303      	movs	r3, #3
 80005da:	e028      	b.n	800062e <FIFO_Dequeue+0x78>
	// check FIFO not Empty
	if(FBuf->count == (uint16)0)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	885b      	ldrh	r3, [r3, #2]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d101      	bne.n	80005e8 <FIFO_Dequeue+0x32>
		return FIFO_Empty;
 80005e4:	2302      	movs	r3, #2
 80005e6:	e022      	b.n	800062e <FIFO_Dequeue+0x78>
	// Dequeue item to FIFO
	*Item = *(FBuf->tail);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	601a      	str	r2, [r3, #0]
	FBuf->count--;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	885b      	ldrh	r3, [r3, #2]
 80005f6:	3b01      	subs	r3, #1
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	805a      	strh	r2, [r3, #2]
	if((uint32)FBuf->tail == ((uint32)FBuf->base +(4*FBuf->length) - 4))
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	461a      	mov	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	4619      	mov	r1, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	440b      	add	r3, r1
 8000612:	3b04      	subs	r3, #4
 8000614:	429a      	cmp	r2, r3
 8000616:	d104      	bne.n	8000622 <FIFO_Dequeue+0x6c>
		FBuf->tail = FBuf->base;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	685a      	ldr	r2, [r3, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	e004      	b.n	800062c <FIFO_Dequeue+0x76>
	else
		FBuf->tail++;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	1d1a      	adds	r2, r3, #4
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	609a      	str	r2, [r3, #8]

	return FIFO_No_Error;
 800062c:	2300      	movs	r3, #0

}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <FIFO_Init>:
FIFO_Status FIFO_Init(FIFO_Buf_t* FBuf, Element_Type* Buf ,uint16 Length){
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	4613      	mov	r3, r2
 8000644:	80fb      	strh	r3, [r7, #6]
	// check FIFO is valid
		if(Buf == NULL )
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d101      	bne.n	8000650 <FIFO_Init+0x18>
			return FIFO_Null;
 800064c:	2303      	movs	r3, #3
 800064e:	e00f      	b.n	8000670 <FIFO_Init+0x38>
		// Initialize FIFO
		FBuf->base = Buf;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	605a      	str	r2, [r3, #4]
		FBuf->head = Buf;
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	68ba      	ldr	r2, [r7, #8]
 800065a:	60da      	str	r2, [r3, #12]
		FBuf->tail = Buf;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	609a      	str	r2, [r3, #8]
		FBuf->length = Length;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	88fa      	ldrh	r2, [r7, #6]
 8000666:	801a      	strh	r2, [r3, #0]
		FBuf->count = (uint16) 0 ;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	2200      	movs	r2, #0
 800066c:	805a      	strh	r2, [r3, #2]
		return FIFO_No_Error;
 800066e:	2300      	movs	r3, #0

}
 8000670:	4618      	mov	r0, r3
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr

0800067a <FIFO_Is_Full>:
FIFO_Status FIFO_Is_Full(FIFO_Buf_t* FBuf){
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
	// check FIFO is valid
	if(!FBuf->base || !FBuf->head)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d003      	beq.n	8000692 <FIFO_Is_Full+0x18>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	68db      	ldr	r3, [r3, #12]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d101      	bne.n	8000696 <FIFO_Is_Full+0x1c>
		return FIFO_Null;
 8000692:	2303      	movs	r3, #3
 8000694:	e008      	b.n	80006a8 <FIFO_Is_Full+0x2e>
	// check FIFO not Full
	if(FBuf->count == FBuf->length)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	885a      	ldrh	r2, [r3, #2]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	429a      	cmp	r2, r3
 80006a0:	d101      	bne.n	80006a6 <FIFO_Is_Full+0x2c>
		return FIFO_Full;
 80006a2:	2301      	movs	r3, #1
 80006a4:	e000      	b.n	80006a8 <FIFO_Is_Full+0x2e>

	return FIFO_No_Error;
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
	...

080006b4 <MY_RTOS_Create_MainStack>:
FIFO_Buf_t Ready_Queue;
Task_Ref* Ready_Queue_FIFO[TasksMaxNumber];
Task_Ref MY_RTOS_IDLE_Task;


void MY_RTOS_Create_MainStack(void){
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
	OS_Control._S_MSP_Task = (uint32)(&_estack);
 80006b8:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <MY_RTOS_Create_MainStack+0x34>)
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MY_RTOS_Create_MainStack+0x38>)
 80006bc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP_Task = (OS_Control._S_MSP_Task - MainStack_Size);
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MY_RTOS_Create_MainStack+0x38>)
 80006c2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80006c6:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <MY_RTOS_Create_MainStack+0x38>)
 80006cc:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP_Task - 8);
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MY_RTOS_Create_MainStack+0x38>)
 80006d2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80006d6:	3b08      	subs	r3, #8
 80006d8:	4a04      	ldr	r2, [pc, #16]	; (80006ec <MY_RTOS_Create_MainStack+0x38>)
 80006da:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20005000 	.word	0x20005000
 80006ec:	200004c8 	.word	0x200004c8

080006f0 <MY_RTOS_Create_TaskStack>:

void MY_RTOS_Create_TaskStack(Task_Ref* Tref){
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	 * Automatic:
	 * R0,R1,R2,R3,R12,LR,PC,xPSR */

	// Virtual Memory Stack Reservation

	Tref->Current_PSP = (uint32*)(Tref->_S_PSP_Task) ;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	691b      	ldr	r3, [r3, #16]
 80006fc:	461a      	mov	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	619a      	str	r2, [r3, #24]
	Tref->Current_PSP-- ;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	1f1a      	subs	r2, r3, #4
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0x01000000;         //DUMMY_XPSR should T =1 to avoid BUS fault;//0x01000000
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000714:	601a      	str	r2, [r3, #0]
	Tref->Current_PSP-- ;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	1f1a      	subs	r2, r3, #4
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = (unsigned int)Tref->p_TaskEntry ; //PC
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	689a      	ldr	r2, [r3, #8]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	601a      	str	r2, [r3, #0]
	Tref->Current_PSP-- ; //LR = 0xFFFFFFFD (EXC_RETURN)Return to thread with PSP
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	1f1a      	subs	r2, r3, #4
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP)  = 0xFFFFFFFD ;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f06f 0202 	mvn.w	r2, #2
 800073c:	601a      	str	r2, [r3, #0]

	for (int  j=0 ; j< 13 ; j++ )
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	e00b      	b.n	800075c <MY_RTOS_Create_TaskStack+0x6c>
	{
		Tref->Current_PSP-- ;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	1f1a      	subs	r2, r3, #4
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	619a      	str	r2, [r3, #24]
		*(Tref->Current_PSP)  = 0 ;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
	for (int  j=0 ; j< 13 ; j++ )
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	3301      	adds	r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2b0c      	cmp	r3, #12
 8000760:	ddf0      	ble.n	8000744 <MY_RTOS_Create_TaskStack+0x54>
	}

}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <MY_RTOS_init>:


MY_RTOS_ERROR_ID MY_RTOS_init(void){
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

	MY_RTOS_ERROR_ID error = NO_ERROR;
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]

	//Update OS Mode (OS suspend)
	OS_Control.OS_Mode_ID = OS_Suspend;
 8000776:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MY_RTOS_init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Specify OS_MSP
	MY_RTOS_Create_MainStack();
 800077e:	f7ff ff99 	bl	80006b4 <MY_RTOS_Create_MainStack>
	//Create OS Ready Queue
	if(FIFO_Init(&Ready_Queue, Ready_Queue_FIFO, TasksMaxNumber)!= FIFO_No_Error){
 8000782:	220a      	movs	r2, #10
 8000784:	4913      	ldr	r1, [pc, #76]	; (80007d4 <MY_RTOS_init+0x68>)
 8000786:	4814      	ldr	r0, [pc, #80]	; (80007d8 <MY_RTOS_init+0x6c>)
 8000788:	f7ff ff56 	bl	8000638 <FIFO_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d002      	beq.n	8000798 <MY_RTOS_init+0x2c>
		error += Queue_FIFO_init_ERROR;
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	3301      	adds	r3, #1
 8000796:	71fb      	strb	r3, [r7, #7]
	}

	//Configure IDLE Task
	strcpy(MY_RTOS_IDLE_Task.TaskName, "IDLE_Task");
 8000798:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MY_RTOS_init+0x70>)
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <MY_RTOS_init+0x74>)
 800079c:	ca07      	ldmia	r2, {r0, r1, r2}
 800079e:	c303      	stmia	r3!, {r0, r1}
 80007a0:	801a      	strh	r2, [r3, #0]
	MY_RTOS_IDLE_Task.Priority = 255;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MY_RTOS_init+0x78>)
 80007a4:	22ff      	movs	r2, #255	; 0xff
 80007a6:	711a      	strb	r2, [r3, #4]
	MY_RTOS_IDLE_Task.p_TaskEntry = MY_RTOS_IDLE_TASK;
 80007a8:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MY_RTOS_init+0x78>)
 80007aa:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <MY_RTOS_init+0x7c>)
 80007ac:	609a      	str	r2, [r3, #8]
	MY_RTOS_IDLE_Task.Stack_Size = 200;
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <MY_RTOS_init+0x78>)
 80007b0:	22c8      	movs	r2, #200	; 0xc8
 80007b2:	601a      	str	r2, [r3, #0]
	error += MY_RTOS_Create_Task(&MY_RTOS_IDLE_Task);
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <MY_RTOS_init+0x78>)
 80007b6:	f000 f845 	bl	8000844 <MY_RTOS_Create_Task>
 80007ba:	4603      	mov	r3, r0
 80007bc:	461a      	mov	r2, r3
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	4413      	add	r3, r2
 80007c2:	71fb      	strb	r3, [r7, #7]

	return error;
 80007c4:	79fb      	ldrb	r3, [r7, #7]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200004c8 	.word	0x200004c8
 80007d4:	200006b8 	.word	0x200006b8
 80007d8:	200004b4 	.word	0x200004b4
 80007dc:	20000690 	.word	0x20000690
 80007e0:	080012ec 	.word	0x080012ec
 80007e4:	20000674 	.word	0x20000674
 80007e8:	08000905 	.word	0x08000905

080007ec <MY_RTOS_StartOS>:

void MY_RTOS_StartOS(){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	OS_Control.OS_Mode_ID = OS_Running;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <MY_RTOS_StartOS+0x50>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Default Task
	OS_Control.CurrentTask = &MY_RTOS_IDLE_Task;
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <MY_RTOS_StartOS+0x50>)
 80007fa:	4a11      	ldr	r2, [pc, #68]	; (8000840 <MY_RTOS_StartOS+0x54>)
 80007fc:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	MY_RTOS_Activate_Task(&MY_RTOS_IDLE_Task);
 8000800:	480f      	ldr	r0, [pc, #60]	; (8000840 <MY_RTOS_StartOS+0x54>)
 8000802:	f000 f861 	bl	80008c8 <MY_RTOS_Activate_Task>
	//Start Ticker
	StartTicker();
 8000806:	f7ff fe79 	bl	80004fc <StartTicker>
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MY_RTOS_StartOS+0x50>)
 800080c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4618      	mov	r0, r3
 8000814:	f380 8809 	msr	PSP, r0
	OS_SWITCH_SP_to_PSP;
 8000818:	f3ef 8014 	mrs	r0, CONTROL
 800081c:	f040 0002 	orr.w	r0, r0, #2
 8000820:	f380 8814 	msr	CONTROL, r0
	OS_SWITCH_CPU_access_level_to_unprivileged;
 8000824:	f3ef 8014 	mrs	r0, CONTROL
 8000828:	f040 0001 	orr.w	r0, r0, #1
 800082c:	f380 8814 	msr	CONTROL, r0
	MY_RTOS_IDLE_Task.p_TaskEntry();
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <MY_RTOS_StartOS+0x54>)
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	4798      	blx	r3

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200004c8 	.word	0x200004c8
 8000840:	20000674 	.word	0x20000674

08000844 <MY_RTOS_Create_Task>:

MY_RTOS_ERROR_ID MY_RTOS_Create_Task(Task_Ref* Tref){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	MY_RTOS_ERROR_ID Error = NO_ERROR;
 800084c:	2300      	movs	r3, #0
 800084e:	73fb      	strb	r3, [r7, #15]

	//check stack size exceed PSP
	Tref->_S_PSP_Task = OS_Control.PSP_Task_Locator;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MY_RTOS_Create_Task+0x7c>)
 8000852:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	611a      	str	r2, [r3, #16]
	Tref->_E_PSP_Task = (Tref->_S_PSP_Task - Tref->Stack_Size);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	691a      	ldr	r2, [r3, #16]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	1ad2      	subs	r2, r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	615a      	str	r2, [r3, #20]
	if(Tref->_E_PSP_Task < (uint32)(&(_eheap))){
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	4a15      	ldr	r2, [pc, #84]	; (80008c4 <MY_RTOS_Create_Task+0x80>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d201      	bcs.n	8000876 <MY_RTOS_Create_Task+0x32>
		return Task_Exceeded_StackSize_ERROR;
 8000872:	2302      	movs	r3, #2
 8000874:	e01f      	b.n	80008b6 <MY_RTOS_Create_Task+0x72>
	}
	OS_Control.PSP_Task_Locator = (Tref->_E_PSP_Task  - 8);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	3b08      	subs	r3, #8
 800087c:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <MY_RTOS_Create_Task+0x7c>)
 800087e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	MY_RTOS_Create_TaskStack(Tref);
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff ff34 	bl	80006f0 <MY_RTOS_Create_TaskStack>

	OS_Control.OSTasks[OS_Control.No_Active_Tasks] = Tref;
 8000888:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <MY_RTOS_Create_Task+0x7c>)
 800088a:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800088e:	490c      	ldr	r1, [pc, #48]	; (80008c0 <MY_RTOS_Create_Task+0x7c>)
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.No_Active_Tasks++;
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MY_RTOS_Create_Task+0x7c>)
 8000898:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800089c:	3301      	adds	r3, #1
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <MY_RTOS_Create_Task+0x7c>)
 80008a0:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
	Tref->TimingWaiting.Blocking = Disable_Waiting;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Tref->TaskState = Suspend;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	return Error;
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200004c8 	.word	0x200004c8
 80008c4:	20000a18 	.word	0x20000a18

080008c8 <MY_RTOS_Activate_Task>:

void MY_RTOS_Activate_Task(Task_Ref* Tref){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	Tref->TaskState = Waiting;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2202      	movs	r2, #2
 80008d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	OS_SVC_Set(SVC_ActivateTask);
 80008d8:	2001      	movs	r0, #1
 80008da:	f000 fab7 	bl	8000e4c <OS_SVC_Set>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <MY_RTOS_Terminate_Task>:
void MY_RTOS_Terminate_Task(Task_Ref* Tref){
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
	Tref->TaskState = Suspend;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	OS_SVC_Set(SVC_TerminateTask);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 faa8 	bl	8000e4c <OS_SVC_Set>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <MY_RTOS_IDLE_TASK>:
	OS_SVC_Set(SVC_TerminateTask);
}

uint8 IdleTaskIndic;

void MY_RTOS_IDLE_TASK(void){
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
	while(1){
		__asm("WFE");
 8000908:	bf20      	wfe
		IdleTaskIndic ^= 1;
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <MY_RTOS_IDLE_TASK+0x18>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	f083 0301 	eor.w	r3, r3, #1
 8000912:	b2da      	uxtb	r2, r3
 8000914:	4b01      	ldr	r3, [pc, #4]	; (800091c <MY_RTOS_IDLE_TASK+0x18>)
 8000916:	701a      	strb	r2, [r3, #0]
		__asm("WFE");
 8000918:	e7f6      	b.n	8000908 <MY_RTOS_IDLE_TASK+0x4>
 800091a:	bf00      	nop
 800091c:	200004c4 	.word	0x200004c4

08000920 <MY_RTOS_Acquire_Mutex>:
	}

}


MY_RTOS_ERROR_ID MY_RTOS_Acquire_Mutex(Mutex_Ref* Mref ,Task_Ref* Tref){
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
	if(Mref->Current_User == NULL)/*Free*/{
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d104      	bne.n	800093c <MY_RTOS_Acquire_Mutex+0x1c>
		Mref->Current_User = Tref;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	683a      	ldr	r2, [r7, #0]
 8000936:	609a      	str	r2, [r3, #8]
		return NO_ERROR;
 8000938:	2300      	movs	r3, #0
 800093a:	e02a      	b.n	8000992 <MY_RTOS_Acquire_Mutex+0x72>
	}
	else{
		if(Mref->Current_User == Tref){
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	683a      	ldr	r2, [r7, #0]
 8000942:	429a      	cmp	r2, r3
 8000944:	d101      	bne.n	800094a <MY_RTOS_Acquire_Mutex+0x2a>
			return NO_ERROR;
 8000946:	2300      	movs	r3, #0
 8000948:	e023      	b.n	8000992 <MY_RTOS_Acquire_Mutex+0x72>
		}
		uint8 i = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	73fb      	strb	r3, [r7, #15]
		for(i = 0; i < MutexMaxWaiting; i++){
 800094e:	2300      	movs	r3, #0
 8000950:	73fb      	strb	r3, [r7, #15]
 8000952:	e01a      	b.n	800098a <MY_RTOS_Acquire_Mutex+0x6a>
			if(Mref->Next_Users[i] == NULL)/*Reserve*/{
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	330a      	adds	r3, #10
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d10f      	bne.n	8000984 <MY_RTOS_Acquire_Mutex+0x64>
				Mref->Next_Users[i] = Tref;
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	330a      	adds	r3, #10
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	683a      	ldr	r2, [r7, #0]
 8000970:	605a      	str	r2, [r3, #4]
				Tref->TaskState = Suspend;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				OS_SVC_Set(SVC_TerminateTask);
 800097a:	2000      	movs	r0, #0
 800097c:	f000 fa66 	bl	8000e4c <OS_SVC_Set>
				return NO_ERROR;
 8000980:	2300      	movs	r3, #0
 8000982:	e006      	b.n	8000992 <MY_RTOS_Acquire_Mutex+0x72>
		for(i = 0; i < MutexMaxWaiting; i++){
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	3301      	adds	r3, #1
 8000988:	73fb      	strb	r3, [r7, #15]
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	2b09      	cmp	r3, #9
 800098e:	d9e1      	bls.n	8000954 <MY_RTOS_Acquire_Mutex+0x34>
			}
		}
		return Mutex_Max_Waiting;
 8000990:	2303      	movs	r3, #3
	}

}
 8000992:	4618      	mov	r0, r3
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <MY_RTOS_Release_Mutex>:
void MY_RTOS_Release_Mutex(Mutex_Ref* Mref){
 800099a:	b580      	push	{r7, lr}
 800099c:	b084      	sub	sp, #16
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]

	if(Mref->Current_User != NULL)/*Taken*/{
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d02e      	beq.n	8000a08 <MY_RTOS_Release_Mutex+0x6e>
		Mref->Current_User = Mref->Next_Users[0];
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	609a      	str	r2, [r3, #8]
		uint8 i = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	73fb      	strb	r3, [r7, #15]
		for(i = 0; i < MutexMaxWaiting-1; i++){
 80009b6:	2300      	movs	r3, #0
 80009b8:	73fb      	strb	r3, [r7, #15]
 80009ba:	e018      	b.n	80009ee <MY_RTOS_Release_Mutex+0x54>
			if(Mref->Next_Users[i] != NULL)/*Reserve*/{
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	330a      	adds	r3, #10
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d014      	beq.n	80009f6 <MY_RTOS_Release_Mutex+0x5c>
				Mref->Next_Users[i] = Mref->Next_Users[i+1];
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	3301      	adds	r3, #1
 80009d0:	7bf8      	ldrb	r0, [r7, #15]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	330a      	adds	r3, #10
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4413      	add	r3, r2
 80009da:	685a      	ldr	r2, [r3, #4]
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	f100 030a 	add.w	r3, r0, #10
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	440b      	add	r3, r1
 80009e6:	605a      	str	r2, [r3, #4]
		for(i = 0; i < MutexMaxWaiting-1; i++){
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	3301      	adds	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	2b08      	cmp	r3, #8
 80009f2:	d9e3      	bls.n	80009bc <MY_RTOS_Release_Mutex+0x22>
 80009f4:	e000      	b.n	80009f8 <MY_RTOS_Release_Mutex+0x5e>
			}
			else{
				break;
 80009f6:	bf00      	nop
			}
		}
		Mref->Current_User->TaskState = Waiting;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	2202      	movs	r2, #2
 80009fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		OS_SVC_Set(SVC_ActivateTask);
 8000a02:	2001      	movs	r0, #1
 8000a04:	f000 fa22 	bl	8000e4c <OS_SVC_Set>
	}

}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <PendSV_Handler>:

/*----- Handler Section ---- */

__attribute ((naked)) void PendSV_Handler(){
	//Save Current Task Context
	OS_GET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000a10:	4b6f      	ldr	r3, [pc, #444]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000a12:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a16:	f3ef 8009 	mrs	r0, PSP
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	619a      	str	r2, [r3, #24]
	OS_Control.CurrentTask->Current_PSP--;
 8000a1e:	4b6c      	ldr	r3, [pc, #432]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000a20:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a24:	699a      	ldr	r2, [r3, #24]
 8000a26:	3a04      	subs	r2, #4
 8000a28:	619a      	str	r2, [r3, #24]
	OS_SaveContext(R4 , OS_Control.CurrentTask->Current_PSP);
 8000a2a:	4b69      	ldr	r3, [pc, #420]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000a2c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4622      	mov	r2, r4
 8000a34:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000a36:	4b66      	ldr	r3, [pc, #408]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000a38:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a3c:	699a      	ldr	r2, [r3, #24]
 8000a3e:	3a04      	subs	r2, #4
 8000a40:	619a      	str	r2, [r3, #24]
	OS_SaveContext(R5 , OS_Control.CurrentTask->Current_PSP);
 8000a42:	4b63      	ldr	r3, [pc, #396]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000a44:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	462a      	mov	r2, r5
 8000a4c:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000a4e:	4b60      	ldr	r3, [pc, #384]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000a50:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a54:	699a      	ldr	r2, [r3, #24]
 8000a56:	3a04      	subs	r2, #4
 8000a58:	619a      	str	r2, [r3, #24]
	OS_SaveContext(R6 , OS_Control.CurrentTask->Current_PSP);
 8000a5a:	4b5d      	ldr	r3, [pc, #372]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000a5c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4632      	mov	r2, r6
 8000a64:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000a66:	4b5a      	ldr	r3, [pc, #360]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000a68:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a6c:	699a      	ldr	r2, [r3, #24]
 8000a6e:	3a04      	subs	r2, #4
 8000a70:	619a      	str	r2, [r3, #24]
	OS_SaveContext(R7 , OS_Control.CurrentTask->Current_PSP);
 8000a72:	4b57      	ldr	r3, [pc, #348]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000a74:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	463a      	mov	r2, r7
 8000a7c:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000a7e:	4b54      	ldr	r3, [pc, #336]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000a80:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a84:	699a      	ldr	r2, [r3, #24]
 8000a86:	3a04      	subs	r2, #4
 8000a88:	619a      	str	r2, [r3, #24]
	OS_SaveContext(R8 , OS_Control.CurrentTask->Current_PSP);
 8000a8a:	4b51      	ldr	r3, [pc, #324]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000a8c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	4642      	mov	r2, r8
 8000a94:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000a96:	4b4e      	ldr	r3, [pc, #312]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000a98:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a9c:	699a      	ldr	r2, [r3, #24]
 8000a9e:	3a04      	subs	r2, #4
 8000aa0:	619a      	str	r2, [r3, #24]
	OS_SaveContext(R9 , OS_Control.CurrentTask->Current_PSP);
 8000aa2:	4b4b      	ldr	r3, [pc, #300]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000aa4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	464a      	mov	r2, r9
 8000aac:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000aae:	4b48      	ldr	r3, [pc, #288]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000ab0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ab4:	699a      	ldr	r2, [r3, #24]
 8000ab6:	3a04      	subs	r2, #4
 8000ab8:	619a      	str	r2, [r3, #24]
	OS_SaveContext(R10 , OS_Control.CurrentTask->Current_PSP);
 8000aba:	4b45      	ldr	r3, [pc, #276]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000abc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4652      	mov	r2, sl
 8000ac4:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000ac6:	4b42      	ldr	r3, [pc, #264]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000ac8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000acc:	699a      	ldr	r2, [r3, #24]
 8000ace:	3a04      	subs	r2, #4
 8000ad0:	619a      	str	r2, [r3, #24]
	OS_SaveContext(R11 , OS_Control.CurrentTask->Current_PSP);
 8000ad2:	4b3f      	ldr	r3, [pc, #252]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000ad4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	465a      	mov	r2, fp
 8000adc:	601a      	str	r2, [r3, #0]

	//Restore Next Task Context
	if (OS_Control.NextTask != NULL){
 8000ade:	4b3c      	ldr	r3, [pc, #240]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000ae0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d009      	beq.n	8000afc <PendSV_Handler+0xec>
	OS_Control.CurrentTask = OS_Control.NextTask ;
 8000ae8:	4b39      	ldr	r3, [pc, #228]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000aea:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000aee:	4a38      	ldr	r2, [pc, #224]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000af0:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	OS_Control.NextTask = NULL ;
 8000af4:	4b36      	ldr	r3, [pc, #216]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}

	OS_RestoreContext(R11 , OS_Control.CurrentTask->Current_PSP);
 8000afc:	4b34      	ldr	r3, [pc, #208]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000afe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	469b      	mov	fp, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000b08:	4b31      	ldr	r3, [pc, #196]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000b0a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b0e:	699a      	ldr	r2, [r3, #24]
 8000b10:	3204      	adds	r2, #4
 8000b12:	619a      	str	r2, [r3, #24]
	OS_RestoreContext(R10 , OS_Control.CurrentTask->Current_PSP);
 8000b14:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000b16:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	469a      	mov	sl, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000b20:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000b22:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b26:	699a      	ldr	r2, [r3, #24]
 8000b28:	3204      	adds	r2, #4
 8000b2a:	619a      	str	r2, [r3, #24]
	OS_RestoreContext(R9 , OS_Control.CurrentTask->Current_PSP);
 8000b2c:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000b2e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4699      	mov	r9, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000b38:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000b3a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b3e:	699a      	ldr	r2, [r3, #24]
 8000b40:	3204      	adds	r2, #4
 8000b42:	619a      	str	r2, [r3, #24]
	OS_RestoreContext(R8 , OS_Control.CurrentTask->Current_PSP);
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000b46:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4698      	mov	r8, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000b52:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b56:	699a      	ldr	r2, [r3, #24]
 8000b58:	3204      	adds	r2, #4
 8000b5a:	619a      	str	r2, [r3, #24]
	OS_RestoreContext(R7 , OS_Control.CurrentTask->Current_PSP);
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000b5e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	461f      	mov	r7, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000b6a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b6e:	699a      	ldr	r2, [r3, #24]
 8000b70:	3204      	adds	r2, #4
 8000b72:	619a      	str	r2, [r3, #24]
	OS_RestoreContext(R6 , OS_Control.CurrentTask->Current_PSP);
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000b76:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	461e      	mov	r6, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000b82:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b86:	699a      	ldr	r2, [r3, #24]
 8000b88:	3204      	adds	r2, #4
 8000b8a:	619a      	str	r2, [r3, #24]
	OS_RestoreContext(R5 , OS_Control.CurrentTask->Current_PSP);
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000b8e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000b98:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000b9a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b9e:	699a      	ldr	r2, [r3, #24]
 8000ba0:	3204      	adds	r2, #4
 8000ba2:	619a      	str	r2, [r3, #24]
	OS_RestoreContext(R4 , OS_Control.CurrentTask->Current_PSP);
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000ba6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	461c      	mov	r4, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000bb2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000bb6:	699a      	ldr	r2, [r3, #24]
 8000bb8:	3204      	adds	r2, #4
 8000bba:	619a      	str	r2, [r3, #24]

	//Update PSP
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <PendSV_Handler+0x1c0>)
 8000bbe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f380 8809 	msr	PSP, r0
	__asm volatile ("BX LR");
 8000bca:	4770      	bx	lr



}
 8000bcc:	bf00      	nop
 8000bce:	bf00      	nop
 8000bd0:	200004c8 	.word	0x200004c8

08000bd4 <DecideNext>:

void DecideNext(void){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	//If Queue is Empty & Current TasK != Suspend
	if((Ready_Queue.count == 0) && (OS_Control.CurrentTask->TaskState != Suspend)){
 8000bd8:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <DecideNext+0x98>)
 8000bda:	885b      	ldrh	r3, [r3, #2]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d11a      	bne.n	8000c16 <DecideNext+0x42>
 8000be0:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <DecideNext+0x9c>)
 8000be2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000be6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d013      	beq.n	8000c16 <DecideNext+0x42>
		OS_Control.CurrentTask->TaskState = Running;
 8000bee:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <DecideNext+0x9c>)
 8000bf0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		//add Current Task to Ready Queue (Round Robin)
		FIFO_Enqueue(&Ready_Queue, OS_Control.CurrentTask);
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <DecideNext+0x9c>)
 8000bfc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c00:	4619      	mov	r1, r3
 8000c02:	481a      	ldr	r0, [pc, #104]	; (8000c6c <DecideNext+0x98>)
 8000c04:	f7ff fc96 	bl	8000534 <FIFO_Enqueue>
		OS_Control.NextTask = OS_Control.CurrentTask;
 8000c08:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <DecideNext+0x9c>)
 8000c0a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c0e:	4a18      	ldr	r2, [pc, #96]	; (8000c70 <DecideNext+0x9c>)
 8000c10:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		if((OS_Control.CurrentTask->Priority == OS_Control.NextTask->Priority)&&(OS_Control.CurrentTask->TaskState != Suspend)){
			FIFO_Enqueue(&Ready_Queue, OS_Control.CurrentTask);
			OS_Control.CurrentTask->TaskState = Ready;
		}
	}
}
 8000c14:	e027      	b.n	8000c66 <DecideNext+0x92>
		FIFO_Dequeue(&Ready_Queue, &OS_Control.NextTask);
 8000c16:	4917      	ldr	r1, [pc, #92]	; (8000c74 <DecideNext+0xa0>)
 8000c18:	4814      	ldr	r0, [pc, #80]	; (8000c6c <DecideNext+0x98>)
 8000c1a:	f7ff fccc 	bl	80005b6 <FIFO_Dequeue>
		OS_Control.NextTask->TaskState = Running;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <DecideNext+0x9c>)
 8000c20:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000c24:	2201      	movs	r2, #1
 8000c26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if((OS_Control.CurrentTask->Priority == OS_Control.NextTask->Priority)&&(OS_Control.CurrentTask->TaskState != Suspend)){
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <DecideNext+0x9c>)
 8000c2c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c30:	791a      	ldrb	r2, [r3, #4]
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <DecideNext+0x9c>)
 8000c34:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000c38:	791b      	ldrb	r3, [r3, #4]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d113      	bne.n	8000c66 <DecideNext+0x92>
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <DecideNext+0x9c>)
 8000c40:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00c      	beq.n	8000c66 <DecideNext+0x92>
			FIFO_Enqueue(&Ready_Queue, OS_Control.CurrentTask);
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <DecideNext+0x9c>)
 8000c4e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <DecideNext+0x98>)
 8000c56:	f7ff fc6d 	bl	8000534 <FIFO_Enqueue>
			OS_Control.CurrentTask->TaskState = Ready;
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <DecideNext+0x9c>)
 8000c5c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c60:	2203      	movs	r2, #3
 8000c62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200004b4 	.word	0x200004b4
 8000c70:	200004c8 	.word	0x200004c8
 8000c74:	2000066c 	.word	0x2000066c

08000c78 <OS_SVC>:


void OS_SVC(int* StackFramePointer){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

	SVC_ID ID;

	ID = (*(uint8*)(((uint8*)StackFramePointer[6])-2));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3318      	adds	r3, #24
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3b02      	subs	r3, #2
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	73fb      	strb	r3, [r7, #15]

	switch(ID){
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db1f      	blt.n	8000cd2 <OS_SVC+0x5a>
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	dd02      	ble.n	8000c9c <OS_SVC+0x24>
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d017      	beq.n	8000cca <OS_SVC+0x52>
		MY_RTOS_Update_SchedulerTable();

		break;
	}

}
 8000c9a:	e01a      	b.n	8000cd2 <OS_SVC+0x5a>
		MY_RTOS_Update_SchedulerTable();
 8000c9c:	f000 f822 	bl	8000ce4 <MY_RTOS_Update_SchedulerTable>
		if(OS_Control.OS_Mode_ID == OS_Running){
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <OS_SVC+0x64>)
 8000ca2:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d112      	bne.n	8000cd0 <OS_SVC+0x58>
			if (strcmp(OS_Control.CurrentTask->TaskName,"IDLE_Task") != 0){
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <OS_SVC+0x64>)
 8000cac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000cb0:	331c      	adds	r3, #28
 8000cb2:	490b      	ldr	r1, [pc, #44]	; (8000ce0 <OS_SVC+0x68>)
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fa5b 	bl	8000170 <strcmp>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d007      	beq.n	8000cd0 <OS_SVC+0x58>
				DecideNext();
 8000cc0:	f7ff ff88 	bl	8000bd4 <DecideNext>
				Trigger_OS_PendSV();
 8000cc4:	f7ff fc0c 	bl	80004e0 <Trigger_OS_PendSV>
		break;
 8000cc8:	e002      	b.n	8000cd0 <OS_SVC+0x58>
		MY_RTOS_Update_SchedulerTable();
 8000cca:	f000 f80b 	bl	8000ce4 <MY_RTOS_Update_SchedulerTable>
		break;
 8000cce:	e000      	b.n	8000cd2 <OS_SVC+0x5a>
		break;
 8000cd0:	bf00      	nop
}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200004c8 	.word	0x200004c8
 8000ce0:	080012ec 	.word	0x080012ec

08000ce4 <MY_RTOS_Update_SchedulerTable>:

void MY_RTOS_Update_SchedulerTable(void){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

	//Bubble sort SchTable Higher ---> Lower Priority
	BubbleSort();
 8000cea:	f000 f8c7 	bl	8000e7c <BubbleSort>
	//Free Ready Queue
	Task_Ref* Temp = NULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	603b      	str	r3, [r7, #0]
	while(FIFO_Dequeue(&Ready_Queue, &Temp /* Pointer to Pointer */)!= FIFO_Empty);
 8000cf2:	bf00      	nop
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4833      	ldr	r0, [pc, #204]	; (8000dc8 <MY_RTOS_Update_SchedulerTable+0xe4>)
 8000cfa:	f7ff fc5c 	bl	80005b6 <FIFO_Dequeue>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d1f7      	bne.n	8000cf4 <MY_RTOS_Update_SchedulerTable+0x10>
	//Update Ready Queue
	uint8 i = 0 ;
 8000d04:	2300      	movs	r3, #0
 8000d06:	71fb      	strb	r3, [r7, #7]
	for( i = 0 ; i < OS_Control.No_Active_Tasks ; i++){
 8000d08:	2300      	movs	r3, #0
 8000d0a:	71fb      	strb	r3, [r7, #7]
 8000d0c:	e04f      	b.n	8000dae <MY_RTOS_Update_SchedulerTable+0xca>

		if (OS_Control.OSTasks[i]->TaskState != Suspend){
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	4a2e      	ldr	r2, [pc, #184]	; (8000dcc <MY_RTOS_Update_SchedulerTable+0xe8>)
 8000d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d044      	beq.n	8000da8 <MY_RTOS_Update_SchedulerTable+0xc4>
			if ( OS_Control.OSTasks[i]->Priority != OS_Control.OSTasks[i+1]->Priority ){
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4a2a      	ldr	r2, [pc, #168]	; (8000dcc <MY_RTOS_Update_SchedulerTable+0xe8>)
 8000d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d26:	791a      	ldrb	r2, [r3, #4]
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	4927      	ldr	r1, [pc, #156]	; (8000dcc <MY_RTOS_Update_SchedulerTable+0xe8>)
 8000d2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d32:	791b      	ldrb	r3, [r3, #4]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d00f      	beq.n	8000d58 <MY_RTOS_Update_SchedulerTable+0x74>
				FIFO_Enqueue(&Ready_Queue, OS_Control.OSTasks[i]);
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	4a24      	ldr	r2, [pc, #144]	; (8000dcc <MY_RTOS_Update_SchedulerTable+0xe8>)
 8000d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d40:	4619      	mov	r1, r3
 8000d42:	4821      	ldr	r0, [pc, #132]	; (8000dc8 <MY_RTOS_Update_SchedulerTable+0xe4>)
 8000d44:	f7ff fbf6 	bl	8000534 <FIFO_Enqueue>
				OS_Control.OSTasks[i]->TaskState = Ready;
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	4a20      	ldr	r2, [pc, #128]	; (8000dcc <MY_RTOS_Update_SchedulerTable+0xe8>)
 8000d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d50:	2203      	movs	r2, #3
 8000d52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000d56:	e032      	b.n	8000dbe <MY_RTOS_Update_SchedulerTable+0xda>
			}
			else if(OS_Control.OSTasks[i]->Priority == OS_Control.OSTasks[i+1]->Priority){
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	4a1c      	ldr	r2, [pc, #112]	; (8000dcc <MY_RTOS_Update_SchedulerTable+0xe8>)
 8000d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d60:	791a      	ldrb	r2, [r3, #4]
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	3301      	adds	r3, #1
 8000d66:	4919      	ldr	r1, [pc, #100]	; (8000dcc <MY_RTOS_Update_SchedulerTable+0xe8>)
 8000d68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d6c:	791b      	ldrb	r3, [r3, #4]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d10f      	bne.n	8000d92 <MY_RTOS_Update_SchedulerTable+0xae>
				FIFO_Enqueue(&Ready_Queue, OS_Control.OSTasks[i]);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <MY_RTOS_Update_SchedulerTable+0xe8>)
 8000d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4812      	ldr	r0, [pc, #72]	; (8000dc8 <MY_RTOS_Update_SchedulerTable+0xe4>)
 8000d7e:	f7ff fbd9 	bl	8000534 <FIFO_Enqueue>
				OS_Control.OSTasks[i]->TaskState = Ready;
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	4a11      	ldr	r2, [pc, #68]	; (8000dcc <MY_RTOS_Update_SchedulerTable+0xe8>)
 8000d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8000d90:	e00a      	b.n	8000da8 <MY_RTOS_Update_SchedulerTable+0xc4>
			}
			else if(OS_Control.OSTasks[i] > OS_Control.OSTasks[i+1]){
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <MY_RTOS_Update_SchedulerTable+0xe8>)
 8000d96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	490b      	ldr	r1, [pc, #44]	; (8000dcc <MY_RTOS_Update_SchedulerTable+0xe8>)
 8000da0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d809      	bhi.n	8000dbc <MY_RTOS_Update_SchedulerTable+0xd8>
	for( i = 0 ; i < OS_Control.No_Active_Tasks ; i++){
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	3301      	adds	r3, #1
 8000dac:	71fb      	strb	r3, [r7, #7]
 8000dae:	79fa      	ldrb	r2, [r7, #7]
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MY_RTOS_Update_SchedulerTable+0xe8>)
 8000db2:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d3a9      	bcc.n	8000d0e <MY_RTOS_Update_SchedulerTable+0x2a>
				break;
			}
		}
	}

}
 8000dba:	e000      	b.n	8000dbe <MY_RTOS_Update_SchedulerTable+0xda>
				break;
 8000dbc:	bf00      	nop
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200004b4 	.word	0x200004b4
 8000dcc:	200004c8 	.word	0x200004c8

08000dd0 <MY_RTOS_Update_TaskingTime>:

void MY_RTOS_Update_TaskingTime(void){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	uint8 i = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	71fb      	strb	r3, [r7, #7]
	for(i = 0 ; i < OS_Control.No_Active_Tasks ; i++){
 8000dda:	2300      	movs	r3, #0
 8000ddc:	71fb      	strb	r3, [r7, #7]
 8000dde:	e029      	b.n	8000e34 <MY_RTOS_Update_TaskingTime+0x64>
		if(OS_Control.OSTasks[i]->TimingWaiting.Blocking == Enable_Waiting){
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	4a19      	ldr	r2, [pc, #100]	; (8000e48 <MY_RTOS_Update_TaskingTime+0x78>)
 8000de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d11e      	bne.n	8000e2e <MY_RTOS_Update_TaskingTime+0x5e>
			OS_Control.OSTasks[i]->TimingWaiting.Ticks--;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	4a15      	ldr	r2, [pc, #84]	; (8000e48 <MY_RTOS_Update_TaskingTime+0x78>)
 8000df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dfa:	3a01      	subs	r2, #1
 8000dfc:	641a      	str	r2, [r3, #64]	; 0x40
			if(OS_Control.OSTasks[i]->TimingWaiting.Ticks == 0){
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	4a11      	ldr	r2, [pc, #68]	; (8000e48 <MY_RTOS_Update_TaskingTime+0x78>)
 8000e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d110      	bne.n	8000e2e <MY_RTOS_Update_TaskingTime+0x5e>
				OS_Control.OSTasks[i]->TimingWaiting.Blocking = Disable_Waiting;
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <MY_RTOS_Update_TaskingTime+0x78>)
 8000e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				OS_Control.OSTasks[i]->TaskState = Waiting;
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <MY_RTOS_Update_TaskingTime+0x78>)
 8000e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e22:	2202      	movs	r2, #2
 8000e24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				OS_SVC_Set(SVC_TaskWaitingTime);
 8000e28:	2002      	movs	r0, #2
 8000e2a:	f000 f80f 	bl	8000e4c <OS_SVC_Set>
	for(i = 0 ; i < OS_Control.No_Active_Tasks ; i++){
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	3301      	adds	r3, #1
 8000e32:	71fb      	strb	r3, [r7, #7]
 8000e34:	79fa      	ldrb	r2, [r7, #7]
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <MY_RTOS_Update_TaskingTime+0x78>)
 8000e38:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d3cf      	bcc.n	8000de0 <MY_RTOS_Update_TaskingTime+0x10>
			}
		}
	}
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200004c8 	.word	0x200004c8

08000e4c <OS_SVC_Set>:

void OS_SVC_Set(SVC_ID ID){
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]

	switch(ID){
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d006      	beq.n	8000e6a <OS_SVC_Set+0x1e>
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d006      	beq.n	8000e6e <OS_SVC_Set+0x22>
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d000      	beq.n	8000e66 <OS_SVC_Set+0x1a>
		__asm("SVC #0x2");//mult
		break;

	}

}
 8000e64:	e005      	b.n	8000e72 <OS_SVC_Set+0x26>
		__asm("SVC #0x0");
 8000e66:	df00      	svc	0
		break;
 8000e68:	e003      	b.n	8000e72 <OS_SVC_Set+0x26>
		__asm("SVC #0x1");
 8000e6a:	df01      	svc	1
		break;
 8000e6c:	e001      	b.n	8000e72 <OS_SVC_Set+0x26>
		__asm("SVC #0x2");//mult
 8000e6e:	df02      	svc	2
		break;
 8000e70:	bf00      	nop
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <BubbleSort>:

void BubbleSort(void){
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0

	uint8 i,j, n = OS_Control.No_Active_Tasks;
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <BubbleSort+0x8c>)
 8000e84:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000e88:	717b      	strb	r3, [r7, #5]
	Task_Ref* Temp;

	for(i=0 ; i < n-1 ; i++){
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	e030      	b.n	8000ef2 <BubbleSort+0x76>
		for(j= 0; j < n-i-1 ; j++){
 8000e90:	2300      	movs	r3, #0
 8000e92:	71bb      	strb	r3, [r7, #6]
 8000e94:	e023      	b.n	8000ede <BubbleSort+0x62>
			if(OS_Control.OSTasks[j]->Priority > OS_Control.OSTasks[j+1]->Priority){
 8000e96:	79bb      	ldrb	r3, [r7, #6]
 8000e98:	4a1b      	ldr	r2, [pc, #108]	; (8000f08 <BubbleSort+0x8c>)
 8000e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9e:	791a      	ldrb	r2, [r3, #4]
 8000ea0:	79bb      	ldrb	r3, [r7, #6]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	4918      	ldr	r1, [pc, #96]	; (8000f08 <BubbleSort+0x8c>)
 8000ea6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000eaa:	791b      	ldrb	r3, [r3, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d913      	bls.n	8000ed8 <BubbleSort+0x5c>
				Temp = OS_Control.OSTasks[j];
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <BubbleSort+0x8c>)
 8000eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb8:	603b      	str	r3, [r7, #0]
				OS_Control.OSTasks[j] = OS_Control.OSTasks[j+1];
 8000eba:	79bb      	ldrb	r3, [r7, #6]
 8000ebc:	1c5a      	adds	r2, r3, #1
 8000ebe:	79bb      	ldrb	r3, [r7, #6]
 8000ec0:	4911      	ldr	r1, [pc, #68]	; (8000f08 <BubbleSort+0x8c>)
 8000ec2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ec6:	4910      	ldr	r1, [pc, #64]	; (8000f08 <BubbleSort+0x8c>)
 8000ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OSTasks[j+1] = Temp;
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	490d      	ldr	r1, [pc, #52]	; (8000f08 <BubbleSort+0x8c>)
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j= 0; j < n-i-1 ; j++){
 8000ed8:	79bb      	ldrb	r3, [r7, #6]
 8000eda:	3301      	adds	r3, #1
 8000edc:	71bb      	strb	r3, [r7, #6]
 8000ede:	79ba      	ldrb	r2, [r7, #6]
 8000ee0:	7979      	ldrb	r1, [r7, #5]
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	1acb      	subs	r3, r1, r3
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	dbd4      	blt.n	8000e96 <BubbleSort+0x1a>
	for(i=0 ; i < n-1 ; i++){
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	71fb      	strb	r3, [r7, #7]
 8000ef2:	79fa      	ldrb	r2, [r7, #7]
 8000ef4:	797b      	ldrb	r3, [r7, #5]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dbc9      	blt.n	8000e90 <BubbleSort+0x14>
			}
		}
	}

}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	200004c8 	.word	0x200004c8

08000f0c <main>:
uint8 Task1Indic,Task2Indic,Task3Indic;

uint8 payload[3] = {1,2,3};

int main(void)
{	MY_RTOS_ERROR_ID error = NO_ERROR;
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	2300      	movs	r3, #0
 8000f14:	71fb      	strb	r3, [r7, #7]
	HW_init();
 8000f16:	f7ff fad9 	bl	80004cc <HW_init>
	MY_RTOS_init();
 8000f1a:	f7ff fc27 	bl	800076c <MY_RTOS_init>
	//Configure Task1
	MY_RTOS_Config_Task( MY_RTOS_Task1 ,"MY RTOS Task1" , 3, TASK1, 1024);
 8000f1e:	4a30      	ldr	r2, [pc, #192]	; (8000fe0 <main+0xd4>)
 8000f20:	4b30      	ldr	r3, [pc, #192]	; (8000fe4 <main+0xd8>)
 8000f22:	4614      	mov	r4, r2
 8000f24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f26:	c407      	stmia	r4!, {r0, r1, r2}
 8000f28:	8023      	strh	r3, [r4, #0]
 8000f2a:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <main+0xdc>)
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	711a      	strb	r2, [r3, #4]
 8000f30:	4b2d      	ldr	r3, [pc, #180]	; (8000fe8 <main+0xdc>)
 8000f32:	4a2e      	ldr	r2, [pc, #184]	; (8000fec <main+0xe0>)
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	4b2c      	ldr	r3, [pc, #176]	; (8000fe8 <main+0xdc>)
 8000f38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f3c:	601a      	str	r2, [r3, #0]
	MY_RTOS_Task1.Priority = 3;
	MY_RTOS_Task1.p_TaskEntry = TASK1;
	MY_RTOS_Task1.Stack_Size = 1024;*/

	//Configure Task2
	MY_RTOS_Config_Task( MY_RTOS_Task2 ,"MY RTOS Task2" , 2, TASK2, 1024);
 8000f3e:	4a2c      	ldr	r2, [pc, #176]	; (8000ff0 <main+0xe4>)
 8000f40:	4b2c      	ldr	r3, [pc, #176]	; (8000ff4 <main+0xe8>)
 8000f42:	4614      	mov	r4, r2
 8000f44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f46:	c407      	stmia	r4!, {r0, r1, r2}
 8000f48:	8023      	strh	r3, [r4, #0]
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <main+0xec>)
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	711a      	strb	r2, [r3, #4]
 8000f50:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <main+0xec>)
 8000f52:	4a2a      	ldr	r2, [pc, #168]	; (8000ffc <main+0xf0>)
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <main+0xec>)
 8000f58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f5c:	601a      	str	r2, [r3, #0]
	MY_RTOS_Task2.Priority = 2;
	MY_RTOS_Task2.p_TaskEntry = TASK2;
	MY_RTOS_Task2.Stack_Size = 1024;*/

	//Configure Task3
	MY_RTOS_Config_Task( MY_RTOS_Task3 ,"MY RTOS Task3" , 1, TASK3, 1024);
 8000f5e:	4a28      	ldr	r2, [pc, #160]	; (8001000 <main+0xf4>)
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <main+0xf8>)
 8000f62:	4614      	mov	r4, r2
 8000f64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f66:	c407      	stmia	r4!, {r0, r1, r2}
 8000f68:	8023      	strh	r3, [r4, #0]
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <main+0xfc>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	711a      	strb	r2, [r3, #4]
 8000f70:	4b25      	ldr	r3, [pc, #148]	; (8001008 <main+0xfc>)
 8000f72:	4a26      	ldr	r2, [pc, #152]	; (800100c <main+0x100>)
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	4b24      	ldr	r3, [pc, #144]	; (8001008 <main+0xfc>)
 8000f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f7c:	601a      	str	r2, [r3, #0]
	MY_RTOS_Task3.Priority = 1;
	MY_RTOS_Task3.p_TaskEntry = TASK3;
	MY_RTOS_Task3.Stack_Size = 1024;*/

	//configure Mutex1
	MY_RTOS_Config_Mutex(Mutex1, "Mutex Task 1&3", 3 , payload);
 8000f7e:	4a24      	ldr	r2, [pc, #144]	; (8001010 <main+0x104>)
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <main+0x108>)
 8000f82:	4614      	mov	r4, r2
 8000f84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f86:	c407      	stmia	r4!, {r0, r1, r2}
 8000f88:	8023      	strh	r3, [r4, #0]
 8000f8a:	3402      	adds	r4, #2
 8000f8c:	0c1b      	lsrs	r3, r3, #16
 8000f8e:	7023      	strb	r3, [r4, #0]
 8000f90:	4b21      	ldr	r3, [pc, #132]	; (8001018 <main+0x10c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <main+0x10c>)
 8000f98:	2203      	movs	r2, #3
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <main+0x10c>)
 8000f9e:	4a1f      	ldr	r2, [pc, #124]	; (800101c <main+0x110>)
 8000fa0:	601a      	str	r2, [r3, #0]
	/*strcpy(Mutex1.Mutex_Name,"Mutex Task 1&3");
	Mutex1.Payload_Size = 3;
	Mutex1.Ppayload = payload;*/

	error += MY_RTOS_Create_Task(&MY_RTOS_Task1);
 8000fa2:	4811      	ldr	r0, [pc, #68]	; (8000fe8 <main+0xdc>)
 8000fa4:	f7ff fc4e 	bl	8000844 <MY_RTOS_Create_Task>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	4413      	add	r3, r2
 8000fb0:	71fb      	strb	r3, [r7, #7]
	error += MY_RTOS_Create_Task(&MY_RTOS_Task2);
 8000fb2:	4811      	ldr	r0, [pc, #68]	; (8000ff8 <main+0xec>)
 8000fb4:	f7ff fc46 	bl	8000844 <MY_RTOS_Create_Task>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	461a      	mov	r2, r3
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	71fb      	strb	r3, [r7, #7]
	error += MY_RTOS_Create_Task(&MY_RTOS_Task3);
 8000fc2:	4811      	ldr	r0, [pc, #68]	; (8001008 <main+0xfc>)
 8000fc4:	f7ff fc3e 	bl	8000844 <MY_RTOS_Create_Task>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	4413      	add	r3, r2
 8000fd0:	71fb      	strb	r3, [r7, #7]

	MY_RTOS_Activate_Task(&MY_RTOS_Task1);
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <main+0xdc>)
 8000fd4:	f7ff fc78 	bl	80008c8 <MY_RTOS_Activate_Task>
	//MY_RTOS_Activate_Task(&MY_RTOS_Task2);
	//MY_RTOS_Activate_Task(&MY_RTOS_Task3);

	MY_RTOS_StartOS();
 8000fd8:	f7ff fc08 	bl	80007ec <MY_RTOS_StartOS>

	while (1) {
 8000fdc:	e7fe      	b.n	8000fdc <main+0xd0>
 8000fde:	bf00      	nop
 8000fe0:	200007e0 	.word	0x200007e0
 8000fe4:	080012f8 	.word	0x080012f8
 8000fe8:	200007c4 	.word	0x200007c4
 8000fec:	08001021 	.word	0x08001021
 8000ff0:	20000754 	.word	0x20000754
 8000ff4:	08001308 	.word	0x08001308
 8000ff8:	20000738 	.word	0x20000738
 8000ffc:	08001081 	.word	0x08001081
 8001000:	20000798 	.word	0x20000798
 8001004:	08001318 	.word	0x08001318
 8001008:	2000077c 	.word	0x2000077c
 800100c:	080010d5 	.word	0x080010d5
 8001010:	200006ec 	.word	0x200006ec
 8001014:	08001328 	.word	0x08001328
 8001018:	200006e0 	.word	0x200006e0
 800101c:	20000000 	.word	0x20000000

08001020 <TASK1>:
	}


}

void TASK1(){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

	static int count = 0;
	while(1){
		Task1Indic ^= 1;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <TASK1+0x4c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	f083 0301 	eor.w	r3, r3, #1
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b0f      	ldr	r3, [pc, #60]	; (800106c <TASK1+0x4c>)
 8001030:	701a      	strb	r2, [r3, #0]
		count++;
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <TASK1+0x50>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	4a0d      	ldr	r2, [pc, #52]	; (8001070 <TASK1+0x50>)
 800103a:	6013      	str	r3, [r2, #0]
		if(count == 500){
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <TASK1+0x50>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001044:	d106      	bne.n	8001054 <TASK1+0x34>
			MY_RTOS_Acquire_Mutex(&Mutex1, &MY_RTOS_Task1);
 8001046:	490b      	ldr	r1, [pc, #44]	; (8001074 <TASK1+0x54>)
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <TASK1+0x58>)
 800104a:	f7ff fc69 	bl	8000920 <MY_RTOS_Acquire_Mutex>
			MY_RTOS_Activate_Task(&MY_RTOS_Task2);
 800104e:	480b      	ldr	r0, [pc, #44]	; (800107c <TASK1+0x5c>)
 8001050:	f7ff fc3a 	bl	80008c8 <MY_RTOS_Activate_Task>
		}
		if(count == 1000){
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <TASK1+0x50>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800105c:	d1e2      	bne.n	8001024 <TASK1+0x4>
			count = 0;
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <TASK1+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
			MY_RTOS_Release_Mutex(&Mutex1);
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <TASK1+0x58>)
 8001066:	f7ff fc98 	bl	800099a <MY_RTOS_Release_Mutex>
		Task1Indic ^= 1;
 800106a:	e7db      	b.n	8001024 <TASK1+0x4>
 800106c:	20000734 	.word	0x20000734
 8001070:	20000450 	.word	0x20000450
 8001074:	200007c4 	.word	0x200007c4
 8001078:	200006e0 	.word	0x200006e0
 800107c:	20000738 	.word	0x20000738

08001080 <TASK2>:
		}
	}

}

void TASK2(){
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0

	static int count = 0;
	while(1){
		Task2Indic ^= 1;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <TASK2+0x44>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	f083 0301 	eor.w	r3, r3, #1
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <TASK2+0x44>)
 8001090:	701a      	strb	r2, [r3, #0]
		count++;
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <TASK2+0x48>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <TASK2+0x48>)
 800109a:	6013      	str	r3, [r2, #0]
		if(count == 500){
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <TASK2+0x48>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010a4:	d102      	bne.n	80010ac <TASK2+0x2c>
			MY_RTOS_Activate_Task(&MY_RTOS_Task3);
 80010a6:	4809      	ldr	r0, [pc, #36]	; (80010cc <TASK2+0x4c>)
 80010a8:	f7ff fc0e 	bl	80008c8 <MY_RTOS_Activate_Task>
		}
		if(count == 1000){
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <TASK2+0x48>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010b4:	d1e6      	bne.n	8001084 <TASK2+0x4>
			MY_RTOS_Terminate_Task(&MY_RTOS_Task2);
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <TASK2+0x50>)
 80010b8:	f7ff fc15 	bl	80008e6 <MY_RTOS_Terminate_Task>
			count = 0;
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <TASK2+0x48>)
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
		Task2Indic ^= 1;
 80010c2:	e7df      	b.n	8001084 <TASK2+0x4>
 80010c4:	200007c0 	.word	0x200007c0
 80010c8:	20000454 	.word	0x20000454
 80010cc:	2000077c 	.word	0x2000077c
 80010d0:	20000738 	.word	0x20000738

080010d4 <TASK3>:
		}
	}

}

void TASK3(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	static int count = 0;
	while(1){
		Task3Indic ^= 1;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <TASK3+0x5c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	f083 0301 	eor.w	r3, r3, #1
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <TASK3+0x5c>)
 80010e4:	701a      	strb	r2, [r3, #0]
		count++;
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <TASK3+0x60>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4a11      	ldr	r2, [pc, #68]	; (8001134 <TASK3+0x60>)
 80010ee:	6013      	str	r3, [r2, #0]
		if(count == 50){
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <TASK3+0x60>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b32      	cmp	r3, #50	; 0x32
 80010f6:	d107      	bne.n	8001108 <TASK3+0x34>
			MY_RTOS_Acquire_Mutex(&Mutex1, &MY_RTOS_Task3);
 80010f8:	490f      	ldr	r1, [pc, #60]	; (8001138 <TASK3+0x64>)
 80010fa:	4810      	ldr	r0, [pc, #64]	; (800113c <TASK3+0x68>)
 80010fc:	f7ff fc10 	bl	8000920 <MY_RTOS_Acquire_Mutex>
			MY_RTOS_Acquire_Mutex(&Mutex1, &MY_RTOS_Task3);
 8001100:	490d      	ldr	r1, [pc, #52]	; (8001138 <TASK3+0x64>)
 8001102:	480e      	ldr	r0, [pc, #56]	; (800113c <TASK3+0x68>)
 8001104:	f7ff fc0c 	bl	8000920 <MY_RTOS_Acquire_Mutex>
		}
		if(count == 1000){
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <TASK3+0x60>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001110:	d1e2      	bne.n	80010d8 <TASK3+0x4>
			MY_RTOS_Acquire_Mutex(&Mutex1, &MY_RTOS_Task3);
 8001112:	4909      	ldr	r1, [pc, #36]	; (8001138 <TASK3+0x64>)
 8001114:	4809      	ldr	r0, [pc, #36]	; (800113c <TASK3+0x68>)
 8001116:	f7ff fc03 	bl	8000920 <MY_RTOS_Acquire_Mutex>
			MY_RTOS_Release_Mutex(&Mutex1);
 800111a:	4808      	ldr	r0, [pc, #32]	; (800113c <TASK3+0x68>)
 800111c:	f7ff fc3d 	bl	800099a <MY_RTOS_Release_Mutex>
			MY_RTOS_Terminate_Task(&MY_RTOS_Task3);
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <TASK3+0x64>)
 8001122:	f7ff fbe0 	bl	80008e6 <MY_RTOS_Terminate_Task>
			count = 0;
 8001126:	4b03      	ldr	r3, [pc, #12]	; (8001134 <TASK3+0x60>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
		Task3Indic ^= 1;
 800112c:	e7d4      	b.n	80010d8 <TASK3+0x4>
 800112e:	bf00      	nop
 8001130:	20000735 	.word	0x20000735
 8001134:	20000458 	.word	0x20000458
 8001138:	2000077c 	.word	0x2000077c
 800113c:	200006e0 	.word	0x200006e0

08001140 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001142:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001144:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001148:	480c      	ldr	r0, [pc, #48]	; (800117c <LoopForever+0x6>)
  ldr r1, =_edata
 800114a:	490d      	ldr	r1, [pc, #52]	; (8001180 <LoopForever+0xa>)
  ldr r2, =_sidata
 800114c:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <LoopForever+0xe>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001150:	e002      	b.n	8001158 <LoopCopyDataInit>

08001152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001156:	3304      	adds	r3, #4

08001158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800115c:	d3f9      	bcc.n	8001152 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001160:	4c0a      	ldr	r4, [pc, #40]	; (800118c <LoopForever+0x16>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001164:	e001      	b.n	800116a <LoopFillZerobss>

08001166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001168:	3204      	adds	r2, #4

0800116a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800116c:	d3fb      	bcc.n	8001166 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800116e:	f000 f811 	bl	8001194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001172:	f7ff fecb 	bl	8000f0c <main>

08001176 <LoopForever>:

LoopForever:
    b LoopForever
 8001176:	e7fe      	b.n	8001176 <LoopForever>
  ldr   r0, =_estack
 8001178:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	20000434 	.word	0x20000434
  ldr r2, =_sidata
 8001184:	08001348 	.word	0x08001348
  ldr r2, =_sbss
 8001188:	20000434 	.word	0x20000434
  ldr r4, =_ebss
 800118c:	20000814 	.word	0x20000814

08001190 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC1_2_IRQHandler>
	...

08001194 <__libc_init_array>:
 8001194:	b570      	push	{r4, r5, r6, lr}
 8001196:	2500      	movs	r5, #0
 8001198:	4e0c      	ldr	r6, [pc, #48]	; (80011cc <__libc_init_array+0x38>)
 800119a:	4c0d      	ldr	r4, [pc, #52]	; (80011d0 <__libc_init_array+0x3c>)
 800119c:	1ba4      	subs	r4, r4, r6
 800119e:	10a4      	asrs	r4, r4, #2
 80011a0:	42a5      	cmp	r5, r4
 80011a2:	d109      	bne.n	80011b8 <__libc_init_array+0x24>
 80011a4:	f000 f896 	bl	80012d4 <_init>
 80011a8:	2500      	movs	r5, #0
 80011aa:	4e0a      	ldr	r6, [pc, #40]	; (80011d4 <__libc_init_array+0x40>)
 80011ac:	4c0a      	ldr	r4, [pc, #40]	; (80011d8 <__libc_init_array+0x44>)
 80011ae:	1ba4      	subs	r4, r4, r6
 80011b0:	10a4      	asrs	r4, r4, #2
 80011b2:	42a5      	cmp	r5, r4
 80011b4:	d105      	bne.n	80011c2 <__libc_init_array+0x2e>
 80011b6:	bd70      	pop	{r4, r5, r6, pc}
 80011b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011bc:	4798      	blx	r3
 80011be:	3501      	adds	r5, #1
 80011c0:	e7ee      	b.n	80011a0 <__libc_init_array+0xc>
 80011c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011c6:	4798      	blx	r3
 80011c8:	3501      	adds	r5, #1
 80011ca:	e7f2      	b.n	80011b2 <__libc_init_array+0x1e>
 80011cc:	0800133c 	.word	0x0800133c
 80011d0:	0800133c 	.word	0x0800133c
 80011d4:	0800133c 	.word	0x0800133c
 80011d8:	08001344 	.word	0x08001344

080011dc <register_fini>:
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <register_fini+0xc>)
 80011de:	b113      	cbz	r3, 80011e6 <register_fini+0xa>
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <register_fini+0x10>)
 80011e2:	f000 b805 	b.w	80011f0 <atexit>
 80011e6:	4770      	bx	lr
 80011e8:	00000000 	.word	0x00000000
 80011ec:	080011fd 	.word	0x080011fd

080011f0 <atexit>:
 80011f0:	2300      	movs	r3, #0
 80011f2:	4601      	mov	r1, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 b816 	b.w	8001228 <__register_exitproc>

080011fc <__libc_fini_array>:
 80011fc:	b538      	push	{r3, r4, r5, lr}
 80011fe:	4d07      	ldr	r5, [pc, #28]	; (800121c <__libc_fini_array+0x20>)
 8001200:	4c07      	ldr	r4, [pc, #28]	; (8001220 <__libc_fini_array+0x24>)
 8001202:	1b64      	subs	r4, r4, r5
 8001204:	10a4      	asrs	r4, r4, #2
 8001206:	b91c      	cbnz	r4, 8001210 <__libc_fini_array+0x14>
 8001208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800120c:	f000 b868 	b.w	80012e0 <_fini>
 8001210:	3c01      	subs	r4, #1
 8001212:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8001216:	4798      	blx	r3
 8001218:	e7f5      	b.n	8001206 <__libc_fini_array+0xa>
 800121a:	bf00      	nop
 800121c:	08001344 	.word	0x08001344
 8001220:	08001348 	.word	0x08001348

08001224 <__retarget_lock_acquire_recursive>:
 8001224:	4770      	bx	lr

08001226 <__retarget_lock_release_recursive>:
 8001226:	4770      	bx	lr

08001228 <__register_exitproc>:
 8001228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800122c:	4c26      	ldr	r4, [pc, #152]	; (80012c8 <__register_exitproc+0xa0>)
 800122e:	4606      	mov	r6, r0
 8001230:	6820      	ldr	r0, [r4, #0]
 8001232:	4698      	mov	r8, r3
 8001234:	460f      	mov	r7, r1
 8001236:	4691      	mov	r9, r2
 8001238:	f7ff fff4 	bl	8001224 <__retarget_lock_acquire_recursive>
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <__register_exitproc+0xa4>)
 800123e:	681d      	ldr	r5, [r3, #0]
 8001240:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8001244:	b918      	cbnz	r0, 800124e <__register_exitproc+0x26>
 8001246:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800124a:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800124e:	6843      	ldr	r3, [r0, #4]
 8001250:	2b1f      	cmp	r3, #31
 8001252:	dd19      	ble.n	8001288 <__register_exitproc+0x60>
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <__register_exitproc+0xa8>)
 8001256:	b933      	cbnz	r3, 8001266 <__register_exitproc+0x3e>
 8001258:	6820      	ldr	r0, [r4, #0]
 800125a:	f7ff ffe4 	bl	8001226 <__retarget_lock_release_recursive>
 800125e:	f04f 30ff 	mov.w	r0, #4294967295
 8001262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001266:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800126a:	f3af 8000 	nop.w
 800126e:	2800      	cmp	r0, #0
 8001270:	d0f2      	beq.n	8001258 <__register_exitproc+0x30>
 8001272:	2200      	movs	r2, #0
 8001274:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8001278:	6042      	str	r2, [r0, #4]
 800127a:	6003      	str	r3, [r0, #0]
 800127c:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8001280:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8001284:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8001288:	6843      	ldr	r3, [r0, #4]
 800128a:	b19e      	cbz	r6, 80012b4 <__register_exitproc+0x8c>
 800128c:	2201      	movs	r2, #1
 800128e:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8001292:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8001296:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800129a:	409a      	lsls	r2, r3
 800129c:	4311      	orrs	r1, r2
 800129e:	2e02      	cmp	r6, #2
 80012a0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 80012a4:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 80012a8:	bf02      	ittt	eq
 80012aa:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 80012ae:	430a      	orreq	r2, r1
 80012b0:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	3302      	adds	r3, #2
 80012b8:	6042      	str	r2, [r0, #4]
 80012ba:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 80012be:	6820      	ldr	r0, [r4, #0]
 80012c0:	f7ff ffb1 	bl	8001226 <__retarget_lock_release_recursive>
 80012c4:	2000      	movs	r0, #0
 80012c6:	e7cc      	b.n	8001262 <__register_exitproc+0x3a>
 80012c8:	20000430 	.word	0x20000430
 80012cc:	08001338 	.word	0x08001338
 80012d0:	00000000 	.word	0x00000000

080012d4 <_init>:
 80012d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012d6:	bf00      	nop
 80012d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012da:	bc08      	pop	{r3}
 80012dc:	469e      	mov	lr, r3
 80012de:	4770      	bx	lr

080012e0 <_fini>:
 80012e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012e2:	bf00      	nop
 80012e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012e6:	bc08      	pop	{r3}
 80012e8:	469e      	mov	lr, r3
 80012ea:	4770      	bx	lr
