
ARM.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001774  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080018a4  080018a4  000118a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018f4  080018f4  00020444  2**0
                  CONTENTS
  4 .ARM          00000000  080018f4  080018f4  00020444  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018f4  080018f4  00020444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080018f4  080018f4  000118f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018fc  080018fc  000118fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000444  20000000  08001900  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000444  08001d44  00020444  2**2
                  ALLOC
 10 ._user_heap_stack 00000204  20000824  08001d44  00020824  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006931  00000000  00000000  0002046d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010d9  00000000  00000000  00026d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000350  00000000  00000000  00027e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002c8  00000000  00000000  000281c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003093  00000000  00000000  00028490  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00001833  00000000  00000000  0002b523  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0002cd56  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000c90  00000000  00000000  0002cdd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00000a24  00000000  00000000  0002da64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000444 	.word	0x20000444
 800014c:	00000000 	.word	0x00000000
 8000150:	0800188c 	.word	0x0800188c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000448 	.word	0x20000448
 800016c:	0800188c 	.word	0x0800188c

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <NVIC_Enable>:
		                                    (x == GPIOD)? 3 :\
		                                    (x == GPIOE)? 4 : 0)
//-*-*-*-*-*-*-*-*-*-*-*-
//Generic Functions:
//-*-*-*-*-*-*-*-*-*-*-*
void NVIC_Enable(uint16 IRQ){
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 800018e:	88fb      	ldrh	r3, [r7, #6]
 8000190:	2b0f      	cmp	r3, #15
 8000192:	d854      	bhi.n	800023e <NVIC_Enable+0xba>
 8000194:	a201      	add	r2, pc, #4	; (adr r2, 800019c <NVIC_Enable+0x18>)
 8000196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800019a:	bf00      	nop
 800019c:	080001dd 	.word	0x080001dd
 80001a0:	080001eb 	.word	0x080001eb
 80001a4:	080001f9 	.word	0x080001f9
 80001a8:	08000207 	.word	0x08000207
 80001ac:	08000215 	.word	0x08000215
 80001b0:	08000223 	.word	0x08000223
 80001b4:	08000223 	.word	0x08000223
 80001b8:	08000223 	.word	0x08000223
 80001bc:	08000223 	.word	0x08000223
 80001c0:	08000223 	.word	0x08000223
 80001c4:	08000231 	.word	0x08000231
 80001c8:	08000231 	.word	0x08000231
 80001cc:	08000231 	.word	0x08000231
 80001d0:	08000231 	.word	0x08000231
 80001d4:	08000231 	.word	0x08000231
 80001d8:	08000231 	.word	0x08000231
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 80001dc:	4b1a      	ldr	r3, [pc, #104]	; (8000248 <NVIC_Enable+0xc4>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a19      	ldr	r2, [pc, #100]	; (8000248 <NVIC_Enable+0xc4>)
 80001e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001e6:	6013      	str	r3, [r2, #0]
		break;
 80001e8:	e029      	b.n	800023e <NVIC_Enable+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 80001ea:	4b17      	ldr	r3, [pc, #92]	; (8000248 <NVIC_Enable+0xc4>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a16      	ldr	r2, [pc, #88]	; (8000248 <NVIC_Enable+0xc4>)
 80001f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001f4:	6013      	str	r3, [r2, #0]
		break;
 80001f6:	e022      	b.n	800023e <NVIC_Enable+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 80001f8:	4b13      	ldr	r3, [pc, #76]	; (8000248 <NVIC_Enable+0xc4>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a12      	ldr	r2, [pc, #72]	; (8000248 <NVIC_Enable+0xc4>)
 80001fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000202:	6013      	str	r3, [r2, #0]
		break;
 8000204:	e01b      	b.n	800023e <NVIC_Enable+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 8000206:	4b10      	ldr	r3, [pc, #64]	; (8000248 <NVIC_Enable+0xc4>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a0f      	ldr	r2, [pc, #60]	; (8000248 <NVIC_Enable+0xc4>)
 800020c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000210:	6013      	str	r3, [r2, #0]
		break;
 8000212:	e014      	b.n	800023e <NVIC_Enable+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8000214:	4b0c      	ldr	r3, [pc, #48]	; (8000248 <NVIC_Enable+0xc4>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a0b      	ldr	r2, [pc, #44]	; (8000248 <NVIC_Enable+0xc4>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800021e:	6013      	str	r3, [r2, #0]
		break;
 8000220:	e00d      	b.n	800023e <NVIC_Enable+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI9_5_Enable;
 8000222:	4b09      	ldr	r3, [pc, #36]	; (8000248 <NVIC_Enable+0xc4>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a08      	ldr	r2, [pc, #32]	; (8000248 <NVIC_Enable+0xc4>)
 8000228:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800022c:	6013      	str	r3, [r2, #0]
		break;
 800022e:	e006      	b.n	800023e <NVIC_Enable+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI15_10_Enable;
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <NVIC_Enable+0xc8>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a05      	ldr	r2, [pc, #20]	; (800024c <NVIC_Enable+0xc8>)
 8000236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800023a:	6013      	str	r3, [r2, #0]
		break;
 800023c:	bf00      	nop
	}
}
 800023e:	bf00      	nop
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr
 8000248:	e000e100 	.word	0xe000e100
 800024c:	e000e104 	.word	0xe000e104

08000250 <NVIC_Disable>:
void NVIC_Disable(uint16 IRQ){
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 800025a:	88fb      	ldrh	r3, [r7, #6]
 800025c:	2b0f      	cmp	r3, #15
 800025e:	d854      	bhi.n	800030a <NVIC_Disable+0xba>
 8000260:	a201      	add	r2, pc, #4	; (adr r2, 8000268 <NVIC_Disable+0x18>)
 8000262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000266:	bf00      	nop
 8000268:	080002a9 	.word	0x080002a9
 800026c:	080002b7 	.word	0x080002b7
 8000270:	080002c5 	.word	0x080002c5
 8000274:	080002d3 	.word	0x080002d3
 8000278:	080002e1 	.word	0x080002e1
 800027c:	080002ef 	.word	0x080002ef
 8000280:	080002ef 	.word	0x080002ef
 8000284:	080002ef 	.word	0x080002ef
 8000288:	080002ef 	.word	0x080002ef
 800028c:	080002ef 	.word	0x080002ef
 8000290:	080002fd 	.word	0x080002fd
 8000294:	080002fd 	.word	0x080002fd
 8000298:	080002fd 	.word	0x080002fd
 800029c:	080002fd 	.word	0x080002fd
 80002a0:	080002fd 	.word	0x080002fd
 80002a4:	080002fd 	.word	0x080002fd
		case 0:
			NVIC_IRQ6_EXTI0_Disable;
 80002a8:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <NVIC_Disable+0xc4>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a19      	ldr	r2, [pc, #100]	; (8000314 <NVIC_Disable+0xc4>)
 80002ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002b2:	6013      	str	r3, [r2, #0]
			break;
 80002b4:	e029      	b.n	800030a <NVIC_Disable+0xba>
		case 1:
			NVIC_IRQ7_EXTI1_Disable;
 80002b6:	4b17      	ldr	r3, [pc, #92]	; (8000314 <NVIC_Disable+0xc4>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a16      	ldr	r2, [pc, #88]	; (8000314 <NVIC_Disable+0xc4>)
 80002bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c0:	6013      	str	r3, [r2, #0]
			break;
 80002c2:	e022      	b.n	800030a <NVIC_Disable+0xba>
		case 2:
			NVIC_IRQ8_EXTI2_Disable;
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <NVIC_Disable+0xc4>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a12      	ldr	r2, [pc, #72]	; (8000314 <NVIC_Disable+0xc4>)
 80002ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ce:	6013      	str	r3, [r2, #0]
			break;
 80002d0:	e01b      	b.n	800030a <NVIC_Disable+0xba>
		case 3:
			NVIC_IRQ9_EXTI3_Disable;
 80002d2:	4b10      	ldr	r3, [pc, #64]	; (8000314 <NVIC_Disable+0xc4>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a0f      	ldr	r2, [pc, #60]	; (8000314 <NVIC_Disable+0xc4>)
 80002d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002dc:	6013      	str	r3, [r2, #0]
			break;
 80002de:	e014      	b.n	800030a <NVIC_Disable+0xba>
		case 4:
			NVIC_IRQ10_EXTI4_Disable;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <NVIC_Disable+0xc4>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a0b      	ldr	r2, [pc, #44]	; (8000314 <NVIC_Disable+0xc4>)
 80002e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ea:	6013      	str	r3, [r2, #0]
			break;
 80002ec:	e00d      	b.n	800030a <NVIC_Disable+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			NVIC_IRQ23_EXTI9_5_Disable;
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <NVIC_Disable+0xc4>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a08      	ldr	r2, [pc, #32]	; (8000314 <NVIC_Disable+0xc4>)
 80002f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002f8:	6013      	str	r3, [r2, #0]
			break;
 80002fa:	e006      	b.n	800030a <NVIC_Disable+0xba>
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			NVIC_IRQ40_EXTI15_10_Disable;
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <NVIC_Disable+0xc8>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a05      	ldr	r2, [pc, #20]	; (8000318 <NVIC_Disable+0xc8>)
 8000302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000306:	6013      	str	r3, [r2, #0]
			break;
 8000308:	bf00      	nop
		}
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	e000e180 	.word	0xe000e180
 8000318:	e000e184 	.word	0xe000e184

0800031c <MCAL_EXTI_Init>:
* @brief            - Initialize EXTI for GPIOx PINy According to the specified parameters in the EXTI_Config
* @param [in]       - EXTI_Config: pointer to EXTI_PinConfig_t structure that contains the config parameters
* @retval           - None
* Note              - (LQFP48 --> Port A & B Fully included -- Port C & D Partially included)
*/
void MCAL_EXTI_Init(EXTI_PinConfig_t* EXTI_Config){
 800031c:	b5b0      	push	{r4, r5, r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	AFIO_CLK_EN();//AFIO Clock Enable
 8000324:	4b55      	ldr	r3, [pc, #340]	; (800047c <MCAL_EXTI_Init+0x160>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a54      	ldr	r2, [pc, #336]	; (800047c <MCAL_EXTI_Init+0x160>)
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	6193      	str	r3, [r2, #24]
	//Init Pin to be GPIO Input AFIO
	GPIO_PinConfig_t GPIO_Config = {EXTI_Config->EXTI_PIN.GPIO_PIN,GPIO_MODE_INPUT_AF,};
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	891b      	ldrh	r3, [r3, #8]
 8000338:	81bb      	strh	r3, [r7, #12]
 800033a:	2301      	movs	r3, #1
 800033c:	73bb      	strb	r3, [r7, #14]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIOPort,&GPIO_Config);
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	685b      	ldr	r3, [r3, #4]
 8000342:	f107 020c 	add.w	r2, r7, #12
 8000346:	4611      	mov	r1, r2
 8000348:	4618      	mov	r0, r3
 800034a:	f000 fa03 	bl	8000754 <MCAL_GPIO_Init>
	//Select the Pin connect to AFIO
	register uint8 AFIO_EXTICR_Index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber >>2;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	089b      	lsrs	r3, r3, #2
 8000354:	b29b      	uxth	r3, r3
 8000356:	b2dc      	uxtb	r4, r3
	register uint8 AFIO_EXTICR_Position = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4)<<2;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	b2db      	uxtb	r3, r3
 8000360:	f003 030c 	and.w	r3, r3, #12
 8000364:	b2dd      	uxtb	r5, r3
	//clear four bit:
	(AFIO->EXTICR[AFIO_EXTICR_Index])&=~((0xF)<<AFIO_EXTICR_Position);
 8000366:	4a46      	ldr	r2, [pc, #280]	; (8000480 <MCAL_EXTI_Init+0x164>)
 8000368:	4623      	mov	r3, r4
 800036a:	3302      	adds	r3, #2
 800036c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000370:	4629      	mov	r1, r5
 8000372:	220f      	movs	r2, #15
 8000374:	408a      	lsls	r2, r1
 8000376:	43d2      	mvns	r2, r2
 8000378:	4941      	ldr	r1, [pc, #260]	; (8000480 <MCAL_EXTI_Init+0x164>)
 800037a:	4620      	mov	r0, r4
 800037c:	401a      	ands	r2, r3
 800037e:	1c83      	adds	r3, r0, #2
 8000380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//(AFIO->EXTICR[AFIO_EXTICR_Index])|=(( AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIOPort) & 0xF)<<AFIO_EXTICR_Position);
	//OR:
	(AFIO->EXTICR[AFIO_EXTICR_Index])|=(((((vuint32)((vuint8*)EXTI_Config->EXTI_PIN.GPIOPort - (vuint8*)GPIOA))>>10)&0xF)<<AFIO_EXTICR_Position);
 8000384:	4a3e      	ldr	r2, [pc, #248]	; (8000480 <MCAL_EXTI_Init+0x164>)
 8000386:	4623      	mov	r3, r4
 8000388:	3302      	adds	r3, #2
 800038a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8000396:	f5a3 3384 	sub.w	r3, r3, #67584	; 0x10800
 800039a:	0a9b      	lsrs	r3, r3, #10
 800039c:	f003 030f 	and.w	r3, r3, #15
 80003a0:	4629      	mov	r1, r5
 80003a2:	408b      	lsls	r3, r1
 80003a4:	4936      	ldr	r1, [pc, #216]	; (8000480 <MCAL_EXTI_Init+0x164>)
 80003a6:	4620      	mov	r0, r4
 80003a8:	431a      	orrs	r2, r3
 80003aa:	1c83      	adds	r3, r0, #2
 80003ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Trigger Selection
	EXTI->FTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80003b0:	4b34      	ldr	r3, [pc, #208]	; (8000484 <MCAL_EXTI_Init+0x168>)
 80003b2:	68db      	ldr	r3, [r3, #12]
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	8812      	ldrh	r2, [r2, #0]
 80003b8:	4611      	mov	r1, r2
 80003ba:	2201      	movs	r2, #1
 80003bc:	408a      	lsls	r2, r1
 80003be:	43d2      	mvns	r2, r2
 80003c0:	4611      	mov	r1, r2
 80003c2:	4a30      	ldr	r2, [pc, #192]	; (8000484 <MCAL_EXTI_Init+0x168>)
 80003c4:	400b      	ands	r3, r1
 80003c6:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80003c8:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <MCAL_EXTI_Init+0x168>)
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	8812      	ldrh	r2, [r2, #0]
 80003d0:	4611      	mov	r1, r2
 80003d2:	2201      	movs	r2, #1
 80003d4:	408a      	lsls	r2, r1
 80003d6:	43d2      	mvns	r2, r2
 80003d8:	4611      	mov	r1, r2
 80003da:	4a2a      	ldr	r2, [pc, #168]	; (8000484 <MCAL_EXTI_Init+0x168>)
 80003dc:	400b      	ands	r3, r1
 80003de:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= ((EXTI_Config->EXTI_Trigger_Case & 0b01)<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80003e0:	4b28      	ldr	r3, [pc, #160]	; (8000484 <MCAL_EXTI_Init+0x168>)
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	687a      	ldr	r2, [r7, #4]
 80003e6:	7b12      	ldrb	r2, [r2, #12]
 80003e8:	f002 0201 	and.w	r2, r2, #1
 80003ec:	6879      	ldr	r1, [r7, #4]
 80003ee:	8809      	ldrh	r1, [r1, #0]
 80003f0:	408a      	lsls	r2, r1
 80003f2:	4611      	mov	r1, r2
 80003f4:	4a23      	ldr	r2, [pc, #140]	; (8000484 <MCAL_EXTI_Init+0x168>)
 80003f6:	430b      	orrs	r3, r1
 80003f8:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |= (((EXTI_Config->EXTI_Trigger_Case & 0b010)>>1)<<(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber));
 80003fa:	4b22      	ldr	r3, [pc, #136]	; (8000484 <MCAL_EXTI_Init+0x168>)
 80003fc:	68db      	ldr	r3, [r3, #12]
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	7b12      	ldrb	r2, [r2, #12]
 8000402:	1052      	asrs	r2, r2, #1
 8000404:	f002 0201 	and.w	r2, r2, #1
 8000408:	6879      	ldr	r1, [r7, #4]
 800040a:	8809      	ldrh	r1, [r1, #0]
 800040c:	408a      	lsls	r2, r1
 800040e:	4611      	mov	r1, r2
 8000410:	4a1c      	ldr	r2, [pc, #112]	; (8000484 <MCAL_EXTI_Init+0x168>)
 8000412:	430b      	orrs	r3, r1
 8000414:	60d3      	str	r3, [r2, #12]
	//update IRQ handling CallBack function
	GP_IRQ_EXTI_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	881b      	ldrh	r3, [r3, #0]
 800041a:	4619      	mov	r1, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	691b      	ldr	r3, [r3, #16]
 8000420:	4a19      	ldr	r2, [pc, #100]	; (8000488 <MCAL_EXTI_Init+0x16c>)
 8000422:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//Enable/Disable IRQ EXTI & NVIC
	if(EXTI_Config->EXTI_IRQ == EXTI_IRQ_Enable){
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	7b5b      	ldrb	r3, [r3, #13]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d110      	bne.n	8000450 <MCAL_EXTI_Init+0x134>
		//EXTI Enable
		EXTI->IMR|=(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <MCAL_EXTI_Init+0x168>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	687a      	ldr	r2, [r7, #4]
 8000434:	8812      	ldrh	r2, [r2, #0]
 8000436:	4611      	mov	r1, r2
 8000438:	2201      	movs	r2, #1
 800043a:	408a      	lsls	r2, r1
 800043c:	4611      	mov	r1, r2
 800043e:	4a11      	ldr	r2, [pc, #68]	; (8000484 <MCAL_EXTI_Init+0x168>)
 8000440:	430b      	orrs	r3, r1
 8000442:	6013      	str	r3, [r2, #0]
		//NVIC Enable
		NVIC_Enable(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff fe9b 	bl	8000184 <NVIC_Enable>
		//EXTI Disable
		EXTI->IMR&=~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		//NVIC Disable
		NVIC_Disable(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}
}
 800044e:	e010      	b.n	8000472 <MCAL_EXTI_Init+0x156>
		EXTI->IMR&=~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <MCAL_EXTI_Init+0x168>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	8812      	ldrh	r2, [r2, #0]
 8000458:	4611      	mov	r1, r2
 800045a:	2201      	movs	r2, #1
 800045c:	408a      	lsls	r2, r1
 800045e:	43d2      	mvns	r2, r2
 8000460:	4611      	mov	r1, r2
 8000462:	4a08      	ldr	r2, [pc, #32]	; (8000484 <MCAL_EXTI_Init+0x168>)
 8000464:	400b      	ands	r3, r1
 8000466:	6013      	str	r3, [r2, #0]
		NVIC_Disable(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff feef 	bl	8000250 <NVIC_Disable>
}
 8000472:	bf00      	nop
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bdb0      	pop	{r4, r5, r7, pc}
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000
 8000480:	40010000 	.word	0x40010000
 8000484:	40010400 	.word	0x40010400
 8000488:	2000046c 	.word	0x2000046c

0800048c <EXTI0_IRQHandler>:
 * ==================================================================================================
 *                                           ISR FUNCTIONS
 * ==================================================================================================
 */

void EXTI0_IRQHandler(void){
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	EXTI->PR|=(1<<0);
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <EXTI0_IRQHandler+0x1c>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <EXTI0_IRQHandler+0x1c>)
 8000496:	f043 0301 	orr.w	r3, r3, #1
 800049a:	6153      	str	r3, [r2, #20]
	//call the IRQ_Call_Function
	GP_IRQ_EXTI_CallBack[0]();
 800049c:	4b03      	ldr	r3, [pc, #12]	; (80004ac <EXTI0_IRQHandler+0x20>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4798      	blx	r3
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40010400 	.word	0x40010400
 80004ac:	2000046c 	.word	0x2000046c

080004b0 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	EXTI->PR|=(1<<1);
 80004b4:	4b05      	ldr	r3, [pc, #20]	; (80004cc <EXTI1_IRQHandler+0x1c>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	4a04      	ldr	r2, [pc, #16]	; (80004cc <EXTI1_IRQHandler+0x1c>)
 80004ba:	f043 0302 	orr.w	r3, r3, #2
 80004be:	6153      	str	r3, [r2, #20]
	//call the IRQ_Call_Function
	GP_IRQ_EXTI_CallBack[1]();
 80004c0:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <EXTI1_IRQHandler+0x20>)
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	4798      	blx	r3
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40010400 	.word	0x40010400
 80004d0:	2000046c 	.word	0x2000046c

080004d4 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	EXTI->PR|=(1<<2);
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <EXTI2_IRQHandler+0x1c>)
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <EXTI2_IRQHandler+0x1c>)
 80004de:	f043 0304 	orr.w	r3, r3, #4
 80004e2:	6153      	str	r3, [r2, #20]
	//call the IRQ_Call_Function
	GP_IRQ_EXTI_CallBack[2]();
 80004e4:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <EXTI2_IRQHandler+0x20>)
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	4798      	blx	r3
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40010400 	.word	0x40010400
 80004f4:	2000046c 	.word	0x2000046c

080004f8 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	EXTI->PR|=(1<<3);
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <EXTI3_IRQHandler+0x1c>)
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	4a04      	ldr	r2, [pc, #16]	; (8000514 <EXTI3_IRQHandler+0x1c>)
 8000502:	f043 0308 	orr.w	r3, r3, #8
 8000506:	6153      	str	r3, [r2, #20]
	//call the IRQ_Call_Function
	GP_IRQ_EXTI_CallBack[3]();
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <EXTI3_IRQHandler+0x20>)
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	4798      	blx	r3
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40010400 	.word	0x40010400
 8000518:	2000046c 	.word	0x2000046c

0800051c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	EXTI->PR|=(1<<4);
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <EXTI4_IRQHandler+0x1c>)
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <EXTI4_IRQHandler+0x1c>)
 8000526:	f043 0310 	orr.w	r3, r3, #16
 800052a:	6153      	str	r3, [r2, #20]
	//call the IRQ_Call_Function
	GP_IRQ_EXTI_CallBack[4]();
 800052c:	4b03      	ldr	r3, [pc, #12]	; (800053c <EXTI4_IRQHandler+0x20>)
 800052e:	691b      	ldr	r3, [r3, #16]
 8000530:	4798      	blx	r3
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40010400 	.word	0x40010400
 800053c:	2000046c 	.word	0x2000046c

08000540 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	if(EXTI->PR &(1<<5)){EXTI->PR|=(1<<5);GP_IRQ_EXTI_CallBack[5]();}
 8000544:	4b26      	ldr	r3, [pc, #152]	; (80005e0 <EXTI9_5_IRQHandler+0xa0>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	f003 0320 	and.w	r3, r3, #32
 800054c:	2b00      	cmp	r3, #0
 800054e:	d008      	beq.n	8000562 <EXTI9_5_IRQHandler+0x22>
 8000550:	4b23      	ldr	r3, [pc, #140]	; (80005e0 <EXTI9_5_IRQHandler+0xa0>)
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	4a22      	ldr	r2, [pc, #136]	; (80005e0 <EXTI9_5_IRQHandler+0xa0>)
 8000556:	f043 0320 	orr.w	r3, r3, #32
 800055a:	6153      	str	r3, [r2, #20]
 800055c:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <EXTI9_5_IRQHandler+0xa4>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	4798      	blx	r3
	if(EXTI->PR &(1<<6)){EXTI->PR|=(1<<6);GP_IRQ_EXTI_CallBack[6]();}
 8000562:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <EXTI9_5_IRQHandler+0xa0>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800056a:	2b00      	cmp	r3, #0
 800056c:	d008      	beq.n	8000580 <EXTI9_5_IRQHandler+0x40>
 800056e:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <EXTI9_5_IRQHandler+0xa0>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a1b      	ldr	r2, [pc, #108]	; (80005e0 <EXTI9_5_IRQHandler+0xa0>)
 8000574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <EXTI9_5_IRQHandler+0xa4>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	4798      	blx	r3
	if(EXTI->PR &(1<<7)){EXTI->PR|=(1<<7);GP_IRQ_EXTI_CallBack[7]();}
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <EXTI9_5_IRQHandler+0xa0>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000588:	2b00      	cmp	r3, #0
 800058a:	d008      	beq.n	800059e <EXTI9_5_IRQHandler+0x5e>
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <EXTI9_5_IRQHandler+0xa0>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	4a13      	ldr	r2, [pc, #76]	; (80005e0 <EXTI9_5_IRQHandler+0xa0>)
 8000592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000596:	6153      	str	r3, [r2, #20]
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <EXTI9_5_IRQHandler+0xa4>)
 800059a:	69db      	ldr	r3, [r3, #28]
 800059c:	4798      	blx	r3
	if(EXTI->PR &(1<<8)){EXTI->PR|=(1<<8);GP_IRQ_EXTI_CallBack[8]();}
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <EXTI9_5_IRQHandler+0xa0>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d008      	beq.n	80005bc <EXTI9_5_IRQHandler+0x7c>
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <EXTI9_5_IRQHandler+0xa0>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <EXTI9_5_IRQHandler+0xa0>)
 80005b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <EXTI9_5_IRQHandler+0xa4>)
 80005b8:	6a1b      	ldr	r3, [r3, #32]
 80005ba:	4798      	blx	r3
	if(EXTI->PR &(1<<9)){EXTI->PR|=(1<<9);GP_IRQ_EXTI_CallBack[9]();}
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <EXTI9_5_IRQHandler+0xa0>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d008      	beq.n	80005da <EXTI9_5_IRQHandler+0x9a>
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <EXTI9_5_IRQHandler+0xa0>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <EXTI9_5_IRQHandler+0xa0>)
 80005ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005d2:	6153      	str	r3, [r2, #20]
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <EXTI9_5_IRQHandler+0xa4>)
 80005d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d8:	4798      	blx	r3
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40010400 	.word	0x40010400
 80005e4:	2000046c 	.word	0x2000046c

080005e8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	if(EXTI->PR &(1<<10)){EXTI->PR|=(1<<10);GP_IRQ_EXTI_CallBack[10]();}
 80005ec:	4b2d      	ldr	r3, [pc, #180]	; (80006a4 <EXTI15_10_IRQHandler+0xbc>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d008      	beq.n	800060a <EXTI15_10_IRQHandler+0x22>
 80005f8:	4b2a      	ldr	r3, [pc, #168]	; (80006a4 <EXTI15_10_IRQHandler+0xbc>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	4a29      	ldr	r2, [pc, #164]	; (80006a4 <EXTI15_10_IRQHandler+0xbc>)
 80005fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000602:	6153      	str	r3, [r2, #20]
 8000604:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <EXTI15_10_IRQHandler+0xc0>)
 8000606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000608:	4798      	blx	r3
	if(EXTI->PR &(1<<11)){EXTI->PR|=(1<<11);GP_IRQ_EXTI_CallBack[11]();}
 800060a:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <EXTI15_10_IRQHandler+0xbc>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000612:	2b00      	cmp	r3, #0
 8000614:	d008      	beq.n	8000628 <EXTI15_10_IRQHandler+0x40>
 8000616:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <EXTI15_10_IRQHandler+0xbc>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a22      	ldr	r2, [pc, #136]	; (80006a4 <EXTI15_10_IRQHandler+0xbc>)
 800061c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <EXTI15_10_IRQHandler+0xc0>)
 8000624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000626:	4798      	blx	r3
	if(EXTI->PR &(1<<12)){EXTI->PR|=(1<<12);GP_IRQ_EXTI_CallBack[12]();}
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <EXTI15_10_IRQHandler+0xbc>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000630:	2b00      	cmp	r3, #0
 8000632:	d008      	beq.n	8000646 <EXTI15_10_IRQHandler+0x5e>
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <EXTI15_10_IRQHandler+0xbc>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	4a1a      	ldr	r2, [pc, #104]	; (80006a4 <EXTI15_10_IRQHandler+0xbc>)
 800063a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800063e:	6153      	str	r3, [r2, #20]
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <EXTI15_10_IRQHandler+0xc0>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	4798      	blx	r3
	if(EXTI->PR &(1<<13)){EXTI->PR|=(1<<13);GP_IRQ_EXTI_CallBack[13]();}
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <EXTI15_10_IRQHandler+0xbc>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800064e:	2b00      	cmp	r3, #0
 8000650:	d008      	beq.n	8000664 <EXTI15_10_IRQHandler+0x7c>
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <EXTI15_10_IRQHandler+0xbc>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <EXTI15_10_IRQHandler+0xbc>)
 8000658:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <EXTI15_10_IRQHandler+0xc0>)
 8000660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000662:	4798      	blx	r3
	if(EXTI->PR &(1<<14)){EXTI->PR|=(1<<14);GP_IRQ_EXTI_CallBack[14]();}
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <EXTI15_10_IRQHandler+0xbc>)
 8000666:	695b      	ldr	r3, [r3, #20]
 8000668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066c:	2b00      	cmp	r3, #0
 800066e:	d008      	beq.n	8000682 <EXTI15_10_IRQHandler+0x9a>
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <EXTI15_10_IRQHandler+0xbc>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <EXTI15_10_IRQHandler+0xbc>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <EXTI15_10_IRQHandler+0xc0>)
 800067e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000680:	4798      	blx	r3
	if(EXTI->PR &(1<<15)){EXTI->PR|=(1<<15);GP_IRQ_EXTI_CallBack[15]();}
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <EXTI15_10_IRQHandler+0xbc>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800068a:	2b00      	cmp	r3, #0
 800068c:	d008      	beq.n	80006a0 <EXTI15_10_IRQHandler+0xb8>
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <EXTI15_10_IRQHandler+0xbc>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <EXTI15_10_IRQHandler+0xbc>)
 8000694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000698:	6153      	str	r3, [r2, #20]
 800069a:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <EXTI15_10_IRQHandler+0xc0>)
 800069c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800069e:	4798      	blx	r3
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40010400 	.word	0x40010400
 80006a8:	2000046c 	.word	0x2000046c

080006ac <Get_CRLH_Position>:
#include "GPIO_Stm32F103x8.h"

//-*-*-*-*-*-*-*-*-*-*-*-
//Generic Functions:
//-*-*-*-*-*-*-*-*-*-*-*
uint8 Get_CRLH_Position(uint16 PinNumber){
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	2b80      	cmp	r3, #128	; 0x80
 80006ba:	d042      	beq.n	8000742 <Get_CRLH_Position+0x96>
 80006bc:	2b80      	cmp	r3, #128	; 0x80
 80006be:	dc11      	bgt.n	80006e4 <Get_CRLH_Position+0x38>
 80006c0:	2b08      	cmp	r3, #8
 80006c2:	d036      	beq.n	8000732 <Get_CRLH_Position+0x86>
 80006c4:	2b08      	cmp	r3, #8
 80006c6:	dc06      	bgt.n	80006d6 <Get_CRLH_Position+0x2a>
 80006c8:	2b02      	cmp	r3, #2
 80006ca:	d02e      	beq.n	800072a <Get_CRLH_Position+0x7e>
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	d02e      	beq.n	800072e <Get_CRLH_Position+0x82>
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d028      	beq.n	8000726 <Get_CRLH_Position+0x7a>
 80006d4:	e037      	b.n	8000746 <Get_CRLH_Position+0x9a>
 80006d6:	2b20      	cmp	r3, #32
 80006d8:	d02f      	beq.n	800073a <Get_CRLH_Position+0x8e>
 80006da:	2b40      	cmp	r3, #64	; 0x40
 80006dc:	d02f      	beq.n	800073e <Get_CRLH_Position+0x92>
 80006de:	2b10      	cmp	r3, #16
 80006e0:	d029      	beq.n	8000736 <Get_CRLH_Position+0x8a>
 80006e2:	e030      	b.n	8000746 <Get_CRLH_Position+0x9a>
 80006e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006e8:	d023      	beq.n	8000732 <Get_CRLH_Position+0x86>
 80006ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006ee:	dc09      	bgt.n	8000704 <Get_CRLH_Position+0x58>
 80006f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006f4:	d019      	beq.n	800072a <Get_CRLH_Position+0x7e>
 80006f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006fa:	d018      	beq.n	800072e <Get_CRLH_Position+0x82>
 80006fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000700:	d011      	beq.n	8000726 <Get_CRLH_Position+0x7a>
 8000702:	e020      	b.n	8000746 <Get_CRLH_Position+0x9a>
 8000704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000708:	d017      	beq.n	800073a <Get_CRLH_Position+0x8e>
 800070a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800070e:	dc03      	bgt.n	8000718 <Get_CRLH_Position+0x6c>
 8000710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000714:	d00f      	beq.n	8000736 <Get_CRLH_Position+0x8a>
 8000716:	e016      	b.n	8000746 <Get_CRLH_Position+0x9a>
 8000718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800071c:	d00f      	beq.n	800073e <Get_CRLH_Position+0x92>
 800071e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000722:	d00e      	beq.n	8000742 <Get_CRLH_Position+0x96>
 8000724:	e00f      	b.n	8000746 <Get_CRLH_Position+0x9a>
	case GPIO_PIN_0:
	case GPIO_PIN_8:
		return 0;
 8000726:	2300      	movs	r3, #0
 8000728:	e00e      	b.n	8000748 <Get_CRLH_Position+0x9c>
		break;
	case GPIO_PIN_1:
	case GPIO_PIN_9:
		return 4;
 800072a:	2304      	movs	r3, #4
 800072c:	e00c      	b.n	8000748 <Get_CRLH_Position+0x9c>
		break;
	case GPIO_PIN_2:
	case GPIO_PIN_10:
		return 8;
 800072e:	2308      	movs	r3, #8
 8000730:	e00a      	b.n	8000748 <Get_CRLH_Position+0x9c>
		break;
	case GPIO_PIN_3:
	case GPIO_PIN_11:
		return 12;
 8000732:	230c      	movs	r3, #12
 8000734:	e008      	b.n	8000748 <Get_CRLH_Position+0x9c>
		break;
	case GPIO_PIN_4:
	case GPIO_PIN_12:
		return 16;
 8000736:	2310      	movs	r3, #16
 8000738:	e006      	b.n	8000748 <Get_CRLH_Position+0x9c>
		break;
	case GPIO_PIN_5:
	case GPIO_PIN_13:
		return 20;
 800073a:	2314      	movs	r3, #20
 800073c:	e004      	b.n	8000748 <Get_CRLH_Position+0x9c>
		break;
	case GPIO_PIN_6:
	case GPIO_PIN_14:
		return 24;
 800073e:	2318      	movs	r3, #24
 8000740:	e002      	b.n	8000748 <Get_CRLH_Position+0x9c>
		break;
	case GPIO_PIN_7:
	case GPIO_PIN_15:
		return 28;
 8000742:	231c      	movs	r3, #28
 8000744:	e000      	b.n	8000748 <Get_CRLH_Position+0x9c>
		break;
	default:
		return 0;
 8000746:	2300      	movs	r3, #0
		break;
	}
}
 8000748:	4618      	mov	r0, r3
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
	...

08000754 <MCAL_GPIO_Init>:
* @param [in]       - GPIOx: where x can be from A to E to select the GPIO Peripheral
* @param [in]       - PinConfig: pointer to GPIO_PinConfig_t structure that contains the config parameters
* @retval           - None
* Note              - (LQFP48 --> Port A & B Fully included -- Port C & D Partially included)
*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx,GPIO_PinConfig_t *PinConfig){
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
	if(GPIOx == GPIOA){GPIOA_CLK_EN();}
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a51      	ldr	r2, [pc, #324]	; (80008a8 <MCAL_GPIO_Init+0x154>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d106      	bne.n	8000774 <MCAL_GPIO_Init+0x20>
 8000766:	4b51      	ldr	r3, [pc, #324]	; (80008ac <MCAL_GPIO_Init+0x158>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	4a50      	ldr	r2, [pc, #320]	; (80008ac <MCAL_GPIO_Init+0x158>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6193      	str	r3, [r2, #24]
 8000772:	e02a      	b.n	80007ca <MCAL_GPIO_Init+0x76>
	else if(GPIOx == GPIOB){GPIOB_CLK_EN();}
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a4e      	ldr	r2, [pc, #312]	; (80008b0 <MCAL_GPIO_Init+0x15c>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d106      	bne.n	800078a <MCAL_GPIO_Init+0x36>
 800077c:	4b4b      	ldr	r3, [pc, #300]	; (80008ac <MCAL_GPIO_Init+0x158>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a4a      	ldr	r2, [pc, #296]	; (80008ac <MCAL_GPIO_Init+0x158>)
 8000782:	f043 0308 	orr.w	r3, r3, #8
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	e01f      	b.n	80007ca <MCAL_GPIO_Init+0x76>
	else if(GPIOx == GPIOC){GPIOC_CLK_EN();}
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a49      	ldr	r2, [pc, #292]	; (80008b4 <MCAL_GPIO_Init+0x160>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d106      	bne.n	80007a0 <MCAL_GPIO_Init+0x4c>
 8000792:	4b46      	ldr	r3, [pc, #280]	; (80008ac <MCAL_GPIO_Init+0x158>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	4a45      	ldr	r2, [pc, #276]	; (80008ac <MCAL_GPIO_Init+0x158>)
 8000798:	f043 0310 	orr.w	r3, r3, #16
 800079c:	6193      	str	r3, [r2, #24]
 800079e:	e014      	b.n	80007ca <MCAL_GPIO_Init+0x76>
	else if(GPIOx == GPIOD){GPIOD_CLK_EN();}
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a45      	ldr	r2, [pc, #276]	; (80008b8 <MCAL_GPIO_Init+0x164>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d106      	bne.n	80007b6 <MCAL_GPIO_Init+0x62>
 80007a8:	4b40      	ldr	r3, [pc, #256]	; (80008ac <MCAL_GPIO_Init+0x158>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a3f      	ldr	r2, [pc, #252]	; (80008ac <MCAL_GPIO_Init+0x158>)
 80007ae:	f043 0320 	orr.w	r3, r3, #32
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	e009      	b.n	80007ca <MCAL_GPIO_Init+0x76>
	else if(GPIOx == GPIOE){GPIOE_CLK_EN();}
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a40      	ldr	r2, [pc, #256]	; (80008bc <MCAL_GPIO_Init+0x168>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d105      	bne.n	80007ca <MCAL_GPIO_Init+0x76>
 80007be:	4b3b      	ldr	r3, [pc, #236]	; (80008ac <MCAL_GPIO_Init+0x158>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a3a      	ldr	r2, [pc, #232]	; (80008ac <MCAL_GPIO_Init+0x158>)
 80007c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c8:	6193      	str	r3, [r2, #24]
	//Port configuration register low (GPIOx_CRL) (x=A..E) Pin 0 >>> 7
	//Port configuration register low (GPIOx_CRH) (x=A..E) Pin 8 >>> 15
	vuint32 *ConfigReg = NULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
	uint8 PIN_Config;
	uint8 CRLH_Shift = Get_CRLH_Position(PinConfig->GPIO_PinNumber);
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff6a 	bl	80006ac <Get_CRLH_Position>
 80007d8:	4603      	mov	r3, r0
 80007da:	73fb      	strb	r3, [r7, #15]
	ConfigReg = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL: &GPIOx->CRH;
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	2bff      	cmp	r3, #255	; 0xff
 80007e2:	d801      	bhi.n	80007e8 <MCAL_GPIO_Init+0x94>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	e001      	b.n	80007ec <MCAL_GPIO_Init+0x98>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3304      	adds	r3, #4
 80007ec:	613b      	str	r3, [r7, #16]
	//clear CNFy[1:0] MODEy[1:0]
	(*ConfigReg)&=~(0xF<<CRLH_Shift);
 80007ee:	693b      	ldr	r3, [r7, #16]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	7bfa      	ldrb	r2, [r7, #15]
 80007f4:	210f      	movs	r1, #15
 80007f6:	fa01 f202 	lsl.w	r2, r1, r2
 80007fa:	43d2      	mvns	r2, r2
 80007fc:	401a      	ands	r2, r3
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	601a      	str	r2, [r3, #0]
	//PIN is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)){
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	789b      	ldrb	r3, [r3, #2]
 8000806:	2b04      	cmp	r3, #4
 8000808:	d00b      	beq.n	8000822 <MCAL_GPIO_Init+0xce>
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	789b      	ldrb	r3, [r3, #2]
 800080e:	2b05      	cmp	r3, #5
 8000810:	d007      	beq.n	8000822 <MCAL_GPIO_Init+0xce>
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	789b      	ldrb	r3, [r3, #2]
 8000816:	2b06      	cmp	r3, #6
 8000818:	d003      	beq.n	8000822 <MCAL_GPIO_Init+0xce>
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	789b      	ldrb	r3, [r3, #2]
 800081e:	2b07      	cmp	r3, #7
 8000820:	d10e      	bne.n	8000840 <MCAL_GPIO_Init+0xec>
		PIN_Config = ((((PinConfig->GPIO_MODE -4)<< 2)|(PinConfig->GPIO_Output_Speed)) & 0x0F);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	789b      	ldrb	r3, [r3, #2]
 8000826:	3b04      	subs	r3, #4
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	b25a      	sxtb	r2, r3
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	78db      	ldrb	r3, [r3, #3]
 8000830:	b25b      	sxtb	r3, r3
 8000832:	4313      	orrs	r3, r2
 8000834:	b25b      	sxtb	r3, r3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	f003 030f 	and.w	r3, r3, #15
 800083c:	75fb      	strb	r3, [r7, #23]
 800083e:	e025      	b.n	800088c <MCAL_GPIO_Init+0x138>
	}
	//PIN is input MODEy[1:0] = 00: Input mode (reset state)
	else{
		if((PinConfig->GPIO_MODE == GPIO_MODE_Analog)||(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO)){
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	789b      	ldrb	r3, [r3, #2]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d003      	beq.n	8000850 <MCAL_GPIO_Init+0xfc>
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	789b      	ldrb	r3, [r3, #2]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d107      	bne.n	8000860 <MCAL_GPIO_Init+0x10c>
			PIN_Config = (((PinConfig->GPIO_MODE)<< 2) & 0x0C);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	789b      	ldrb	r3, [r3, #2]
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	b2db      	uxtb	r3, r3
 8000858:	f003 030c 	and.w	r3, r3, #12
 800085c:	75fb      	strb	r3, [r7, #23]
 800085e:	e015      	b.n	800088c <MCAL_GPIO_Init+0x138>
		}
		else{//Pull up or down Input mode Is Selected
			PIN_Config = (((GPIO_MODE_INPUT_PU)<< 2) & 0x0C);
 8000860:	2308      	movs	r3, #8
 8000862:	75fb      	strb	r3, [r7, #23]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU){//Pull up Input mode Is Selected
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	789b      	ldrb	r3, [r3, #2]
 8000868:	2b02      	cmp	r3, #2
 800086a:	d107      	bne.n	800087c <MCAL_GPIO_Init+0x128>
			//Table 20. Port bit configuration table PINy ODRx register = 1
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	8812      	ldrh	r2, [r2, #0]
 8000874:	431a      	orrs	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	e007      	b.n	800088c <MCAL_GPIO_Init+0x138>
			}
			else{//Pull down Input mode Is Selected
			//Table 20. Port bit configuration table PINy ODRx register = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	8812      	ldrh	r2, [r2, #0]
 8000884:	43d2      	mvns	r2, r2
 8000886:	401a      	ands	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*ConfigReg)|= PIN_Config<<CRLH_Shift;
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	7df9      	ldrb	r1, [r7, #23]
 8000892:	7bfa      	ldrb	r2, [r7, #15]
 8000894:	fa01 f202 	lsl.w	r2, r1, r2
 8000898:	431a      	orrs	r2, r3
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	601a      	str	r2, [r3, #0]

}
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40010800 	.word	0x40010800
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010c00 	.word	0x40010c00
 80008b4:	40011000 	.word	0x40011000
 80008b8:	40011400 	.word	0x40011400
 80008bc:	40011800 	.word	0x40011800

080008c0 <SPI1_IRQHandler>:

void MCAL_SPI_Wait_TC(SPI_TypeDef* SPIx){
	while(!(SPIx->SR & (1<<1)));
}

void SPI1_IRQHandler(void){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	GP_IRQ_SPI_CallBack[0]();
 80008c4:	4b02      	ldr	r3, [pc, #8]	; (80008d0 <SPI1_IRQHandler+0x10>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4798      	blx	r3
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200004ac 	.word	0x200004ac

080008d4 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	GP_IRQ_SPI_CallBack[1]();
 80008d8:	4b02      	ldr	r3, [pc, #8]	; (80008e4 <SPI2_IRQHandler+0x10>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	4798      	blx	r3
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200004ac 	.word	0x200004ac

080008e8 <USART1_IRQHandler>:
*/
void MCAL_UART_Wait_TC(USART_TypeDef* USARTx){
	while(!(USARTx->SR & (1<<6)));
}

void USART1_IRQHandler(void){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	GP_IRQ_UART_CallBack[0]();
 80008ec:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <USART1_IRQHandler+0x10>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4798      	blx	r3
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200004b4 	.word	0x200004b4

080008fc <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	GP_IRQ_UART_CallBack[1]();
 8000900:	4b02      	ldr	r3, [pc, #8]	; (800090c <USART2_IRQHandler+0x10>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	4798      	blx	r3
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200004b4 	.word	0x200004b4

08000910 <USART3_IRQHandler>:
void USART3_IRQHandler(void){
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	GP_IRQ_UART_CallBack[2]();
 8000914:	4b02      	ldr	r3, [pc, #8]	; (8000920 <USART3_IRQHandler+0x10>)
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	4798      	blx	r3
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200004b4 	.word	0x200004b4

08000924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	2b00      	cmp	r3, #0
 8000936:	db0a      	blt.n	800094e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	490c      	ldr	r1, [pc, #48]	; (8000970 <__NVIC_SetPriority+0x4c>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	0152      	lsls	r2, r2, #5
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800094c:	e00a      	b.n	8000964 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4908      	ldr	r1, [pc, #32]	; (8000974 <__NVIC_SetPriority+0x50>)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	3b04      	subs	r3, #4
 800095c:	0152      	lsls	r2, r2, #5
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	440b      	add	r3, r1
 8000962:	761a      	strb	r2, [r3, #24]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000e100 	.word	0xe000e100
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3b01      	subs	r3, #1
 8000984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000988:	d301      	bcc.n	800098e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098a:	2301      	movs	r3, #1
 800098c:	e00f      	b.n	80009ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <SysTick_Config+0x40>)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000996:	2107      	movs	r1, #7
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	f7ff ffc2 	bl	8000924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <SysTick_Config+0x40>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a6:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <SysTick_Config+0x40>)
 80009a8:	2207      	movs	r2, #7
 80009aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	e000e010 	.word	0xe000e010

080009bc <HardFault_Handler>:

uint32 x = 0;
void DecideNext(void);
void MY_RTOS_Update_TaskingTime(void);

  void HardFault_Handler(void){
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	  while(1);
 80009c0:	e7fe      	b.n	80009c0 <HardFault_Handler+0x4>

080009c2 <MemManage_Handler>:
  }
  void	MemManage_Handler(void){
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
	  while(1);
 80009c6:	e7fe      	b.n	80009c6 <MemManage_Handler+0x4>

080009c8 <BusFault_Handler>:
  }
  void	BusFault_Handler(void){
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
	  while(1);
 80009cc:	e7fe      	b.n	80009cc <BusFault_Handler+0x4>

080009ce <UsageFault_Handler>:
  }
  void	UsageFault_Handler(void){
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
	  while(1);
 80009d2:	e7fe      	b.n	80009d2 <UsageFault_Handler+0x4>

080009d4 <SVC_Handler>:
  }

  __attribute ((naked)) void SVC_Handler(){
  	__asm("TST LR, #4 \n\t"
 80009d4:	f01e 0f04 	tst.w	lr, #4
 80009d8:	bf0c      	ite	eq
 80009da:	f3ef 8008 	mrseq	r0, MSP
 80009de:	f3ef 8009 	mrsne	r0, PSP
 80009e2:	f000 bbf9 	b.w	80011d8 <OS_SVC>
  			"ITE EQ \n\t"
  			"MRSEQ R0,MSP \n\t"
  			"MRSNE R0,PSP \n\t"
  			"B OS_SVC \n\t");
  }
 80009e6:	bf00      	nop

080009e8 <HW_init>:

  void HW_init(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	  //8MHZ
	  //0.125 us
	  // 1ms -> 8000 Ticks

	  //Decrease PenSV priority = SysTick timer
	  __NVIC_SetPriority(PendSV_IRQn, 15);
 80009ec:	210f      	movs	r1, #15
 80009ee:	f06f 0001 	mvn.w	r0, #1
 80009f2:	f7ff ff97 	bl	8000924 <__NVIC_SetPriority>
	 // __NVIC_SetPriority(EXTI0_IRQn,22);

  }
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <Trigger_OS_PendSV>:

  void Trigger_OS_PendSV(){
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
	  SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <Trigger_OS_PendSV+0x18>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	4a03      	ldr	r2, [pc, #12]	; (8000a14 <Trigger_OS_PendSV+0x18>)
 8000a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	6053      	str	r3, [r2, #4]
  }
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <StartTicker>:

  void StartTicker(){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	  //SysTick Config
	  SysTick_Config(8000);
 8000a1c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000a20:	f7ff ffaa 	bl	8000978 <SysTick_Config>
  }
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <SysTick_Handler>:

  vuint8 SysTickIndic;
  void SysTick_Handler(){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0

	  //Decide Next
	  SysTickIndic ^= 1;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <SysTick_Handler+0x24>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	f083 0301 	eor.w	r3, r3, #1
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SysTick_Handler+0x24>)
 8000a3a:	701a      	strb	r2, [r3, #0]
	  MY_RTOS_Update_TaskingTime();
 8000a3c:	f000 fc86 	bl	800134c <MY_RTOS_Update_TaskingTime>
	  DecideNext();
 8000a40:	f000 fb78 	bl	8001134 <DecideNext>
	  Trigger_OS_PendSV();
 8000a44:	f7ff ffda 	bl	80009fc <Trigger_OS_PendSV>
  }
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200004c0 	.word	0x200004c0

08000a50 <FIFO_Enqueue>:

#include "MY_RTOS_FIFO.h"


//APIs
FIFO_Status FIFO_Enqueue(FIFO_Buf_t* FBuf, Element_Type Item){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
	// check FIFO is valid
	if(!FBuf->base || !FBuf->head || !FBuf->tail)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d007      	beq.n	8000a72 <FIFO_Enqueue+0x22>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d003      	beq.n	8000a72 <FIFO_Enqueue+0x22>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <FIFO_Enqueue+0x26>
		return FIFO_Null;
 8000a72:	2303      	movs	r3, #3
 8000a74:	e029      	b.n	8000aca <FIFO_Enqueue+0x7a>
	// check FIFO not Full
	if(FIFO_Is_Full(FBuf) == FIFO_Full)
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f000 f88d 	bl	8000b96 <FIFO_Is_Full>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d101      	bne.n	8000a86 <FIFO_Enqueue+0x36>
		return FIFO_Full;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e021      	b.n	8000aca <FIFO_Enqueue+0x7a>
	// Enqueue item to FIFO
	*(FBuf->head) = Item;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	601a      	str	r2, [r3, #0]
	FBuf->count++;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	885b      	ldrh	r3, [r3, #2]
 8000a92:	3301      	adds	r3, #1
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	805a      	strh	r2, [r3, #2]
	if((uint32)FBuf->head == ((uint32)FBuf->base +(4*FBuf->length) -4))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	440b      	add	r3, r1
 8000aae:	3b04      	subs	r3, #4
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d104      	bne.n	8000abe <FIFO_Enqueue+0x6e>
		FBuf->head = FBuf->base;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	e004      	b.n	8000ac8 <FIFO_Enqueue+0x78>
	else
		FBuf->head++;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	1d1a      	adds	r2, r3, #4
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	60da      	str	r2, [r3, #12]

	return FIFO_No_Error;
 8000ac8:	2300      	movs	r3, #0


}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <FIFO_Dequeue>:
FIFO_Status FIFO_Dequeue(FIFO_Buf_t* FBuf, Element_Type* Item){
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	6039      	str	r1, [r7, #0]
	// check FIFO is valid
	if(!FBuf->base || !FBuf->head || !FBuf->tail)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d007      	beq.n	8000af4 <FIFO_Dequeue+0x22>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d003      	beq.n	8000af4 <FIFO_Dequeue+0x22>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d101      	bne.n	8000af8 <FIFO_Dequeue+0x26>
		return FIFO_Null;
 8000af4:	2303      	movs	r3, #3
 8000af6:	e028      	b.n	8000b4a <FIFO_Dequeue+0x78>
	// check FIFO not Empty
	if(FBuf->count == (uint16)0)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	885b      	ldrh	r3, [r3, #2]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d101      	bne.n	8000b04 <FIFO_Dequeue+0x32>
		return FIFO_Empty;
 8000b00:	2302      	movs	r3, #2
 8000b02:	e022      	b.n	8000b4a <FIFO_Dequeue+0x78>
	// Dequeue item to FIFO
	*Item = *(FBuf->tail);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	601a      	str	r2, [r3, #0]
	FBuf->count--;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	885b      	ldrh	r3, [r3, #2]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	805a      	strh	r2, [r3, #2]
	if((uint32)FBuf->tail == ((uint32)FBuf->base +(4*FBuf->length) - 4))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	4619      	mov	r1, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d104      	bne.n	8000b3e <FIFO_Dequeue+0x6c>
		FBuf->tail = FBuf->base;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	e004      	b.n	8000b48 <FIFO_Dequeue+0x76>
	else
		FBuf->tail++;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	1d1a      	adds	r2, r3, #4
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	609a      	str	r2, [r3, #8]

	return FIFO_No_Error;
 8000b48:	2300      	movs	r3, #0

}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <FIFO_Init>:
FIFO_Status FIFO_Init(FIFO_Buf_t* FBuf, Element_Type* Buf ,uint16 Length){
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	80fb      	strh	r3, [r7, #6]
	// check FIFO is valid
		if(Buf == NULL )
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <FIFO_Init+0x18>
			return FIFO_Null;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	e00f      	b.n	8000b8c <FIFO_Init+0x38>
		// Initialize FIFO
		FBuf->base = Buf;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	605a      	str	r2, [r3, #4]
		FBuf->head = Buf;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	60da      	str	r2, [r3, #12]
		FBuf->tail = Buf;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	609a      	str	r2, [r3, #8]
		FBuf->length = Length;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	88fa      	ldrh	r2, [r7, #6]
 8000b82:	801a      	strh	r2, [r3, #0]
		FBuf->count = (uint16) 0 ;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2200      	movs	r2, #0
 8000b88:	805a      	strh	r2, [r3, #2]
		return FIFO_No_Error;
 8000b8a:	2300      	movs	r3, #0

}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr

08000b96 <FIFO_Is_Full>:
FIFO_Status FIFO_Is_Full(FIFO_Buf_t* FBuf){
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
	// check FIFO is valid
	if(!FBuf->base || !FBuf->head)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d003      	beq.n	8000bae <FIFO_Is_Full+0x18>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <FIFO_Is_Full+0x1c>
		return FIFO_Null;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	e008      	b.n	8000bc4 <FIFO_Is_Full+0x2e>
	// check FIFO not Full
	if(FBuf->count == FBuf->length)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	885a      	ldrh	r2, [r3, #2]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d101      	bne.n	8000bc2 <FIFO_Is_Full+0x2c>
		return FIFO_Full;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e000      	b.n	8000bc4 <FIFO_Is_Full+0x2e>

	return FIFO_No_Error;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
	...

08000bd0 <MY_RTOS_Create_MainStack>:
FIFO_Buf_t Ready_Queue;
Task_Ref* Ready_Queue_FIFO[TasksMaxNumber];
Task_Ref MY_RTOS_IDLE_Task;


void MY_RTOS_Create_MainStack(void){
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
	OS_Control._S_MSP_Task = (uint32)(&_estack);
 8000bd4:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <MY_RTOS_Create_MainStack+0x34>)
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MY_RTOS_Create_MainStack+0x38>)
 8000bd8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP_Task = (OS_Control._S_MSP_Task - MainStack_Size);
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <MY_RTOS_Create_MainStack+0x38>)
 8000bde:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000be2:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8000be6:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <MY_RTOS_Create_MainStack+0x38>)
 8000be8:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP_Task - 8);
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MY_RTOS_Create_MainStack+0x38>)
 8000bee:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000bf2:	3b08      	subs	r3, #8
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <MY_RTOS_Create_MainStack+0x38>)
 8000bf6:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20005000 	.word	0x20005000
 8000c08:	200004d8 	.word	0x200004d8

08000c0c <MY_RTOS_Create_TaskStack>:

void MY_RTOS_Create_TaskStack(Task_Ref* Tref){
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	 * Automatic:
	 * R0,R1,R2,R3,R12,LR,PC,xPSR */

	// Virtual Memory Stack Reservation

	Tref->Current_PSP = (uint32*)(Tref->_S_PSP_Task) ;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	691b      	ldr	r3, [r3, #16]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	619a      	str	r2, [r3, #24]
	Tref->Current_PSP-- ;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	1f1a      	subs	r2, r3, #4
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0x01000000;         //DUMMY_XPSR should T =1 to avoid BUS fault;//0x01000000
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c30:	601a      	str	r2, [r3, #0]
	Tref->Current_PSP-- ;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	1f1a      	subs	r2, r3, #4
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = (unsigned int)Tref->p_TaskEntry ; //PC
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	601a      	str	r2, [r3, #0]
	Tref->Current_PSP-- ; //LR = 0xFFFFFFFD (EXC_RETURN)Return to thread with PSP
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	1f1a      	subs	r2, r3, #4
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP)  = 0xFFFFFFFD ;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f06f 0202 	mvn.w	r2, #2
 8000c58:	601a      	str	r2, [r3, #0]

	for (int  j=0 ; j< 13 ; j++ )
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	e00b      	b.n	8000c78 <MY_RTOS_Create_TaskStack+0x6c>
	{
		Tref->Current_PSP-- ;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	1f1a      	subs	r2, r3, #4
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	619a      	str	r2, [r3, #24]
		*(Tref->Current_PSP)  = 0 ;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
	for (int  j=0 ; j< 13 ; j++ )
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3301      	adds	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2b0c      	cmp	r3, #12
 8000c7c:	ddf0      	ble.n	8000c60 <MY_RTOS_Create_TaskStack+0x54>
	}

}
 8000c7e:	bf00      	nop
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <MY_RTOS_init>:


MY_RTOS_ERROR_ID MY_RTOS_init(void){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0

	MY_RTOS_ERROR_ID error = NO_ERROR;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	71fb      	strb	r3, [r7, #7]

	//Update OS Mode (OS suspend)
	OS_Control.OS_Mode_ID = OS_Suspend;
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <MY_RTOS_init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Specify OS_MSP
	MY_RTOS_Create_MainStack();
 8000c9a:	f7ff ff99 	bl	8000bd0 <MY_RTOS_Create_MainStack>
	//Create OS Ready Queue
	if(FIFO_Init(&Ready_Queue, Ready_Queue_FIFO, TasksMaxNumber)!= FIFO_No_Error){
 8000c9e:	220a      	movs	r2, #10
 8000ca0:	4913      	ldr	r1, [pc, #76]	; (8000cf0 <MY_RTOS_init+0x68>)
 8000ca2:	4814      	ldr	r0, [pc, #80]	; (8000cf4 <MY_RTOS_init+0x6c>)
 8000ca4:	f7ff ff56 	bl	8000b54 <FIFO_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <MY_RTOS_init+0x2c>
		error += Queue_FIFO_init_ERROR;
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	71fb      	strb	r3, [r7, #7]
	}

	//Configure IDLE Task
	strcpy(MY_RTOS_IDLE_Task.TaskName, "IDLE_Task");
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MY_RTOS_init+0x70>)
 8000cb6:	4a11      	ldr	r2, [pc, #68]	; (8000cfc <MY_RTOS_init+0x74>)
 8000cb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cba:	c303      	stmia	r3!, {r0, r1}
 8000cbc:	801a      	strh	r2, [r3, #0]
	MY_RTOS_IDLE_Task.Priority = 255;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MY_RTOS_init+0x78>)
 8000cc0:	22ff      	movs	r2, #255	; 0xff
 8000cc2:	711a      	strb	r2, [r3, #4]
	MY_RTOS_IDLE_Task.p_TaskEntry = MY_RTOS_IDLE_TASK;
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MY_RTOS_init+0x78>)
 8000cc6:	4a0f      	ldr	r2, [pc, #60]	; (8000d04 <MY_RTOS_init+0x7c>)
 8000cc8:	609a      	str	r2, [r3, #8]
	MY_RTOS_IDLE_Task.Stack_Size = 200;
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <MY_RTOS_init+0x78>)
 8000ccc:	22c8      	movs	r2, #200	; 0xc8
 8000cce:	601a      	str	r2, [r3, #0]
	error += MY_RTOS_Create_Task(&MY_RTOS_IDLE_Task);
 8000cd0:	480b      	ldr	r0, [pc, #44]	; (8000d00 <MY_RTOS_init+0x78>)
 8000cd2:	f000 f845 	bl	8000d60 <MY_RTOS_Create_Task>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	461a      	mov	r2, r3
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	4413      	add	r3, r2
 8000cde:	71fb      	strb	r3, [r7, #7]

	return error;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200004d8 	.word	0x200004d8
 8000cf0:	200006c8 	.word	0x200006c8
 8000cf4:	200004c4 	.word	0x200004c4
 8000cf8:	200006a0 	.word	0x200006a0
 8000cfc:	080018a4 	.word	0x080018a4
 8000d00:	20000684 	.word	0x20000684
 8000d04:	08000e21 	.word	0x08000e21

08000d08 <MY_RTOS_StartOS>:

void MY_RTOS_StartOS(){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	OS_Control.OS_Mode_ID = OS_Running;
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <MY_RTOS_StartOS+0x50>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Default Task
	OS_Control.CurrentTask = &MY_RTOS_IDLE_Task;
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MY_RTOS_StartOS+0x50>)
 8000d16:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <MY_RTOS_StartOS+0x54>)
 8000d18:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	MY_RTOS_Activate_Task(&MY_RTOS_IDLE_Task);
 8000d1c:	480f      	ldr	r0, [pc, #60]	; (8000d5c <MY_RTOS_StartOS+0x54>)
 8000d1e:	f000 f861 	bl	8000de4 <MY_RTOS_Activate_Task>
	//Start Ticker
	StartTicker();
 8000d22:	f7ff fe79 	bl	8000a18 <StartTicker>
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MY_RTOS_StartOS+0x50>)
 8000d28:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f380 8809 	msr	PSP, r0
	OS_SWITCH_SP_to_PSP;
 8000d34:	f3ef 8014 	mrs	r0, CONTROL
 8000d38:	f040 0002 	orr.w	r0, r0, #2
 8000d3c:	f380 8814 	msr	CONTROL, r0
	OS_SWITCH_CPU_access_level_to_unprivileged;
 8000d40:	f3ef 8014 	mrs	r0, CONTROL
 8000d44:	f040 0001 	orr.w	r0, r0, #1
 8000d48:	f380 8814 	msr	CONTROL, r0
	MY_RTOS_IDLE_Task.p_TaskEntry();
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <MY_RTOS_StartOS+0x54>)
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	4798      	blx	r3

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200004d8 	.word	0x200004d8
 8000d5c:	20000684 	.word	0x20000684

08000d60 <MY_RTOS_Create_Task>:

MY_RTOS_ERROR_ID MY_RTOS_Create_Task(Task_Ref* Tref){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	MY_RTOS_ERROR_ID Error = NO_ERROR;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]

	//check stack size exceed PSP
	Tref->_S_PSP_Task = OS_Control.PSP_Task_Locator;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MY_RTOS_Create_Task+0x7c>)
 8000d6e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	611a      	str	r2, [r3, #16]
	Tref->_E_PSP_Task = (Tref->_S_PSP_Task - Tref->Stack_Size);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	691a      	ldr	r2, [r3, #16]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	1ad2      	subs	r2, r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	615a      	str	r2, [r3, #20]
	if(Tref->_E_PSP_Task < (uint32)(&(_eheap))){
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <MY_RTOS_Create_Task+0x80>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d201      	bcs.n	8000d92 <MY_RTOS_Create_Task+0x32>
		return Task_Exceeded_StackSize_ERROR;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	e01f      	b.n	8000dd2 <MY_RTOS_Create_Task+0x72>
	}
	OS_Control.PSP_Task_Locator = (Tref->_E_PSP_Task  - 8);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	3b08      	subs	r3, #8
 8000d98:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <MY_RTOS_Create_Task+0x7c>)
 8000d9a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	MY_RTOS_Create_TaskStack(Tref);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ff34 	bl	8000c0c <MY_RTOS_Create_TaskStack>

	OS_Control.OSTasks[OS_Control.No_Active_Tasks] = Tref;
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <MY_RTOS_Create_Task+0x7c>)
 8000da6:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000daa:	490c      	ldr	r1, [pc, #48]	; (8000ddc <MY_RTOS_Create_Task+0x7c>)
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.No_Active_Tasks++;
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <MY_RTOS_Create_Task+0x7c>)
 8000db4:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000db8:	3301      	adds	r3, #1
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <MY_RTOS_Create_Task+0x7c>)
 8000dbc:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
	Tref->TimingWaiting.Blocking = Disable_Waiting;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Tref->TaskState = Suspend;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	return Error;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200004d8 	.word	0x200004d8
 8000de0:	20000a28 	.word	0x20000a28

08000de4 <MY_RTOS_Activate_Task>:

void MY_RTOS_Activate_Task(Task_Ref* Tref){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	Tref->TaskState = Waiting;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2202      	movs	r2, #2
 8000df0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	OS_SVC_Set(SVC_ActivateTask);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f000 fae7 	bl	80013c8 <OS_SVC_Set>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <MY_RTOS_Terminate_Task>:
void MY_RTOS_Terminate_Task(Task_Ref* Tref){
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
	Tref->TaskState = Suspend;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	OS_SVC_Set(SVC_TerminateTask);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 fad8 	bl	80013c8 <OS_SVC_Set>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <MY_RTOS_IDLE_TASK>:
	OS_SVC_Set(SVC_TerminateTask);
}

uint8 IdleTaskIndic;

void MY_RTOS_IDLE_TASK(void){
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
	while(1){
		__asm("WFE");
 8000e24:	bf20      	wfe
		IdleTaskIndic ^= 1;
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <MY_RTOS_IDLE_TASK+0x18>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	f083 0301 	eor.w	r3, r3, #1
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	4b01      	ldr	r3, [pc, #4]	; (8000e38 <MY_RTOS_IDLE_TASK+0x18>)
 8000e32:	701a      	strb	r2, [r3, #0]
		__asm("WFE");
 8000e34:	e7f6      	b.n	8000e24 <MY_RTOS_IDLE_TASK+0x4>
 8000e36:	bf00      	nop
 8000e38:	200004d4 	.word	0x200004d4

08000e3c <MY_RTOS_Acquire_Mutex>:

}

#ifdef MutexUsed

MY_RTOS_ERROR_ID MY_RTOS_Acquire_Mutex(Mutex_Ref* Mref ,Task_Ref* Tref){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]

	if(Mref->Current_User == NULL)/*Free*/{
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10f      	bne.n	8000e6e <MY_RTOS_Acquire_Mutex+0x32>
		OS_SVC_Set(SVC_Switch_Priviledge);
 8000e4e:	2003      	movs	r0, #3
 8000e50:	f000 faba 	bl	80013c8 <OS_SVC_Set>
		OS_Enter_Critical_Section;
 8000e54:	b672      	cpsid	i
		Mref->Current_User = Tref;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	609a      	str	r2, [r3, #8]
		OS_Exit_Critical_Section;
 8000e5c:	b662      	cpsie	i
		OS_SWITCH_CPU_access_level_to_unprivileged;
 8000e5e:	f3ef 8014 	mrs	r0, CONTROL
 8000e62:	f040 0001 	orr.w	r0, r0, #1
 8000e66:	f380 8814 	msr	CONTROL, r0
		return NO_ERROR;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e035      	b.n	8000eda <MY_RTOS_Acquire_Mutex+0x9e>
	}
	else{
		if(Mref->Current_User == Tref){
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d101      	bne.n	8000e7c <MY_RTOS_Acquire_Mutex+0x40>
			return NO_ERROR;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e02e      	b.n	8000eda <MY_RTOS_Acquire_Mutex+0x9e>
		}
		uint8 i = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	73fb      	strb	r3, [r7, #15]
		for(i = 0; i < MutexMaxWaiting; i++){
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e025      	b.n	8000ed2 <MY_RTOS_Acquire_Mutex+0x96>
			if(Mref->Next_Users[i] == NULL)/*Reserve*/{
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	330a      	adds	r3, #10
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d11a      	bne.n	8000ecc <MY_RTOS_Acquire_Mutex+0x90>
				OS_SVC_Set(SVC_Switch_Priviledge);
 8000e96:	2003      	movs	r0, #3
 8000e98:	f000 fa96 	bl	80013c8 <OS_SVC_Set>
				OS_Enter_Critical_Section;
 8000e9c:	b672      	cpsid	i
				Mref->Next_Users[i] = Tref;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	330a      	adds	r3, #10
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
				Tref->TaskState = Suspend;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				OS_Exit_Critical_Section;
 8000eb4:	b662      	cpsie	i
				OS_SWITCH_CPU_access_level_to_unprivileged;
 8000eb6:	f3ef 8014 	mrs	r0, CONTROL
 8000eba:	f040 0001 	orr.w	r0, r0, #1
 8000ebe:	f380 8814 	msr	CONTROL, r0
				OS_SVC_Set(SVC_TerminateTask);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f000 fa80 	bl	80013c8 <OS_SVC_Set>
				return NO_ERROR;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	e006      	b.n	8000eda <MY_RTOS_Acquire_Mutex+0x9e>
		for(i = 0; i < MutexMaxWaiting; i++){
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	73fb      	strb	r3, [r7, #15]
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	2b09      	cmp	r3, #9
 8000ed6:	d9d6      	bls.n	8000e86 <MY_RTOS_Acquire_Mutex+0x4a>
			}
		}
		return Mutex_Max_Waiting;
 8000ed8:	2303      	movs	r3, #3
	}

}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <MY_RTOS_Release_Mutex>:
void MY_RTOS_Release_Mutex(Mutex_Ref* Mref){
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	if(Mref->Current_User != NULL)/*Taken*/{
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d039      	beq.n	8000f66 <MY_RTOS_Release_Mutex+0x84>
		OS_SVC_Set(SVC_Switch_Priviledge);
 8000ef2:	2003      	movs	r0, #3
 8000ef4:	f000 fa68 	bl	80013c8 <OS_SVC_Set>
		OS_Enter_Critical_Section;
 8000ef8:	b672      	cpsid	i
		Mref->Current_User = Mref->Next_Users[0];
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	609a      	str	r2, [r3, #8]
		uint8 i = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	73fb      	strb	r3, [r7, #15]
		for(i = 0; i < MutexMaxWaiting-1; i++){
 8000f06:	2300      	movs	r3, #0
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	e018      	b.n	8000f3e <MY_RTOS_Release_Mutex+0x5c>
			if(Mref->Next_Users[i] != NULL)/*Reserve*/{
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	330a      	adds	r3, #10
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d014      	beq.n	8000f46 <MY_RTOS_Release_Mutex+0x64>
				Mref->Next_Users[i] = Mref->Next_Users[i+1];
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	7bf8      	ldrb	r0, [r7, #15]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	330a      	adds	r3, #10
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	f100 030a 	add.w	r3, r0, #10
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	440b      	add	r3, r1
 8000f36:	605a      	str	r2, [r3, #4]
		for(i = 0; i < MutexMaxWaiting-1; i++){
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d9e3      	bls.n	8000f0c <MY_RTOS_Release_Mutex+0x2a>
 8000f44:	e000      	b.n	8000f48 <MY_RTOS_Release_Mutex+0x66>
			}
			else{
				break;
 8000f46:	bf00      	nop
			}
		}
		Mref->Current_User->TaskState = Waiting;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		OS_Exit_Critical_Section;
 8000f52:	b662      	cpsie	i
		OS_SWITCH_CPU_access_level_to_unprivileged;
 8000f54:	f3ef 8014 	mrs	r0, CONTROL
 8000f58:	f040 0001 	orr.w	r0, r0, #1
 8000f5c:	f380 8814 	msr	CONTROL, r0
		OS_SVC_Set(SVC_ActivateTask);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f000 fa31 	bl	80013c8 <OS_SVC_Set>
	}
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <PendSV_Handler>:

/*----- Handler Section ---- */

__attribute ((naked)) void PendSV_Handler(){
	//Save Current Task Context
	OS_GET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000f70:	4b6f      	ldr	r3, [pc, #444]	; (8001130 <PendSV_Handler+0x1c0>)
 8000f72:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f76:	f3ef 8009 	mrs	r0, PSP
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	619a      	str	r2, [r3, #24]
	OS_Control.CurrentTask->Current_PSP--;
 8000f7e:	4b6c      	ldr	r3, [pc, #432]	; (8001130 <PendSV_Handler+0x1c0>)
 8000f80:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f84:	699a      	ldr	r2, [r3, #24]
 8000f86:	3a04      	subs	r2, #4
 8000f88:	619a      	str	r2, [r3, #24]
	OS_SaveContext(R4 , OS_Control.CurrentTask->Current_PSP);
 8000f8a:	4b69      	ldr	r3, [pc, #420]	; (8001130 <PendSV_Handler+0x1c0>)
 8000f8c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4622      	mov	r2, r4
 8000f94:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000f96:	4b66      	ldr	r3, [pc, #408]	; (8001130 <PendSV_Handler+0x1c0>)
 8000f98:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f9c:	699a      	ldr	r2, [r3, #24]
 8000f9e:	3a04      	subs	r2, #4
 8000fa0:	619a      	str	r2, [r3, #24]
	OS_SaveContext(R5 , OS_Control.CurrentTask->Current_PSP);
 8000fa2:	4b63      	ldr	r3, [pc, #396]	; (8001130 <PendSV_Handler+0x1c0>)
 8000fa4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	462a      	mov	r2, r5
 8000fac:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000fae:	4b60      	ldr	r3, [pc, #384]	; (8001130 <PendSV_Handler+0x1c0>)
 8000fb0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000fb4:	699a      	ldr	r2, [r3, #24]
 8000fb6:	3a04      	subs	r2, #4
 8000fb8:	619a      	str	r2, [r3, #24]
	OS_SaveContext(R6 , OS_Control.CurrentTask->Current_PSP);
 8000fba:	4b5d      	ldr	r3, [pc, #372]	; (8001130 <PendSV_Handler+0x1c0>)
 8000fbc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	4632      	mov	r2, r6
 8000fc4:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000fc6:	4b5a      	ldr	r3, [pc, #360]	; (8001130 <PendSV_Handler+0x1c0>)
 8000fc8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000fcc:	699a      	ldr	r2, [r3, #24]
 8000fce:	3a04      	subs	r2, #4
 8000fd0:	619a      	str	r2, [r3, #24]
	OS_SaveContext(R7 , OS_Control.CurrentTask->Current_PSP);
 8000fd2:	4b57      	ldr	r3, [pc, #348]	; (8001130 <PendSV_Handler+0x1c0>)
 8000fd4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	463a      	mov	r2, r7
 8000fdc:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000fde:	4b54      	ldr	r3, [pc, #336]	; (8001130 <PendSV_Handler+0x1c0>)
 8000fe0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000fe4:	699a      	ldr	r2, [r3, #24]
 8000fe6:	3a04      	subs	r2, #4
 8000fe8:	619a      	str	r2, [r3, #24]
	OS_SaveContext(R8 , OS_Control.CurrentTask->Current_PSP);
 8000fea:	4b51      	ldr	r3, [pc, #324]	; (8001130 <PendSV_Handler+0x1c0>)
 8000fec:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	4642      	mov	r2, r8
 8000ff4:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000ff6:	4b4e      	ldr	r3, [pc, #312]	; (8001130 <PendSV_Handler+0x1c0>)
 8000ff8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ffc:	699a      	ldr	r2, [r3, #24]
 8000ffe:	3a04      	subs	r2, #4
 8001000:	619a      	str	r2, [r3, #24]
	OS_SaveContext(R9 , OS_Control.CurrentTask->Current_PSP);
 8001002:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <PendSV_Handler+0x1c0>)
 8001004:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	464a      	mov	r2, r9
 800100c:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800100e:	4b48      	ldr	r3, [pc, #288]	; (8001130 <PendSV_Handler+0x1c0>)
 8001010:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001014:	699a      	ldr	r2, [r3, #24]
 8001016:	3a04      	subs	r2, #4
 8001018:	619a      	str	r2, [r3, #24]
	OS_SaveContext(R10 , OS_Control.CurrentTask->Current_PSP);
 800101a:	4b45      	ldr	r3, [pc, #276]	; (8001130 <PendSV_Handler+0x1c0>)
 800101c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	4652      	mov	r2, sl
 8001024:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8001026:	4b42      	ldr	r3, [pc, #264]	; (8001130 <PendSV_Handler+0x1c0>)
 8001028:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800102c:	699a      	ldr	r2, [r3, #24]
 800102e:	3a04      	subs	r2, #4
 8001030:	619a      	str	r2, [r3, #24]
	OS_SaveContext(R11 , OS_Control.CurrentTask->Current_PSP);
 8001032:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <PendSV_Handler+0x1c0>)
 8001034:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	465a      	mov	r2, fp
 800103c:	601a      	str	r2, [r3, #0]

	//Restore Next Task Context
	if (OS_Control.NextTask != NULL){
 800103e:	4b3c      	ldr	r3, [pc, #240]	; (8001130 <PendSV_Handler+0x1c0>)
 8001040:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d009      	beq.n	800105c <PendSV_Handler+0xec>
	OS_Control.CurrentTask = OS_Control.NextTask ;
 8001048:	4b39      	ldr	r3, [pc, #228]	; (8001130 <PendSV_Handler+0x1c0>)
 800104a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800104e:	4a38      	ldr	r2, [pc, #224]	; (8001130 <PendSV_Handler+0x1c0>)
 8001050:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	OS_Control.NextTask = NULL ;
 8001054:	4b36      	ldr	r3, [pc, #216]	; (8001130 <PendSV_Handler+0x1c0>)
 8001056:	2200      	movs	r2, #0
 8001058:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}

	OS_RestoreContext(R11 , OS_Control.CurrentTask->Current_PSP);
 800105c:	4b34      	ldr	r3, [pc, #208]	; (8001130 <PendSV_Handler+0x1c0>)
 800105e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	469b      	mov	fp, r3
	OS_Control.CurrentTask->Current_PSP++;
 8001068:	4b31      	ldr	r3, [pc, #196]	; (8001130 <PendSV_Handler+0x1c0>)
 800106a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800106e:	699a      	ldr	r2, [r3, #24]
 8001070:	3204      	adds	r2, #4
 8001072:	619a      	str	r2, [r3, #24]
	OS_RestoreContext(R10 , OS_Control.CurrentTask->Current_PSP);
 8001074:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <PendSV_Handler+0x1c0>)
 8001076:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	469a      	mov	sl, r3
	OS_Control.CurrentTask->Current_PSP++;
 8001080:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <PendSV_Handler+0x1c0>)
 8001082:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001086:	699a      	ldr	r2, [r3, #24]
 8001088:	3204      	adds	r2, #4
 800108a:	619a      	str	r2, [r3, #24]
	OS_RestoreContext(R9 , OS_Control.CurrentTask->Current_PSP);
 800108c:	4b28      	ldr	r3, [pc, #160]	; (8001130 <PendSV_Handler+0x1c0>)
 800108e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4699      	mov	r9, r3
	OS_Control.CurrentTask->Current_PSP++;
 8001098:	4b25      	ldr	r3, [pc, #148]	; (8001130 <PendSV_Handler+0x1c0>)
 800109a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800109e:	699a      	ldr	r2, [r3, #24]
 80010a0:	3204      	adds	r2, #4
 80010a2:	619a      	str	r2, [r3, #24]
	OS_RestoreContext(R8 , OS_Control.CurrentTask->Current_PSP);
 80010a4:	4b22      	ldr	r3, [pc, #136]	; (8001130 <PendSV_Handler+0x1c0>)
 80010a6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4698      	mov	r8, r3
	OS_Control.CurrentTask->Current_PSP++;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <PendSV_Handler+0x1c0>)
 80010b2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80010b6:	699a      	ldr	r2, [r3, #24]
 80010b8:	3204      	adds	r2, #4
 80010ba:	619a      	str	r2, [r3, #24]
	OS_RestoreContext(R7 , OS_Control.CurrentTask->Current_PSP);
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <PendSV_Handler+0x1c0>)
 80010be:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	461f      	mov	r7, r3
	OS_Control.CurrentTask->Current_PSP++;
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <PendSV_Handler+0x1c0>)
 80010ca:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80010ce:	699a      	ldr	r2, [r3, #24]
 80010d0:	3204      	adds	r2, #4
 80010d2:	619a      	str	r2, [r3, #24]
	OS_RestoreContext(R6 , OS_Control.CurrentTask->Current_PSP);
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <PendSV_Handler+0x1c0>)
 80010d6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	461e      	mov	r6, r3
	OS_Control.CurrentTask->Current_PSP++;
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <PendSV_Handler+0x1c0>)
 80010e2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80010e6:	699a      	ldr	r2, [r3, #24]
 80010e8:	3204      	adds	r2, #4
 80010ea:	619a      	str	r2, [r3, #24]
	OS_RestoreContext(R5 , OS_Control.CurrentTask->Current_PSP);
 80010ec:	4b10      	ldr	r3, [pc, #64]	; (8001130 <PendSV_Handler+0x1c0>)
 80010ee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++;
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <PendSV_Handler+0x1c0>)
 80010fa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80010fe:	699a      	ldr	r2, [r3, #24]
 8001100:	3204      	adds	r2, #4
 8001102:	619a      	str	r2, [r3, #24]
	OS_RestoreContext(R4 , OS_Control.CurrentTask->Current_PSP);
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <PendSV_Handler+0x1c0>)
 8001106:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	461c      	mov	r4, r3
	OS_Control.CurrentTask->Current_PSP++;
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <PendSV_Handler+0x1c0>)
 8001112:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001116:	699a      	ldr	r2, [r3, #24]
 8001118:	3204      	adds	r2, #4
 800111a:	619a      	str	r2, [r3, #24]

	//Update PSP
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <PendSV_Handler+0x1c0>)
 800111e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4618      	mov	r0, r3
 8001126:	f380 8809 	msr	PSP, r0
	__asm volatile ("BX LR");
 800112a:	4770      	bx	lr



}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	200004d8 	.word	0x200004d8

08001134 <DecideNext>:

void DecideNext(void){
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	//If Queue is Empty & Current TasK != Suspend
	if((Ready_Queue.count == 0) && (OS_Control.CurrentTask->TaskState != Suspend)){
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <DecideNext+0x98>)
 800113a:	885b      	ldrh	r3, [r3, #2]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d11a      	bne.n	8001176 <DecideNext+0x42>
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <DecideNext+0x9c>)
 8001142:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001146:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800114a:	2b00      	cmp	r3, #0
 800114c:	d013      	beq.n	8001176 <DecideNext+0x42>
		OS_Control.CurrentTask->TaskState = Running;
 800114e:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <DecideNext+0x9c>)
 8001150:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001154:	2201      	movs	r2, #1
 8001156:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		//add Current Task to Ready Queue (Round Robin)
		FIFO_Enqueue(&Ready_Queue, OS_Control.CurrentTask);
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <DecideNext+0x9c>)
 800115c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001160:	4619      	mov	r1, r3
 8001162:	481a      	ldr	r0, [pc, #104]	; (80011cc <DecideNext+0x98>)
 8001164:	f7ff fc74 	bl	8000a50 <FIFO_Enqueue>
		OS_Control.NextTask = OS_Control.CurrentTask;
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <DecideNext+0x9c>)
 800116a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800116e:	4a18      	ldr	r2, [pc, #96]	; (80011d0 <DecideNext+0x9c>)
 8001170:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		if((OS_Control.CurrentTask->Priority == OS_Control.NextTask->Priority)&&(OS_Control.CurrentTask->TaskState != Suspend)){
			FIFO_Enqueue(&Ready_Queue, OS_Control.CurrentTask);
			OS_Control.CurrentTask->TaskState = Ready;
		}
	}
}
 8001174:	e027      	b.n	80011c6 <DecideNext+0x92>
		FIFO_Dequeue(&Ready_Queue, &OS_Control.NextTask);
 8001176:	4917      	ldr	r1, [pc, #92]	; (80011d4 <DecideNext+0xa0>)
 8001178:	4814      	ldr	r0, [pc, #80]	; (80011cc <DecideNext+0x98>)
 800117a:	f7ff fcaa 	bl	8000ad2 <FIFO_Dequeue>
		OS_Control.NextTask->TaskState = Running;
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <DecideNext+0x9c>)
 8001180:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001184:	2201      	movs	r2, #1
 8001186:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if((OS_Control.CurrentTask->Priority == OS_Control.NextTask->Priority)&&(OS_Control.CurrentTask->TaskState != Suspend)){
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <DecideNext+0x9c>)
 800118c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001190:	791a      	ldrb	r2, [r3, #4]
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <DecideNext+0x9c>)
 8001194:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001198:	791b      	ldrb	r3, [r3, #4]
 800119a:	429a      	cmp	r2, r3
 800119c:	d113      	bne.n	80011c6 <DecideNext+0x92>
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <DecideNext+0x9c>)
 80011a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80011a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00c      	beq.n	80011c6 <DecideNext+0x92>
			FIFO_Enqueue(&Ready_Queue, OS_Control.CurrentTask);
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <DecideNext+0x9c>)
 80011ae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	; (80011cc <DecideNext+0x98>)
 80011b6:	f7ff fc4b 	bl	8000a50 <FIFO_Enqueue>
			OS_Control.CurrentTask->TaskState = Ready;
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <DecideNext+0x9c>)
 80011bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80011c0:	2203      	movs	r2, #3
 80011c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200004c4 	.word	0x200004c4
 80011d0:	200004d8 	.word	0x200004d8
 80011d4:	2000067c 	.word	0x2000067c

080011d8 <OS_SVC>:


void OS_SVC(int* StackFramePointer){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

	SVC_ID ID;

	ID = (*(uint8*)(((uint8*)StackFramePointer[6])-2));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3318      	adds	r3, #24
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	3b02      	subs	r3, #2
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	73fb      	strb	r3, [r7, #15]

	switch(ID){
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d82e      	bhi.n	8001250 <OS_SVC+0x78>
 80011f2:	a201      	add	r2, pc, #4	; (adr r2, 80011f8 <OS_SVC+0x20>)
 80011f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f8:	08001209 	.word	0x08001209
 80011fc:	08001209 	.word	0x08001209
 8001200:	08001237 	.word	0x08001237
 8001204:	0800123d 	.word	0x0800123d
	case SVC_TerminateTask: //Terminate Task
	case SVC_ActivateTask: //Activate Task
		//Update SchTable
		MY_RTOS_Update_SchedulerTable();
 8001208:	f000 f82a 	bl	8001260 <MY_RTOS_Update_SchedulerTable>
		//OS is in Running State
		if(OS_Control.OS_Mode_ID == OS_Running){
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <OS_SVC+0x80>)
 800120e:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8001212:	2b01      	cmp	r3, #1
 8001214:	d11b      	bne.n	800124e <OS_SVC+0x76>
			if (strcmp(OS_Control.CurrentTask->TaskName,"IDLE_Task") != 0){
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <OS_SVC+0x80>)
 8001218:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800121c:	331c      	adds	r3, #28
 800121e:	490f      	ldr	r1, [pc, #60]	; (800125c <OS_SVC+0x84>)
 8001220:	4618      	mov	r0, r3
 8001222:	f7fe ffa5 	bl	8000170 <strcmp>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d010      	beq.n	800124e <OS_SVC+0x76>
				//Decide Next
				DecideNext();
 800122c:	f7ff ff82 	bl	8001134 <DecideNext>
				//Trigger OS_PendSV
				Trigger_OS_PendSV();
 8001230:	f7ff fbe4 	bl	80009fc <Trigger_OS_PendSV>
			}
		}
		break;
 8001234:	e00b      	b.n	800124e <OS_SVC+0x76>
	case SVC_TaskWaitingTime:
		MY_RTOS_Update_SchedulerTable();
 8001236:	f000 f813 	bl	8001260 <MY_RTOS_Update_SchedulerTable>
		break;
 800123a:	e009      	b.n	8001250 <OS_SVC+0x78>

	case SVC_Switch_Priviledge:
		OS_SWITCH_CPU_access_level_to_privileged
 800123c:	f3ef 8014 	mrs	r0, CONTROL
 8001240:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8001244:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8001248:	f380 8814 	msr	CONTROL, r0
		break;
 800124c:	e000      	b.n	8001250 <OS_SVC+0x78>
		break;
 800124e:	bf00      	nop
	}

}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200004d8 	.word	0x200004d8
 800125c:	080018a4 	.word	0x080018a4

08001260 <MY_RTOS_Update_SchedulerTable>:

void MY_RTOS_Update_SchedulerTable(void){
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	//Bubble sort SchTable Higher ---> Lower Priority
	BubbleSort();
 8001266:	f000 f8d1 	bl	800140c <BubbleSort>
	//Free Ready Queue
	Task_Ref* Temp = NULL;
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
	while(FIFO_Dequeue(&Ready_Queue, &Temp /* Pointer to Pointer */)!= FIFO_Empty);
 800126e:	bf00      	nop
 8001270:	463b      	mov	r3, r7
 8001272:	4619      	mov	r1, r3
 8001274:	4833      	ldr	r0, [pc, #204]	; (8001344 <MY_RTOS_Update_SchedulerTable+0xe4>)
 8001276:	f7ff fc2c 	bl	8000ad2 <FIFO_Dequeue>
 800127a:	4603      	mov	r3, r0
 800127c:	2b02      	cmp	r3, #2
 800127e:	d1f7      	bne.n	8001270 <MY_RTOS_Update_SchedulerTable+0x10>
	//Update Ready Queue
	uint8 i = 0 ;
 8001280:	2300      	movs	r3, #0
 8001282:	71fb      	strb	r3, [r7, #7]
	for( i = 0 ; i < OS_Control.No_Active_Tasks ; i++){
 8001284:	2300      	movs	r3, #0
 8001286:	71fb      	strb	r3, [r7, #7]
 8001288:	e04f      	b.n	800132a <MY_RTOS_Update_SchedulerTable+0xca>

		if (OS_Control.OSTasks[i]->TaskState != Suspend){
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	4a2e      	ldr	r2, [pc, #184]	; (8001348 <MY_RTOS_Update_SchedulerTable+0xe8>)
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001296:	2b00      	cmp	r3, #0
 8001298:	d044      	beq.n	8001324 <MY_RTOS_Update_SchedulerTable+0xc4>
			if ( OS_Control.OSTasks[i]->Priority != OS_Control.OSTasks[i+1]->Priority ){
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4a2a      	ldr	r2, [pc, #168]	; (8001348 <MY_RTOS_Update_SchedulerTable+0xe8>)
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	791a      	ldrb	r2, [r3, #4]
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	3301      	adds	r3, #1
 80012a8:	4927      	ldr	r1, [pc, #156]	; (8001348 <MY_RTOS_Update_SchedulerTable+0xe8>)
 80012aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012ae:	791b      	ldrb	r3, [r3, #4]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d00f      	beq.n	80012d4 <MY_RTOS_Update_SchedulerTable+0x74>
				FIFO_Enqueue(&Ready_Queue, OS_Control.OSTasks[i]);
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4a24      	ldr	r2, [pc, #144]	; (8001348 <MY_RTOS_Update_SchedulerTable+0xe8>)
 80012b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012bc:	4619      	mov	r1, r3
 80012be:	4821      	ldr	r0, [pc, #132]	; (8001344 <MY_RTOS_Update_SchedulerTable+0xe4>)
 80012c0:	f7ff fbc6 	bl	8000a50 <FIFO_Enqueue>
				OS_Control.OSTasks[i]->TaskState = Ready;
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	4a20      	ldr	r2, [pc, #128]	; (8001348 <MY_RTOS_Update_SchedulerTable+0xe8>)
 80012c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012cc:	2203      	movs	r2, #3
 80012ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 80012d2:	e032      	b.n	800133a <MY_RTOS_Update_SchedulerTable+0xda>
			}
			else if(OS_Control.OSTasks[i]->Priority == OS_Control.OSTasks[i+1]->Priority){
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <MY_RTOS_Update_SchedulerTable+0xe8>)
 80012d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012dc:	791a      	ldrb	r2, [r3, #4]
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	3301      	adds	r3, #1
 80012e2:	4919      	ldr	r1, [pc, #100]	; (8001348 <MY_RTOS_Update_SchedulerTable+0xe8>)
 80012e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012e8:	791b      	ldrb	r3, [r3, #4]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d10f      	bne.n	800130e <MY_RTOS_Update_SchedulerTable+0xae>
				FIFO_Enqueue(&Ready_Queue, OS_Control.OSTasks[i]);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	4a15      	ldr	r2, [pc, #84]	; (8001348 <MY_RTOS_Update_SchedulerTable+0xe8>)
 80012f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f6:	4619      	mov	r1, r3
 80012f8:	4812      	ldr	r0, [pc, #72]	; (8001344 <MY_RTOS_Update_SchedulerTable+0xe4>)
 80012fa:	f7ff fba9 	bl	8000a50 <FIFO_Enqueue>
				OS_Control.OSTasks[i]->TaskState = Ready;
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	4a11      	ldr	r2, [pc, #68]	; (8001348 <MY_RTOS_Update_SchedulerTable+0xe8>)
 8001302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001306:	2203      	movs	r2, #3
 8001308:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800130c:	e00a      	b.n	8001324 <MY_RTOS_Update_SchedulerTable+0xc4>
			}
			else if(OS_Control.OSTasks[i] > OS_Control.OSTasks[i+1]){
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <MY_RTOS_Update_SchedulerTable+0xe8>)
 8001312:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	3301      	adds	r3, #1
 800131a:	490b      	ldr	r1, [pc, #44]	; (8001348 <MY_RTOS_Update_SchedulerTable+0xe8>)
 800131c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001320:	429a      	cmp	r2, r3
 8001322:	d809      	bhi.n	8001338 <MY_RTOS_Update_SchedulerTable+0xd8>
	for( i = 0 ; i < OS_Control.No_Active_Tasks ; i++){
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	3301      	adds	r3, #1
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	79fa      	ldrb	r2, [r7, #7]
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MY_RTOS_Update_SchedulerTable+0xe8>)
 800132e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8001332:	429a      	cmp	r2, r3
 8001334:	d3a9      	bcc.n	800128a <MY_RTOS_Update_SchedulerTable+0x2a>
				break;
			}
		}
	}
}
 8001336:	e000      	b.n	800133a <MY_RTOS_Update_SchedulerTable+0xda>
				break;
 8001338:	bf00      	nop
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200004c4 	.word	0x200004c4
 8001348:	200004d8 	.word	0x200004d8

0800134c <MY_RTOS_Update_TaskingTime>:

void MY_RTOS_Update_TaskingTime(void){
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
	uint8 i = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	71fb      	strb	r3, [r7, #7]
	for(i = 0 ; i < OS_Control.No_Active_Tasks ; i++){
 8001356:	2300      	movs	r3, #0
 8001358:	71fb      	strb	r3, [r7, #7]
 800135a:	e029      	b.n	80013b0 <MY_RTOS_Update_TaskingTime+0x64>
		if(OS_Control.OSTasks[i]->TimingWaiting.Blocking == Enable_Waiting){
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	4a19      	ldr	r2, [pc, #100]	; (80013c4 <MY_RTOS_Update_TaskingTime+0x78>)
 8001360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001368:	2b01      	cmp	r3, #1
 800136a:	d11e      	bne.n	80013aa <MY_RTOS_Update_TaskingTime+0x5e>
			OS_Control.OSTasks[i]->TimingWaiting.Ticks--;
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4a15      	ldr	r2, [pc, #84]	; (80013c4 <MY_RTOS_Update_TaskingTime+0x78>)
 8001370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001376:	3a01      	subs	r2, #1
 8001378:	641a      	str	r2, [r3, #64]	; 0x40
			if(OS_Control.OSTasks[i]->TimingWaiting.Ticks == 0){
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <MY_RTOS_Update_TaskingTime+0x78>)
 800137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	2b00      	cmp	r3, #0
 8001386:	d110      	bne.n	80013aa <MY_RTOS_Update_TaskingTime+0x5e>
				OS_Control.OSTasks[i]->TimingWaiting.Blocking = Disable_Waiting;
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <MY_RTOS_Update_TaskingTime+0x78>)
 800138c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				OS_Control.OSTasks[i]->TaskState = Waiting;
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <MY_RTOS_Update_TaskingTime+0x78>)
 800139a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139e:	2202      	movs	r2, #2
 80013a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				OS_SVC_Set(SVC_TaskWaitingTime);
 80013a4:	2002      	movs	r0, #2
 80013a6:	f000 f80f 	bl	80013c8 <OS_SVC_Set>
	for(i = 0 ; i < OS_Control.No_Active_Tasks ; i++){
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	3301      	adds	r3, #1
 80013ae:	71fb      	strb	r3, [r7, #7]
 80013b0:	79fa      	ldrb	r2, [r7, #7]
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <MY_RTOS_Update_TaskingTime+0x78>)
 80013b4:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d3cf      	bcc.n	800135c <MY_RTOS_Update_TaskingTime+0x10>
			}
		}
	}
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200004d8 	.word	0x200004d8

080013c8 <OS_SVC_Set>:

void OS_SVC_Set(SVC_ID ID){
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]

	switch(ID){
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d813      	bhi.n	8001400 <OS_SVC_Set+0x38>
 80013d8:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <OS_SVC_Set+0x18>)
 80013da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013de:	bf00      	nop
 80013e0:	080013f1 	.word	0x080013f1
 80013e4:	080013f5 	.word	0x080013f5
 80013e8:	080013f9 	.word	0x080013f9
 80013ec:	080013fd 	.word	0x080013fd
	case SVC_TerminateTask: //Terminate Task
		__asm("SVC #0x0");
 80013f0:	df00      	svc	0
		break;
 80013f2:	e005      	b.n	8001400 <OS_SVC_Set+0x38>
	case SVC_ActivateTask: //Activate Task
		__asm("SVC #0x1");
 80013f4:	df01      	svc	1
		break;
 80013f6:	e003      	b.n	8001400 <OS_SVC_Set+0x38>
	case SVC_TaskWaitingTime:
		__asm("SVC #0x2");//Waiting
 80013f8:	df02      	svc	2
		break;
 80013fa:	e001      	b.n	8001400 <OS_SVC_Set+0x38>
	case SVC_Switch_Priviledge:
		__asm("SVC #0x3");//Convert Priviledge
 80013fc:	df03      	svc	3
		break;
 80013fe:	bf00      	nop

	}

}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop

0800140c <BubbleSort>:

void BubbleSort(void){
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0

	uint8 i,j, n = OS_Control.No_Active_Tasks;
 8001412:	4b21      	ldr	r3, [pc, #132]	; (8001498 <BubbleSort+0x8c>)
 8001414:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8001418:	717b      	strb	r3, [r7, #5]
	Task_Ref* Temp;

	for(i=0 ; i < n-1 ; i++){
 800141a:	2300      	movs	r3, #0
 800141c:	71fb      	strb	r3, [r7, #7]
 800141e:	e030      	b.n	8001482 <BubbleSort+0x76>
		for(j= 0; j < n-i-1 ; j++){
 8001420:	2300      	movs	r3, #0
 8001422:	71bb      	strb	r3, [r7, #6]
 8001424:	e023      	b.n	800146e <BubbleSort+0x62>
			if(OS_Control.OSTasks[j]->Priority > OS_Control.OSTasks[j+1]->Priority){
 8001426:	79bb      	ldrb	r3, [r7, #6]
 8001428:	4a1b      	ldr	r2, [pc, #108]	; (8001498 <BubbleSort+0x8c>)
 800142a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142e:	791a      	ldrb	r2, [r3, #4]
 8001430:	79bb      	ldrb	r3, [r7, #6]
 8001432:	3301      	adds	r3, #1
 8001434:	4918      	ldr	r1, [pc, #96]	; (8001498 <BubbleSort+0x8c>)
 8001436:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800143a:	791b      	ldrb	r3, [r3, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	d913      	bls.n	8001468 <BubbleSort+0x5c>
				Temp = OS_Control.OSTasks[j];
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	4a15      	ldr	r2, [pc, #84]	; (8001498 <BubbleSort+0x8c>)
 8001444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001448:	603b      	str	r3, [r7, #0]
				OS_Control.OSTasks[j] = OS_Control.OSTasks[j+1];
 800144a:	79bb      	ldrb	r3, [r7, #6]
 800144c:	1c5a      	adds	r2, r3, #1
 800144e:	79bb      	ldrb	r3, [r7, #6]
 8001450:	4911      	ldr	r1, [pc, #68]	; (8001498 <BubbleSort+0x8c>)
 8001452:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001456:	4910      	ldr	r1, [pc, #64]	; (8001498 <BubbleSort+0x8c>)
 8001458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OSTasks[j+1] = Temp;
 800145c:	79bb      	ldrb	r3, [r7, #6]
 800145e:	3301      	adds	r3, #1
 8001460:	490d      	ldr	r1, [pc, #52]	; (8001498 <BubbleSort+0x8c>)
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j= 0; j < n-i-1 ; j++){
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	3301      	adds	r3, #1
 800146c:	71bb      	strb	r3, [r7, #6]
 800146e:	79ba      	ldrb	r2, [r7, #6]
 8001470:	7979      	ldrb	r1, [r7, #5]
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	1acb      	subs	r3, r1, r3
 8001476:	3b01      	subs	r3, #1
 8001478:	429a      	cmp	r2, r3
 800147a:	dbd4      	blt.n	8001426 <BubbleSort+0x1a>
	for(i=0 ; i < n-1 ; i++){
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	3301      	adds	r3, #1
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	797b      	ldrb	r3, [r7, #5]
 8001486:	3b01      	subs	r3, #1
 8001488:	429a      	cmp	r2, r3
 800148a:	dbc9      	blt.n	8001420 <BubbleSort+0x14>
			}
		}
	}

}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	200004d8 	.word	0x200004d8

0800149c <main>:
uint8 payload[3] = {1,2,3};
EXTI_PinConfig_t PB0 = {EXTI0_PB0, EXTI_Trigger_RISING, EXTI_IRQ_Enable,MyIRQHandler};


int main(void)
{	MY_RTOS_ERROR_ID error = NO_ERROR;
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	2300      	movs	r3, #0
 80014a4:	71fb      	strb	r3, [r7, #7]
	MCAL_EXTI_Init(&PB0);
 80014a6:	4833      	ldr	r0, [pc, #204]	; (8001574 <main+0xd8>)
 80014a8:	f7fe ff38 	bl	800031c <MCAL_EXTI_Init>
	HW_init();
 80014ac:	f7ff fa9c 	bl	80009e8 <HW_init>
	MY_RTOS_init();
 80014b0:	f7ff fbea 	bl	8000c88 <MY_RTOS_init>
	//Configure Task1
	MY_RTOS_Config_Task( MY_RTOS_Task1 ,"MY RTOS Task1" , 3, TASK1, 1024);
 80014b4:	4a30      	ldr	r2, [pc, #192]	; (8001578 <main+0xdc>)
 80014b6:	4b31      	ldr	r3, [pc, #196]	; (800157c <main+0xe0>)
 80014b8:	4614      	mov	r4, r2
 80014ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014bc:	c407      	stmia	r4!, {r0, r1, r2}
 80014be:	8023      	strh	r3, [r4, #0]
 80014c0:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <main+0xe4>)
 80014c2:	2203      	movs	r2, #3
 80014c4:	711a      	strb	r2, [r3, #4]
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <main+0xe4>)
 80014c8:	4a2e      	ldr	r2, [pc, #184]	; (8001584 <main+0xe8>)
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <main+0xe4>)
 80014ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d2:	601a      	str	r2, [r3, #0]
	MY_RTOS_Task1.Priority = 3;
	MY_RTOS_Task1.p_TaskEntry = TASK1;
	MY_RTOS_Task1.Stack_Size = 1024;*/

	//Configure Task2
	MY_RTOS_Config_Task( MY_RTOS_Task2 ,"MY RTOS Task2" , 2, TASK2, 1024);
 80014d4:	4a2c      	ldr	r2, [pc, #176]	; (8001588 <main+0xec>)
 80014d6:	4b2d      	ldr	r3, [pc, #180]	; (800158c <main+0xf0>)
 80014d8:	4614      	mov	r4, r2
 80014da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014dc:	c407      	stmia	r4!, {r0, r1, r2}
 80014de:	8023      	strh	r3, [r4, #0]
 80014e0:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <main+0xf4>)
 80014e2:	2202      	movs	r2, #2
 80014e4:	711a      	strb	r2, [r3, #4]
 80014e6:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <main+0xf4>)
 80014e8:	4a2a      	ldr	r2, [pc, #168]	; (8001594 <main+0xf8>)
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <main+0xf4>)
 80014ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f2:	601a      	str	r2, [r3, #0]
	MY_RTOS_Task2.Priority = 2;
	MY_RTOS_Task2.p_TaskEntry = TASK2;
	MY_RTOS_Task2.Stack_Size = 1024;*/

	//Configure Task3
	MY_RTOS_Config_Task( MY_RTOS_Task3 ,"MY RTOS Task3" , 1, TASK3, 1024);
 80014f4:	4a28      	ldr	r2, [pc, #160]	; (8001598 <main+0xfc>)
 80014f6:	4b29      	ldr	r3, [pc, #164]	; (800159c <main+0x100>)
 80014f8:	4614      	mov	r4, r2
 80014fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014fc:	c407      	stmia	r4!, {r0, r1, r2}
 80014fe:	8023      	strh	r3, [r4, #0]
 8001500:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <main+0x104>)
 8001502:	2201      	movs	r2, #1
 8001504:	711a      	strb	r2, [r3, #4]
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <main+0x104>)
 8001508:	4a26      	ldr	r2, [pc, #152]	; (80015a4 <main+0x108>)
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <main+0x104>)
 800150e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001512:	601a      	str	r2, [r3, #0]
	MY_RTOS_Task3.Priority = 1;
	MY_RTOS_Task3.p_TaskEntry = TASK3;
	MY_RTOS_Task3.Stack_Size = 1024;*/

	//configure Mutex1
	MY_RTOS_Config_Mutex(Mutex1, "Mutex Task 1&3", 3 , payload);
 8001514:	4a24      	ldr	r2, [pc, #144]	; (80015a8 <main+0x10c>)
 8001516:	4b25      	ldr	r3, [pc, #148]	; (80015ac <main+0x110>)
 8001518:	4614      	mov	r4, r2
 800151a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800151c:	c407      	stmia	r4!, {r0, r1, r2}
 800151e:	8023      	strh	r3, [r4, #0]
 8001520:	3402      	adds	r4, #2
 8001522:	0c1b      	lsrs	r3, r3, #16
 8001524:	7023      	strb	r3, [r4, #0]
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <main+0x114>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <main+0x114>)
 800152e:	2203      	movs	r2, #3
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <main+0x114>)
 8001534:	4a1f      	ldr	r2, [pc, #124]	; (80015b4 <main+0x118>)
 8001536:	601a      	str	r2, [r3, #0]
	/*strcpy(Mutex1.Mutex_Name,"Mutex Task 1&3");
	Mutex1.Payload_Size = 3;
	Mutex1.Ppayload = payload;*/

	error += MY_RTOS_Create_Task(&MY_RTOS_Task1);
 8001538:	4811      	ldr	r0, [pc, #68]	; (8001580 <main+0xe4>)
 800153a:	f7ff fc11 	bl	8000d60 <MY_RTOS_Create_Task>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	4413      	add	r3, r2
 8001546:	71fb      	strb	r3, [r7, #7]
	error += MY_RTOS_Create_Task(&MY_RTOS_Task2);
 8001548:	4811      	ldr	r0, [pc, #68]	; (8001590 <main+0xf4>)
 800154a:	f7ff fc09 	bl	8000d60 <MY_RTOS_Create_Task>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	4413      	add	r3, r2
 8001556:	71fb      	strb	r3, [r7, #7]
	error += MY_RTOS_Create_Task(&MY_RTOS_Task3);
 8001558:	4811      	ldr	r0, [pc, #68]	; (80015a0 <main+0x104>)
 800155a:	f7ff fc01 	bl	8000d60 <MY_RTOS_Create_Task>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	4413      	add	r3, r2
 8001566:	71fb      	strb	r3, [r7, #7]

	MY_RTOS_Activate_Task(&MY_RTOS_Task1);
 8001568:	4805      	ldr	r0, [pc, #20]	; (8001580 <main+0xe4>)
 800156a:	f7ff fc3b 	bl	8000de4 <MY_RTOS_Activate_Task>
	//MY_RTOS_Activate_Task(&MY_RTOS_Task2);
	//MY_RTOS_Activate_Task(&MY_RTOS_Task3);

	MY_RTOS_StartOS();
 800156e:	f7ff fbcb 	bl	8000d08 <MY_RTOS_StartOS>

	while (1) {
 8001572:	e7fe      	b.n	8001572 <main+0xd6>
 8001574:	20000004 	.word	0x20000004
 8001578:	200007f0 	.word	0x200007f0
 800157c:	080018b0 	.word	0x080018b0
 8001580:	200007d4 	.word	0x200007d4
 8001584:	080015b9 	.word	0x080015b9
 8001588:	20000764 	.word	0x20000764
 800158c:	080018c0 	.word	0x080018c0
 8001590:	20000748 	.word	0x20000748
 8001594:	08001619 	.word	0x08001619
 8001598:	200007a8 	.word	0x200007a8
 800159c:	080018d0 	.word	0x080018d0
 80015a0:	2000078c 	.word	0x2000078c
 80015a4:	0800166d 	.word	0x0800166d
 80015a8:	200006fc 	.word	0x200006fc
 80015ac:	080018e0 	.word	0x080018e0
 80015b0:	200006f0 	.word	0x200006f0
 80015b4:	20000000 	.word	0x20000000

080015b8 <TASK1>:
	}


}

void TASK1(){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0

	static int count = 0;
	while(1){
		Task1Indic ^= 1;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <TASK1+0x4c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	f083 0301 	eor.w	r3, r3, #1
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <TASK1+0x4c>)
 80015c8:	701a      	strb	r2, [r3, #0]
		count++;
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <TASK1+0x50>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	3301      	adds	r3, #1
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <TASK1+0x50>)
 80015d2:	6013      	str	r3, [r2, #0]
		if(count == 500){
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <TASK1+0x50>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015dc:	d106      	bne.n	80015ec <TASK1+0x34>
			MY_RTOS_Acquire_Mutex(&Mutex1, &MY_RTOS_Task1);
 80015de:	490b      	ldr	r1, [pc, #44]	; (800160c <TASK1+0x54>)
 80015e0:	480b      	ldr	r0, [pc, #44]	; (8001610 <TASK1+0x58>)
 80015e2:	f7ff fc2b 	bl	8000e3c <MY_RTOS_Acquire_Mutex>
			MY_RTOS_Activate_Task(&MY_RTOS_Task2);
 80015e6:	480b      	ldr	r0, [pc, #44]	; (8001614 <TASK1+0x5c>)
 80015e8:	f7ff fbfc 	bl	8000de4 <MY_RTOS_Activate_Task>
		}
		if(count == 1000){
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <TASK1+0x50>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015f4:	d1e2      	bne.n	80015bc <TASK1+0x4>
			count = 0;
 80015f6:	4b04      	ldr	r3, [pc, #16]	; (8001608 <TASK1+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
			MY_RTOS_Release_Mutex(&Mutex1);
 80015fc:	4804      	ldr	r0, [pc, #16]	; (8001610 <TASK1+0x58>)
 80015fe:	f7ff fc70 	bl	8000ee2 <MY_RTOS_Release_Mutex>
		Task1Indic ^= 1;
 8001602:	e7db      	b.n	80015bc <TASK1+0x4>
 8001604:	20000744 	.word	0x20000744
 8001608:	20000460 	.word	0x20000460
 800160c:	200007d4 	.word	0x200007d4
 8001610:	200006f0 	.word	0x200006f0
 8001614:	20000748 	.word	0x20000748

08001618 <TASK2>:
		}
	}

}

void TASK2(){
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0

	static int count = 0;
	while(1){
		Task2Indic ^= 1;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <TASK2+0x44>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	f083 0301 	eor.w	r3, r3, #1
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <TASK2+0x44>)
 8001628:	701a      	strb	r2, [r3, #0]
		count++;
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <TASK2+0x48>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	3301      	adds	r3, #1
 8001630:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <TASK2+0x48>)
 8001632:	6013      	str	r3, [r2, #0]
		if(count == 500){
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <TASK2+0x48>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800163c:	d102      	bne.n	8001644 <TASK2+0x2c>
			MY_RTOS_Activate_Task(&MY_RTOS_Task3);
 800163e:	4809      	ldr	r0, [pc, #36]	; (8001664 <TASK2+0x4c>)
 8001640:	f7ff fbd0 	bl	8000de4 <MY_RTOS_Activate_Task>
		}
		if(count == 1000){
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <TASK2+0x48>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800164c:	d1e6      	bne.n	800161c <TASK2+0x4>
			MY_RTOS_Terminate_Task(&MY_RTOS_Task2);
 800164e:	4806      	ldr	r0, [pc, #24]	; (8001668 <TASK2+0x50>)
 8001650:	f7ff fbd7 	bl	8000e02 <MY_RTOS_Terminate_Task>
			count = 0;
 8001654:	4b02      	ldr	r3, [pc, #8]	; (8001660 <TASK2+0x48>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
		Task2Indic ^= 1;
 800165a:	e7df      	b.n	800161c <TASK2+0x4>
 800165c:	200007d0 	.word	0x200007d0
 8001660:	20000464 	.word	0x20000464
 8001664:	2000078c 	.word	0x2000078c
 8001668:	20000748 	.word	0x20000748

0800166c <TASK3>:
		}
	}

}

void TASK3(){
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	static int count = 0;
	while(1){
		Task3Indic ^= 1;
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <TASK3+0x5c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	f083 0301 	eor.w	r3, r3, #1
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <TASK3+0x5c>)
 800167c:	701a      	strb	r2, [r3, #0]
		count++;
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <TASK3+0x60>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	4a11      	ldr	r2, [pc, #68]	; (80016cc <TASK3+0x60>)
 8001686:	6013      	str	r3, [r2, #0]
		if(count == 50){
 8001688:	4b10      	ldr	r3, [pc, #64]	; (80016cc <TASK3+0x60>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b32      	cmp	r3, #50	; 0x32
 800168e:	d107      	bne.n	80016a0 <TASK3+0x34>
			MY_RTOS_Acquire_Mutex(&Mutex1, &MY_RTOS_Task3);
 8001690:	490f      	ldr	r1, [pc, #60]	; (80016d0 <TASK3+0x64>)
 8001692:	4810      	ldr	r0, [pc, #64]	; (80016d4 <TASK3+0x68>)
 8001694:	f7ff fbd2 	bl	8000e3c <MY_RTOS_Acquire_Mutex>
			MY_RTOS_Acquire_Mutex(&Mutex1, &MY_RTOS_Task3);
 8001698:	490d      	ldr	r1, [pc, #52]	; (80016d0 <TASK3+0x64>)
 800169a:	480e      	ldr	r0, [pc, #56]	; (80016d4 <TASK3+0x68>)
 800169c:	f7ff fbce 	bl	8000e3c <MY_RTOS_Acquire_Mutex>
		}
		if(count == 1000){
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <TASK3+0x60>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016a8:	d1e2      	bne.n	8001670 <TASK3+0x4>
			MY_RTOS_Acquire_Mutex(&Mutex1, &MY_RTOS_Task3);
 80016aa:	4909      	ldr	r1, [pc, #36]	; (80016d0 <TASK3+0x64>)
 80016ac:	4809      	ldr	r0, [pc, #36]	; (80016d4 <TASK3+0x68>)
 80016ae:	f7ff fbc5 	bl	8000e3c <MY_RTOS_Acquire_Mutex>
			MY_RTOS_Release_Mutex(&Mutex1);
 80016b2:	4808      	ldr	r0, [pc, #32]	; (80016d4 <TASK3+0x68>)
 80016b4:	f7ff fc15 	bl	8000ee2 <MY_RTOS_Release_Mutex>
			MY_RTOS_Terminate_Task(&MY_RTOS_Task3);
 80016b8:	4805      	ldr	r0, [pc, #20]	; (80016d0 <TASK3+0x64>)
 80016ba:	f7ff fba2 	bl	8000e02 <MY_RTOS_Terminate_Task>
			count = 0;
 80016be:	4b03      	ldr	r3, [pc, #12]	; (80016cc <TASK3+0x60>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
		Task3Indic ^= 1;
 80016c4:	e7d4      	b.n	8001670 <TASK3+0x4>
 80016c6:	bf00      	nop
 80016c8:	20000745 	.word	0x20000745
 80016cc:	20000468 	.word	0x20000468
 80016d0:	2000078c 	.word	0x2000078c
 80016d4:	200006f0 	.word	0x200006f0

080016d8 <MyIRQHandler>:
		}
	}

}

void MyIRQHandler(void){
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
	handler ^=1;
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <MyIRQHandler+0x1c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	f083 0301 	eor.w	r3, r3, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <MyIRQHandler+0x1c>)
 80016e8:	701a      	strb	r2, [r3, #0]
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000746 	.word	0x20000746

080016f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016fa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <LoopForever+0x6>)
  ldr r1, =_edata
 8001702:	490d      	ldr	r1, [pc, #52]	; (8001738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001704:	4a0d      	ldr	r2, [pc, #52]	; (800173c <LoopForever+0xe>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001708:	e002      	b.n	8001710 <LoopCopyDataInit>

0800170a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800170c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170e:	3304      	adds	r3, #4

08001710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001714:	d3f9      	bcc.n	800170a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001716:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001718:	4c0a      	ldr	r4, [pc, #40]	; (8001744 <LoopForever+0x16>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800171c:	e001      	b.n	8001722 <LoopFillZerobss>

0800171e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001720:	3204      	adds	r2, #4

08001722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001724:	d3fb      	bcc.n	800171e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001726:	f000 f811 	bl	800174c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800172a:	f7ff feb7 	bl	800149c <main>

0800172e <LoopForever>:

LoopForever:
    b LoopForever
 800172e:	e7fe      	b.n	800172e <LoopForever>
  ldr   r0, =_estack
 8001730:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001738:	20000444 	.word	0x20000444
  ldr r2, =_sidata
 800173c:	08001900 	.word	0x08001900
  ldr r2, =_sbss
 8001740:	20000444 	.word	0x20000444
  ldr r4, =_ebss
 8001744:	20000824 	.word	0x20000824

08001748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC1_2_IRQHandler>
	...

0800174c <__libc_init_array>:
 800174c:	b570      	push	{r4, r5, r6, lr}
 800174e:	2500      	movs	r5, #0
 8001750:	4e0c      	ldr	r6, [pc, #48]	; (8001784 <__libc_init_array+0x38>)
 8001752:	4c0d      	ldr	r4, [pc, #52]	; (8001788 <__libc_init_array+0x3c>)
 8001754:	1ba4      	subs	r4, r4, r6
 8001756:	10a4      	asrs	r4, r4, #2
 8001758:	42a5      	cmp	r5, r4
 800175a:	d109      	bne.n	8001770 <__libc_init_array+0x24>
 800175c:	f000 f896 	bl	800188c <_init>
 8001760:	2500      	movs	r5, #0
 8001762:	4e0a      	ldr	r6, [pc, #40]	; (800178c <__libc_init_array+0x40>)
 8001764:	4c0a      	ldr	r4, [pc, #40]	; (8001790 <__libc_init_array+0x44>)
 8001766:	1ba4      	subs	r4, r4, r6
 8001768:	10a4      	asrs	r4, r4, #2
 800176a:	42a5      	cmp	r5, r4
 800176c:	d105      	bne.n	800177a <__libc_init_array+0x2e>
 800176e:	bd70      	pop	{r4, r5, r6, pc}
 8001770:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001774:	4798      	blx	r3
 8001776:	3501      	adds	r5, #1
 8001778:	e7ee      	b.n	8001758 <__libc_init_array+0xc>
 800177a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800177e:	4798      	blx	r3
 8001780:	3501      	adds	r5, #1
 8001782:	e7f2      	b.n	800176a <__libc_init_array+0x1e>
 8001784:	080018f4 	.word	0x080018f4
 8001788:	080018f4 	.word	0x080018f4
 800178c:	080018f4 	.word	0x080018f4
 8001790:	080018fc 	.word	0x080018fc

08001794 <register_fini>:
 8001794:	4b02      	ldr	r3, [pc, #8]	; (80017a0 <register_fini+0xc>)
 8001796:	b113      	cbz	r3, 800179e <register_fini+0xa>
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <register_fini+0x10>)
 800179a:	f000 b805 	b.w	80017a8 <atexit>
 800179e:	4770      	bx	lr
 80017a0:	00000000 	.word	0x00000000
 80017a4:	080017b5 	.word	0x080017b5

080017a8 <atexit>:
 80017a8:	2300      	movs	r3, #0
 80017aa:	4601      	mov	r1, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 b816 	b.w	80017e0 <__register_exitproc>

080017b4 <__libc_fini_array>:
 80017b4:	b538      	push	{r3, r4, r5, lr}
 80017b6:	4d07      	ldr	r5, [pc, #28]	; (80017d4 <__libc_fini_array+0x20>)
 80017b8:	4c07      	ldr	r4, [pc, #28]	; (80017d8 <__libc_fini_array+0x24>)
 80017ba:	1b64      	subs	r4, r4, r5
 80017bc:	10a4      	asrs	r4, r4, #2
 80017be:	b91c      	cbnz	r4, 80017c8 <__libc_fini_array+0x14>
 80017c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017c4:	f000 b868 	b.w	8001898 <_fini>
 80017c8:	3c01      	subs	r4, #1
 80017ca:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80017ce:	4798      	blx	r3
 80017d0:	e7f5      	b.n	80017be <__libc_fini_array+0xa>
 80017d2:	bf00      	nop
 80017d4:	080018fc 	.word	0x080018fc
 80017d8:	08001900 	.word	0x08001900

080017dc <__retarget_lock_acquire_recursive>:
 80017dc:	4770      	bx	lr

080017de <__retarget_lock_release_recursive>:
 80017de:	4770      	bx	lr

080017e0 <__register_exitproc>:
 80017e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017e4:	4c26      	ldr	r4, [pc, #152]	; (8001880 <__register_exitproc+0xa0>)
 80017e6:	4606      	mov	r6, r0
 80017e8:	6820      	ldr	r0, [r4, #0]
 80017ea:	4698      	mov	r8, r3
 80017ec:	460f      	mov	r7, r1
 80017ee:	4691      	mov	r9, r2
 80017f0:	f7ff fff4 	bl	80017dc <__retarget_lock_acquire_recursive>
 80017f4:	4b23      	ldr	r3, [pc, #140]	; (8001884 <__register_exitproc+0xa4>)
 80017f6:	681d      	ldr	r5, [r3, #0]
 80017f8:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 80017fc:	b918      	cbnz	r0, 8001806 <__register_exitproc+0x26>
 80017fe:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8001802:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8001806:	6843      	ldr	r3, [r0, #4]
 8001808:	2b1f      	cmp	r3, #31
 800180a:	dd19      	ble.n	8001840 <__register_exitproc+0x60>
 800180c:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <__register_exitproc+0xa8>)
 800180e:	b933      	cbnz	r3, 800181e <__register_exitproc+0x3e>
 8001810:	6820      	ldr	r0, [r4, #0]
 8001812:	f7ff ffe4 	bl	80017de <__retarget_lock_release_recursive>
 8001816:	f04f 30ff 	mov.w	r0, #4294967295
 800181a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800181e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001822:	f3af 8000 	nop.w
 8001826:	2800      	cmp	r0, #0
 8001828:	d0f2      	beq.n	8001810 <__register_exitproc+0x30>
 800182a:	2200      	movs	r2, #0
 800182c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8001830:	6042      	str	r2, [r0, #4]
 8001832:	6003      	str	r3, [r0, #0]
 8001834:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8001838:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800183c:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8001840:	6843      	ldr	r3, [r0, #4]
 8001842:	b19e      	cbz	r6, 800186c <__register_exitproc+0x8c>
 8001844:	2201      	movs	r2, #1
 8001846:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800184a:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800184e:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8001852:	409a      	lsls	r2, r3
 8001854:	4311      	orrs	r1, r2
 8001856:	2e02      	cmp	r6, #2
 8001858:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800185c:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8001860:	bf02      	ittt	eq
 8001862:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8001866:	430a      	orreq	r2, r1
 8001868:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	3302      	adds	r3, #2
 8001870:	6042      	str	r2, [r0, #4]
 8001872:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8001876:	6820      	ldr	r0, [r4, #0]
 8001878:	f7ff ffb1 	bl	80017de <__retarget_lock_release_recursive>
 800187c:	2000      	movs	r0, #0
 800187e:	e7cc      	b.n	800181a <__register_exitproc+0x3a>
 8001880:	20000440 	.word	0x20000440
 8001884:	080018f0 	.word	0x080018f0
 8001888:	00000000 	.word	0x00000000

0800188c <_init>:
 800188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188e:	bf00      	nop
 8001890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001892:	bc08      	pop	{r3}
 8001894:	469e      	mov	lr, r3
 8001896:	4770      	bx	lr

08001898 <_fini>:
 8001898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189a:	bf00      	nop
 800189c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800189e:	bc08      	pop	{r3}
 80018a0:	469e      	mov	lr, r3
 80018a2:	4770      	bx	lr
