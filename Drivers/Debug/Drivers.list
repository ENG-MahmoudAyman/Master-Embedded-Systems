
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010d0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001200  08001200  00011200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001244  08001244  0001124c  2**0
                  CONTENTS
  4 .ARM          00000000  08001244  08001244  0001124c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001244  0800124c  0001124c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001244  08001244  00011244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001248  08001248  00011248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001124c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000000  0800124c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  0800124c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001124c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000053eb  00000000  00000000  00011275  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000bb7  00000000  00000000  00016660  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000c42  00000000  00000000  00017217  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000218  00000000  00000000  00017e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001b0  00000000  00000000  00018078  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002a95  00000000  00000000  00018228  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003024  00000000  00000000  0001acbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b211  00000000  00000000  0001dce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00028ef2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000690  00000000  00000000  00028f70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080011e8 	.word	0x080011e8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080011e8 	.word	0x080011e8

08000170 <EXTI0_IRQHandler>:
 * ==================================================================================================
 *                                           ISR FUNCTIONS
 * ==================================================================================================
 */

void EXTI0_IRQHandler(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	EXTI->PR|=(1<<0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	//call the IRQ_Call_Function
	GP_IRQ_EXTI_CallBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000001c 	.word	0x2000001c

08000194 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	EXTI->PR|=(1<<1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	//call the IRQ_Call_Function
	GP_IRQ_EXTI_CallBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	EXTI->PR|=(1<<2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	//call the IRQ_Call_Function
	GP_IRQ_EXTI_CallBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000001c 	.word	0x2000001c

080001dc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	EXTI->PR|=(1<<3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	//call the IRQ_Call_Function
	GP_IRQ_EXTI_CallBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000001c 	.word	0x2000001c

08000200 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	EXTI->PR|=(1<<4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	//call the IRQ_Call_Function
	GP_IRQ_EXTI_CallBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000001c 	.word	0x2000001c

08000224 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	if(EXTI->PR &(1<<5)){EXTI->PR|=(1<<5);GP_IRQ_EXTI_CallBack[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR &(1<<6)){EXTI->PR|=(1<<6);GP_IRQ_EXTI_CallBack[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR &(1<<7)){EXTI->PR|=(1<<7);GP_IRQ_EXTI_CallBack[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR &(1<<8)){EXTI->PR|=(1<<8);GP_IRQ_EXTI_CallBack[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR &(1<<9)){EXTI->PR|=(1<<9);GP_IRQ_EXTI_CallBack[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000001c 	.word	0x2000001c

080002cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	//clearing Interrupt by writing a ‘1’ into the PR register
	if(EXTI->PR &(1<<10)){EXTI->PR|=(1<<10);GP_IRQ_EXTI_CallBack[10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->PR &(1<<11)){EXTI->PR|=(1<<11);GP_IRQ_EXTI_CallBack[11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->PR &(1<<12)){EXTI->PR|=(1<<12);GP_IRQ_EXTI_CallBack[12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if(EXTI->PR &(1<<13)){EXTI->PR|=(1<<13);GP_IRQ_EXTI_CallBack[13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if(EXTI->PR &(1<<14)){EXTI->PR|=(1<<14);GP_IRQ_EXTI_CallBack[14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if(EXTI->PR &(1<<15)){EXTI->PR|=(1<<15);GP_IRQ_EXTI_CallBack[15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	2000001c 	.word	0x2000001c

08000390 <Get_CRLH_Position>:
#include "GPIO_Stm32F103x8.h"

//-*-*-*-*-*-*-*-*-*-*-*-
//Generic Functions:
//-*-*-*-*-*-*-*-*-*-*-*
uint8 Get_CRLH_Position(uint16 PinNumber){
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b80      	cmp	r3, #128	; 0x80
 800039e:	d042      	beq.n	8000426 <Get_CRLH_Position+0x96>
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	dc11      	bgt.n	80003c8 <Get_CRLH_Position+0x38>
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d036      	beq.n	8000416 <Get_CRLH_Position+0x86>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	dc06      	bgt.n	80003ba <Get_CRLH_Position+0x2a>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02e      	beq.n	800040e <Get_CRLH_Position+0x7e>
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d02e      	beq.n	8000412 <Get_CRLH_Position+0x82>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d028      	beq.n	800040a <Get_CRLH_Position+0x7a>
 80003b8:	e037      	b.n	800042a <Get_CRLH_Position+0x9a>
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	d02f      	beq.n	800041e <Get_CRLH_Position+0x8e>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	d02f      	beq.n	8000422 <Get_CRLH_Position+0x92>
 80003c2:	2b10      	cmp	r3, #16
 80003c4:	d029      	beq.n	800041a <Get_CRLH_Position+0x8a>
 80003c6:	e030      	b.n	800042a <Get_CRLH_Position+0x9a>
 80003c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003cc:	d023      	beq.n	8000416 <Get_CRLH_Position+0x86>
 80003ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d2:	dc09      	bgt.n	80003e8 <Get_CRLH_Position+0x58>
 80003d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d8:	d019      	beq.n	800040e <Get_CRLH_Position+0x7e>
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	d018      	beq.n	8000412 <Get_CRLH_Position+0x82>
 80003e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e4:	d011      	beq.n	800040a <Get_CRLH_Position+0x7a>
 80003e6:	e020      	b.n	800042a <Get_CRLH_Position+0x9a>
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ec:	d017      	beq.n	800041e <Get_CRLH_Position+0x8e>
 80003ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f2:	dc03      	bgt.n	80003fc <Get_CRLH_Position+0x6c>
 80003f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f8:	d00f      	beq.n	800041a <Get_CRLH_Position+0x8a>
 80003fa:	e016      	b.n	800042a <Get_CRLH_Position+0x9a>
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	d00f      	beq.n	8000422 <Get_CRLH_Position+0x92>
 8000402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000406:	d00e      	beq.n	8000426 <Get_CRLH_Position+0x96>
 8000408:	e00f      	b.n	800042a <Get_CRLH_Position+0x9a>
	case GPIO_PIN_0:
	case GPIO_PIN_8:
		return 0;
 800040a:	2300      	movs	r3, #0
 800040c:	e00e      	b.n	800042c <Get_CRLH_Position+0x9c>
		break;
	case GPIO_PIN_1:
	case GPIO_PIN_9:
		return 4;
 800040e:	2304      	movs	r3, #4
 8000410:	e00c      	b.n	800042c <Get_CRLH_Position+0x9c>
		break;
	case GPIO_PIN_2:
	case GPIO_PIN_10:
		return 8;
 8000412:	2308      	movs	r3, #8
 8000414:	e00a      	b.n	800042c <Get_CRLH_Position+0x9c>
		break;
	case GPIO_PIN_3:
	case GPIO_PIN_11:
		return 12;
 8000416:	230c      	movs	r3, #12
 8000418:	e008      	b.n	800042c <Get_CRLH_Position+0x9c>
		break;
	case GPIO_PIN_4:
	case GPIO_PIN_12:
		return 16;
 800041a:	2310      	movs	r3, #16
 800041c:	e006      	b.n	800042c <Get_CRLH_Position+0x9c>
		break;
	case GPIO_PIN_5:
	case GPIO_PIN_13:
		return 20;
 800041e:	2314      	movs	r3, #20
 8000420:	e004      	b.n	800042c <Get_CRLH_Position+0x9c>
		break;
	case GPIO_PIN_6:
	case GPIO_PIN_14:
		return 24;
 8000422:	2318      	movs	r3, #24
 8000424:	e002      	b.n	800042c <Get_CRLH_Position+0x9c>
		break;
	case GPIO_PIN_7:
	case GPIO_PIN_15:
		return 28;
 8000426:	231c      	movs	r3, #28
 8000428:	e000      	b.n	800042c <Get_CRLH_Position+0x9c>
		break;
	default:
		return 0;
 800042a:	2300      	movs	r3, #0
		break;
	}
}
 800042c:	4618      	mov	r0, r3
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
	...

08000438 <MCAL_GPIO_Init>:
* @param [in]       - GPIOx: where x can be from A to E to select the GPIO Peripheral
* @param [in]       - PinConfig: pointer to GPIO_PinConfig_t structure that contains the config parameters
* @retval           - None
* Note              - (LQFP48 --> Port A & B Fully included -- Port C & D Partially included)
*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx,GPIO_PinConfig_t *PinConfig){
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	6039      	str	r1, [r7, #0]
	if(GPIOx == GPIOA){GPIOA_CLK_EN();}
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a51      	ldr	r2, [pc, #324]	; (800058c <MCAL_GPIO_Init+0x154>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <MCAL_GPIO_Init+0x20>
 800044a:	4b51      	ldr	r3, [pc, #324]	; (8000590 <MCAL_GPIO_Init+0x158>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	4a50      	ldr	r2, [pc, #320]	; (8000590 <MCAL_GPIO_Init+0x158>)
 8000450:	f043 0304 	orr.w	r3, r3, #4
 8000454:	6193      	str	r3, [r2, #24]
 8000456:	e02a      	b.n	80004ae <MCAL_GPIO_Init+0x76>
	else if(GPIOx == GPIOB){GPIOB_CLK_EN();}
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a4e      	ldr	r2, [pc, #312]	; (8000594 <MCAL_GPIO_Init+0x15c>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <MCAL_GPIO_Init+0x36>
 8000460:	4b4b      	ldr	r3, [pc, #300]	; (8000590 <MCAL_GPIO_Init+0x158>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a4a      	ldr	r2, [pc, #296]	; (8000590 <MCAL_GPIO_Init+0x158>)
 8000466:	f043 0308 	orr.w	r3, r3, #8
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	e01f      	b.n	80004ae <MCAL_GPIO_Init+0x76>
	else if(GPIOx == GPIOC){GPIOC_CLK_EN();}
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a49      	ldr	r2, [pc, #292]	; (8000598 <MCAL_GPIO_Init+0x160>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <MCAL_GPIO_Init+0x4c>
 8000476:	4b46      	ldr	r3, [pc, #280]	; (8000590 <MCAL_GPIO_Init+0x158>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	4a45      	ldr	r2, [pc, #276]	; (8000590 <MCAL_GPIO_Init+0x158>)
 800047c:	f043 0310 	orr.w	r3, r3, #16
 8000480:	6193      	str	r3, [r2, #24]
 8000482:	e014      	b.n	80004ae <MCAL_GPIO_Init+0x76>
	else if(GPIOx == GPIOD){GPIOD_CLK_EN();}
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a45      	ldr	r2, [pc, #276]	; (800059c <MCAL_GPIO_Init+0x164>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <MCAL_GPIO_Init+0x62>
 800048c:	4b40      	ldr	r3, [pc, #256]	; (8000590 <MCAL_GPIO_Init+0x158>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a3f      	ldr	r2, [pc, #252]	; (8000590 <MCAL_GPIO_Init+0x158>)
 8000492:	f043 0320 	orr.w	r3, r3, #32
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	e009      	b.n	80004ae <MCAL_GPIO_Init+0x76>
	else if(GPIOx == GPIOE){GPIOE_CLK_EN();}
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a40      	ldr	r2, [pc, #256]	; (80005a0 <MCAL_GPIO_Init+0x168>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d105      	bne.n	80004ae <MCAL_GPIO_Init+0x76>
 80004a2:	4b3b      	ldr	r3, [pc, #236]	; (8000590 <MCAL_GPIO_Init+0x158>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4a3a      	ldr	r2, [pc, #232]	; (8000590 <MCAL_GPIO_Init+0x158>)
 80004a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ac:	6193      	str	r3, [r2, #24]
	//Port configuration register low (GPIOx_CRL) (x=A..E) Pin 0 >>> 7
	//Port configuration register low (GPIOx_CRH) (x=A..E) Pin 8 >>> 15
	vuint32 *ConfigReg = NULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
	uint8 PIN_Config;
	uint8 CRLH_Shift = Get_CRLH_Position(PinConfig->GPIO_PinNumber);
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	881b      	ldrh	r3, [r3, #0]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff ff6a 	bl	8000390 <Get_CRLH_Position>
 80004bc:	4603      	mov	r3, r0
 80004be:	73fb      	strb	r3, [r7, #15]
	ConfigReg = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL: &GPIOx->CRH;
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	881b      	ldrh	r3, [r3, #0]
 80004c4:	2bff      	cmp	r3, #255	; 0xff
 80004c6:	d801      	bhi.n	80004cc <MCAL_GPIO_Init+0x94>
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	e001      	b.n	80004d0 <MCAL_GPIO_Init+0x98>
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3304      	adds	r3, #4
 80004d0:	613b      	str	r3, [r7, #16]
	//clear CNFy[1:0] MODEy[1:0]
	(*ConfigReg)&=~(0xF<<CRLH_Shift);
 80004d2:	693b      	ldr	r3, [r7, #16]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	7bfa      	ldrb	r2, [r7, #15]
 80004d8:	210f      	movs	r1, #15
 80004da:	fa01 f202 	lsl.w	r2, r1, r2
 80004de:	43d2      	mvns	r2, r2
 80004e0:	401a      	ands	r2, r3
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	601a      	str	r2, [r3, #0]
	//PIN is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)){
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	789b      	ldrb	r3, [r3, #2]
 80004ea:	2b04      	cmp	r3, #4
 80004ec:	d00b      	beq.n	8000506 <MCAL_GPIO_Init+0xce>
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	789b      	ldrb	r3, [r3, #2]
 80004f2:	2b05      	cmp	r3, #5
 80004f4:	d007      	beq.n	8000506 <MCAL_GPIO_Init+0xce>
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	789b      	ldrb	r3, [r3, #2]
 80004fa:	2b06      	cmp	r3, #6
 80004fc:	d003      	beq.n	8000506 <MCAL_GPIO_Init+0xce>
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	789b      	ldrb	r3, [r3, #2]
 8000502:	2b07      	cmp	r3, #7
 8000504:	d10e      	bne.n	8000524 <MCAL_GPIO_Init+0xec>
		PIN_Config = ((((PinConfig->GPIO_MODE -4)<< 2)|(PinConfig->GPIO_Output_Speed)) & 0x0F);
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	789b      	ldrb	r3, [r3, #2]
 800050a:	3b04      	subs	r3, #4
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	b25a      	sxtb	r2, r3
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	78db      	ldrb	r3, [r3, #3]
 8000514:	b25b      	sxtb	r3, r3
 8000516:	4313      	orrs	r3, r2
 8000518:	b25b      	sxtb	r3, r3
 800051a:	b2db      	uxtb	r3, r3
 800051c:	f003 030f 	and.w	r3, r3, #15
 8000520:	75fb      	strb	r3, [r7, #23]
 8000522:	e025      	b.n	8000570 <MCAL_GPIO_Init+0x138>
	}
	//PIN is input MODEy[1:0] = 00: Input mode (reset state)
	else{
		if((PinConfig->GPIO_MODE == GPIO_MODE_Analog)||(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO)){
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	789b      	ldrb	r3, [r3, #2]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d003      	beq.n	8000534 <MCAL_GPIO_Init+0xfc>
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	789b      	ldrb	r3, [r3, #2]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d107      	bne.n	8000544 <MCAL_GPIO_Init+0x10c>
			PIN_Config = (((PinConfig->GPIO_MODE)<< 2) & 0x0C);
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	789b      	ldrb	r3, [r3, #2]
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	b2db      	uxtb	r3, r3
 800053c:	f003 030c 	and.w	r3, r3, #12
 8000540:	75fb      	strb	r3, [r7, #23]
 8000542:	e015      	b.n	8000570 <MCAL_GPIO_Init+0x138>
		}
		else{//Pull up or down Input mode Is Selected
			PIN_Config = (((GPIO_MODE_INPUT_PU)<< 2) & 0x0C);
 8000544:	2308      	movs	r3, #8
 8000546:	75fb      	strb	r3, [r7, #23]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU){//Pull up Input mode Is Selected
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	789b      	ldrb	r3, [r3, #2]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d107      	bne.n	8000560 <MCAL_GPIO_Init+0x128>
			//Table 20. Port bit configuration table PINy ODRx register = 1
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	68db      	ldr	r3, [r3, #12]
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	8812      	ldrh	r2, [r2, #0]
 8000558:	431a      	orrs	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	e007      	b.n	8000570 <MCAL_GPIO_Init+0x138>
			}
			else{//Pull down Input mode Is Selected
			//Table 20. Port bit configuration table PINy ODRx register = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	683a      	ldr	r2, [r7, #0]
 8000566:	8812      	ldrh	r2, [r2, #0]
 8000568:	43d2      	mvns	r2, r2
 800056a:	401a      	ands	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*ConfigReg)|= PIN_Config<<CRLH_Shift;
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	7df9      	ldrb	r1, [r7, #23]
 8000576:	7bfa      	ldrb	r2, [r7, #15]
 8000578:	fa01 f202 	lsl.w	r2, r1, r2
 800057c:	431a      	orrs	r2, r3
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	601a      	str	r2, [r3, #0]

}
 8000582:	bf00      	nop
 8000584:	3718      	adds	r7, #24
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40010800 	.word	0x40010800
 8000590:	40021000 	.word	0x40021000
 8000594:	40010c00 	.word	0x40010c00
 8000598:	40011000 	.word	0x40011000
 800059c:	40011400 	.word	0x40011400
 80005a0:	40011800 	.word	0x40011800

080005a4 <MCAL_GPIO_WritePin>:
* @param [in]       - PinNumber: Set Pin Number According to @ref GPIO_PINS_Define
* @param [in]       - Value: Set Pin Value According to @ref GPIO_PIN_State
* @retval           - None
* Note              - None
*/
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx,uint16 PinNumber,uint8 Value){
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	807b      	strh	r3, [r7, #2]
 80005b0:	4613      	mov	r3, r2
 80005b2:	707b      	strb	r3, [r7, #1]
	if(Value){
 80005b4:	787b      	ldrb	r3, [r7, #1]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d003      	beq.n	80005c2 <MCAL_GPIO_WritePin+0x1e>
		//(GPIOx->ODR)|= PinNumber;
		(GPIOx->BSRR)= (uint32)PinNumber;
 80005ba:	887a      	ldrh	r2, [r7, #2]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	611a      	str	r2, [r3, #16]
	}
	else{
		//(GPIOx->ODR)&= ~PinNumber;
		(GPIOx->BRR)= (uint32)PinNumber;
	}
}
 80005c0:	e002      	b.n	80005c8 <MCAL_GPIO_WritePin+0x24>
		(GPIOx->BRR)= (uint32)PinNumber;
 80005c2:	887a      	ldrh	r2, [r7, #2]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	615a      	str	r2, [r3, #20]
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
	...

080005d4 <MCAL_RCC_GetSYSCLK_Freq>:

const uint8 PLLmulfactor[] = {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,16};
const uint8 AHBprescaler[] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};
const uint8 PCLKprescaler[] = {0,0,0,0,1,2,3,4};

uint32 MCAL_RCC_GetSYSCLK_Freq(void){
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >> 2) & 0b11){
 80005d8:	4b23      	ldr	r3, [pc, #140]	; (8000668 <MCAL_RCC_GetSYSCLK_Freq+0x94>)
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	089b      	lsrs	r3, r3, #2
 80005de:	f003 0303 	and.w	r3, r3, #3
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d006      	beq.n	80005f4 <MCAL_RCC_GetSYSCLK_Freq+0x20>
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d302      	bcc.n	80005f0 <MCAL_RCC_GetSYSCLK_Freq+0x1c>
 80005ea:	2b02      	cmp	r3, #2
 80005ec:	d004      	beq.n	80005f8 <MCAL_RCC_GetSYSCLK_Freq+0x24>
 80005ee:	e035      	b.n	800065c <MCAL_RCC_GetSYSCLK_Freq+0x88>
		case 0 :  //00: HSI oscillator used as system clock.
			return (uint32) HSI_CLK;
 80005f0:	4b1e      	ldr	r3, [pc, #120]	; (800066c <MCAL_RCC_GetSYSCLK_Freq+0x98>)
 80005f2:	e034      	b.n	800065e <MCAL_RCC_GetSYSCLK_Freq+0x8a>
			break;
		case 1 :  //01: HSE oscillator used as system clock.
			return (uint32) HSE_CLK;
 80005f4:	4b1d      	ldr	r3, [pc, #116]	; (800066c <MCAL_RCC_GetSYSCLK_Freq+0x98>)
 80005f6:	e032      	b.n	800065e <MCAL_RCC_GetSYSCLK_Freq+0x8a>
			break;
		case 2:   //10: PLL used as system clock.
			if((RCC->CFGR >> 16)& 1){
 80005f8:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <MCAL_RCC_GetSYSCLK_Freq+0x94>)
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	0c1b      	lsrs	r3, r3, #16
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	2b00      	cmp	r3, #0
 8000604:	d01e      	beq.n	8000644 <MCAL_RCC_GetSYSCLK_Freq+0x70>
				if((RCC->CFGR >> 17)& 1){
 8000606:	4b18      	ldr	r3, [pc, #96]	; (8000668 <MCAL_RCC_GetSYSCLK_Freq+0x94>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	0c5b      	lsrs	r3, r3, #17
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	2b00      	cmp	r3, #0
 8000612:	d00b      	beq.n	800062c <MCAL_RCC_GetSYSCLK_Freq+0x58>
					return (uint32) (HSE_CLK<<1)*PLLmulfactor[(RCC->CFGR >> 18) & 0b1111];
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MCAL_RCC_GetSYSCLK_Freq+0x94>)
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	0c9b      	lsrs	r3, r3, #18
 800061a:	f003 030f 	and.w	r3, r3, #15
 800061e:	4a14      	ldr	r2, [pc, #80]	; (8000670 <MCAL_RCC_GetSYSCLK_Freq+0x9c>)
 8000620:	5cd3      	ldrb	r3, [r2, r3]
 8000622:	461a      	mov	r2, r3
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <MCAL_RCC_GetSYSCLK_Freq+0xa0>)
 8000626:	fb03 f302 	mul.w	r3, r3, r2
 800062a:	e018      	b.n	800065e <MCAL_RCC_GetSYSCLK_Freq+0x8a>
				}
				else{
					return (uint32) (HSE_CLK)*PLLmulfactor[(RCC->CFGR >> 18) & 0b1111];
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MCAL_RCC_GetSYSCLK_Freq+0x94>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	0c9b      	lsrs	r3, r3, #18
 8000632:	f003 030f 	and.w	r3, r3, #15
 8000636:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <MCAL_RCC_GetSYSCLK_Freq+0x9c>)
 8000638:	5cd3      	ldrb	r3, [r2, r3]
 800063a:	461a      	mov	r2, r3
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MCAL_RCC_GetSYSCLK_Freq+0x98>)
 800063e:	fb03 f302 	mul.w	r3, r3, r2
 8000642:	e00c      	b.n	800065e <MCAL_RCC_GetSYSCLK_Freq+0x8a>
				}
			}
			else{
				return (uint32) (HSI_CLK<<1)*PLLmulfactor[(RCC->CFGR >> 18) & 0b1111];
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MCAL_RCC_GetSYSCLK_Freq+0x94>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	0c9b      	lsrs	r3, r3, #18
 800064a:	f003 030f 	and.w	r3, r3, #15
 800064e:	4a08      	ldr	r2, [pc, #32]	; (8000670 <MCAL_RCC_GetSYSCLK_Freq+0x9c>)
 8000650:	5cd3      	ldrb	r3, [r2, r3]
 8000652:	461a      	mov	r2, r3
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <MCAL_RCC_GetSYSCLK_Freq+0xa0>)
 8000656:	fb03 f302 	mul.w	r3, r3, r2
 800065a:	e000      	b.n	800065e <MCAL_RCC_GetSYSCLK_Freq+0x8a>
			}
			break;
		default:
			return (uint32) HSI_CLK;
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <MCAL_RCC_GetSYSCLK_Freq+0x98>)
			break;
	}
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000
 800066c:	007a1200 	.word	0x007a1200
 8000670:	0800121c 	.word	0x0800121c
 8000674:	00f42400 	.word	0x00f42400

08000678 <MCAL_RCC_GetHCLK_Freq>:
uint32 MCAL_RCC_GetHCLK_Freq(void){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
//	Bits 7:4 HPRE: AHB prescaler
//	Set and cleared by software to control the division factor of the AHB clock.
	return MCAL_RCC_GetSYSCLK_Freq() >> AHBprescaler[((RCC->CFGR >> 4) & 0b1111)];
 800067c:	f7ff ffaa 	bl	80005d4 <MCAL_RCC_GetSYSCLK_Freq>
 8000680:	4601      	mov	r1, r0
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <MCAL_RCC_GetHCLK_Freq+0x20>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	091b      	lsrs	r3, r3, #4
 8000688:	f003 030f 	and.w	r3, r3, #15
 800068c:	4a03      	ldr	r2, [pc, #12]	; (800069c <MCAL_RCC_GetHCLK_Freq+0x24>)
 800068e:	5cd3      	ldrb	r3, [r2, r3]
 8000690:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000694:	4618      	mov	r0, r3
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	0800122c 	.word	0x0800122c

080006a0 <MCAL_RCC_GetPCLK1_Freq>:
uint32 MCAL_RCC_GetPCLK1_Freq(void){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
//	Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
//	Set and cleared by software to control the division factor of the APB low-speed clock (PCLK1).
	return MCAL_RCC_GetHCLK_Freq() >> PCLKprescaler[((RCC->CFGR >> 8) & 0b111)];
 80006a4:	f7ff ffe8 	bl	8000678 <MCAL_RCC_GetHCLK_Freq>
 80006a8:	4601      	mov	r1, r0
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <MCAL_RCC_GetPCLK1_Freq+0x20>)
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	0a1b      	lsrs	r3, r3, #8
 80006b0:	f003 0307 	and.w	r3, r3, #7
 80006b4:	4a03      	ldr	r2, [pc, #12]	; (80006c4 <MCAL_RCC_GetPCLK1_Freq+0x24>)
 80006b6:	5cd3      	ldrb	r3, [r2, r3]
 80006b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80006bc:	4618      	mov	r0, r3
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000
 80006c4:	0800123c 	.word	0x0800123c

080006c8 <MCAL_RCC_GetPCLK2_Freq>:
uint32 MCAL_RCC_GetPCLK2_Freq(void){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
//	Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
//	Set and cleared by software to control the division factor of the APB high-speed clock (PCLK2).
	return MCAL_RCC_GetHCLK_Freq() >> PCLKprescaler[((RCC->CFGR >> 11) & 0b111)];
 80006cc:	f7ff ffd4 	bl	8000678 <MCAL_RCC_GetHCLK_Freq>
 80006d0:	4601      	mov	r1, r0
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <MCAL_RCC_GetPCLK2_Freq+0x20>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	0adb      	lsrs	r3, r3, #11
 80006d8:	f003 0307 	and.w	r3, r3, #7
 80006dc:	4a03      	ldr	r2, [pc, #12]	; (80006ec <MCAL_RCC_GetPCLK2_Freq+0x24>)
 80006de:	5cd3      	ldrb	r3, [r2, r3]
 80006e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000
 80006ec:	0800123c 	.word	0x0800123c

080006f0 <MCAL_SPI_Init>:
* @param [in]       - SPIx: Selected SPI 1/2
* @param [in]       - SPI_Config: pointer to SPI_PinConfig_t structure that contains the config parameters
* @retval           - None
* Note              - None
*/
void MCAL_SPI_Init(SPI_TypeDef* SPIx, SPI_PinConfig_t* SPI_Config){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
	GPIO_PinConfig_t PinConfig;
	AFIO_CLK_EN();//AFIO Clock Enable
 80006fa:	4bad      	ldr	r3, [pc, #692]	; (80009b0 <MCAL_SPI_Init+0x2c0>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4aac      	ldr	r2, [pc, #688]	; (80009b0 <MCAL_SPI_Init+0x2c0>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6193      	str	r3, [r2, #24]
	if(SPIx == SPI1){
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4aaa      	ldr	r2, [pc, #680]	; (80009b4 <MCAL_SPI_Init+0x2c4>)
 800070a:	4293      	cmp	r3, r2
 800070c:	f040 80ac 	bne.w	8000868 <MCAL_SPI_Init+0x178>
		SPI1_CLK_EN();
 8000710:	4ba7      	ldr	r3, [pc, #668]	; (80009b0 <MCAL_SPI_Init+0x2c0>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4aa6      	ldr	r2, [pc, #664]	; (80009b0 <MCAL_SPI_Init+0x2c0>)
 8000716:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800071a:	6193      	str	r3, [r2, #24]
		GPIOA_CLK_EN();//GPIOA Clock Enable
 800071c:	4ba4      	ldr	r3, [pc, #656]	; (80009b0 <MCAL_SPI_Init+0x2c0>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4aa3      	ldr	r2, [pc, #652]	; (80009b0 <MCAL_SPI_Init+0x2c0>)
 8000722:	f043 0304 	orr.w	r3, r3, #4
 8000726:	6193      	str	r3, [r2, #24]
		GP_IRQ_SPI_CallBack[0] = SPI_Config->P_IRQ_CallBack;
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	4aa2      	ldr	r2, [pc, #648]	; (80009b8 <MCAL_SPI_Init+0x2c8>)
 800072e:	6013      	str	r3, [r2, #0]
		//PA4 NSS;
		if (SPI_Config->SPI_NSS == SPI_NSS_HARD_MASTER_INPUT) {
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	895b      	ldrh	r3, [r3, #10]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d10a      	bne.n	800074e <MCAL_SPI_Init+0x5e>
			PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000738:	2310      	movs	r3, #16
 800073a:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_AF;
 800073c:	2301      	movs	r3, #1
 800073e:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	4619      	mov	r1, r3
 8000746:	489d      	ldr	r0, [pc, #628]	; (80009bc <MCAL_SPI_Init+0x2cc>)
 8000748:	f7ff fe76 	bl	8000438 <MCAL_GPIO_Init>
 800074c:	e00f      	b.n	800076e <MCAL_SPI_Init+0x7e>
		} else if (SPI_Config->SPI_NSS == SPI_NSS_HARD_MASTER_OUTPUT) {
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	895b      	ldrh	r3, [r3, #10]
 8000752:	2b04      	cmp	r3, #4
 8000754:	d10b      	bne.n	800076e <MCAL_SPI_Init+0x7e>
			PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000756:	2310      	movs	r3, #16
 8000758:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800075a:	2306      	movs	r3, #6
 800075c:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800075e:	2301      	movs	r3, #1
 8000760:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	4619      	mov	r1, r3
 8000768:	4894      	ldr	r0, [pc, #592]	; (80009bc <MCAL_SPI_Init+0x2cc>)
 800076a:	f7ff fe65 	bl	8000438 <MCAL_GPIO_Init>
		}
		//PA5 SCK;
		if (SPI_Config->SPI_DeviceMode == SPI_DeviceMode_MASTER) {
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b04      	cmp	r3, #4
 8000774:	d10c      	bne.n	8000790 <MCAL_SPI_Init+0xa0>
			PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000776:	2320      	movs	r3, #32
 8000778:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800077a:	2306      	movs	r3, #6
 800077c:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800077e:	2301      	movs	r3, #1
 8000780:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	4619      	mov	r1, r3
 8000788:	488c      	ldr	r0, [pc, #560]	; (80009bc <MCAL_SPI_Init+0x2cc>)
 800078a:	f7ff fe55 	bl	8000438 <MCAL_GPIO_Init>
 800078e:	e009      	b.n	80007a4 <MCAL_SPI_Init+0xb4>
		} else {
			PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000790:	2320      	movs	r3, #32
 8000792:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000794:	2301      	movs	r3, #1
 8000796:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	4619      	mov	r1, r3
 800079e:	4887      	ldr	r0, [pc, #540]	; (80009bc <MCAL_SPI_Init+0x2cc>)
 80007a0:	f7ff fe4a 	bl	8000438 <MCAL_GPIO_Init>
		}
		//PA6 MISO;
		if (SPI_Config->SPI_DeviceMode == SPI_DeviceMode_MASTER
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b04      	cmp	r3, #4
 80007aa:	d10e      	bne.n	80007ca <MCAL_SPI_Init+0xda>
				&& SPI_Config->SPI_CommunicationMode == SPI_CommunicationMode_FD) {
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	885b      	ldrh	r3, [r3, #2]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d10a      	bne.n	80007ca <MCAL_SPI_Init+0xda>
			PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80007b4:	2340      	movs	r3, #64	; 0x40
 80007b6:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_AF;
 80007b8:	2301      	movs	r3, #1
 80007ba:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	4619      	mov	r1, r3
 80007c2:	487e      	ldr	r0, [pc, #504]	; (80009bc <MCAL_SPI_Init+0x2cc>)
 80007c4:	f7ff fe38 	bl	8000438 <MCAL_GPIO_Init>
 80007c8:	e028      	b.n	800081c <MCAL_SPI_Init+0x12c>
		} else if (SPI_Config->SPI_DeviceMode == SPI_DeviceMode_SLAVE
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d110      	bne.n	80007f4 <MCAL_SPI_Init+0x104>
				&& SPI_Config->SPI_ConnectionMode == SPI_ConnectionMode_PtoP) {
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	791b      	ldrb	r3, [r3, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d10c      	bne.n	80007f4 <MCAL_SPI_Init+0x104>
			PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80007da:	2340      	movs	r3, #64	; 0x40
 80007dc:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80007de:	2306      	movs	r3, #6
 80007e0:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80007e2:	2301      	movs	r3, #1
 80007e4:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	4619      	mov	r1, r3
 80007ec:	4873      	ldr	r0, [pc, #460]	; (80009bc <MCAL_SPI_Init+0x2cc>)
 80007ee:	f7ff fe23 	bl	8000438 <MCAL_GPIO_Init>
 80007f2:	e013      	b.n	800081c <MCAL_SPI_Init+0x12c>
		} else if (SPI_Config->SPI_DeviceMode == SPI_DeviceMode_SLAVE
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d10f      	bne.n	800081c <MCAL_SPI_Init+0x12c>
				&& SPI_Config->SPI_ConnectionMode
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	791b      	ldrb	r3, [r3, #4]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d10b      	bne.n	800081c <MCAL_SPI_Init+0x12c>
						== SPI_ConnectionMode_MultiSlaves) {
			PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8000804:	2340      	movs	r3, #64	; 0x40
 8000806:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000808:	2307      	movs	r3, #7
 800080a:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800080c:	2301      	movs	r3, #1
 800080e:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4619      	mov	r1, r3
 8000816:	4869      	ldr	r0, [pc, #420]	; (80009bc <MCAL_SPI_Init+0x2cc>)
 8000818:	f7ff fe0e 	bl	8000438 <MCAL_GPIO_Init>
		}
		//PA7 MOSI;
		if (SPI_Config->SPI_DeviceMode == SPI_DeviceMode_MASTER) {
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b04      	cmp	r3, #4
 8000822:	d10c      	bne.n	800083e <MCAL_SPI_Init+0x14e>
			PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000828:	2306      	movs	r3, #6
 800082a:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800082c:	2301      	movs	r3, #1
 800082e:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	4619      	mov	r1, r3
 8000836:	4861      	ldr	r0, [pc, #388]	; (80009bc <MCAL_SPI_Init+0x2cc>)
 8000838:	f7ff fdfe 	bl	8000438 <MCAL_GPIO_Init>
 800083c:	e0d7      	b.n	80009ee <MCAL_SPI_Init+0x2fe>
		} else if (SPI_Config->SPI_DeviceMode == SPI_DeviceMode_SLAVE
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	f040 80d3 	bne.w	80009ee <MCAL_SPI_Init+0x2fe>
				&& SPI_Config->SPI_CommunicationMode == SPI_CommunicationMode_FD) {
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	885b      	ldrh	r3, [r3, #2]
 800084c:	2b00      	cmp	r3, #0
 800084e:	f040 80ce 	bne.w	80009ee <MCAL_SPI_Init+0x2fe>
			PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000852:	2380      	movs	r3, #128	; 0x80
 8000854:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000856:	2301      	movs	r3, #1
 8000858:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	4619      	mov	r1, r3
 8000860:	4856      	ldr	r0, [pc, #344]	; (80009bc <MCAL_SPI_Init+0x2cc>)
 8000862:	f7ff fde9 	bl	8000438 <MCAL_GPIO_Init>
 8000866:	e0c2      	b.n	80009ee <MCAL_SPI_Init+0x2fe>
		}
	}
	else if(SPIx == SPI2){
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a55      	ldr	r2, [pc, #340]	; (80009c0 <MCAL_SPI_Init+0x2d0>)
 800086c:	4293      	cmp	r3, r2
 800086e:	f040 80be 	bne.w	80009ee <MCAL_SPI_Init+0x2fe>
		SPI2_CLK_EN();
 8000872:	4b4f      	ldr	r3, [pc, #316]	; (80009b0 <MCAL_SPI_Init+0x2c0>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	4a4e      	ldr	r2, [pc, #312]	; (80009b0 <MCAL_SPI_Init+0x2c0>)
 8000878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087c:	61d3      	str	r3, [r2, #28]
		GPIOB_CLK_EN();//GPIOB Clock Enable
 800087e:	4b4c      	ldr	r3, [pc, #304]	; (80009b0 <MCAL_SPI_Init+0x2c0>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	4a4b      	ldr	r2, [pc, #300]	; (80009b0 <MCAL_SPI_Init+0x2c0>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	6193      	str	r3, [r2, #24]
		GP_IRQ_SPI_CallBack[1] = SPI_Config->P_IRQ_CallBack;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	691b      	ldr	r3, [r3, #16]
 800088e:	4a4a      	ldr	r2, [pc, #296]	; (80009b8 <MCAL_SPI_Init+0x2c8>)
 8000890:	6053      	str	r3, [r2, #4]
		//PB12 NSS;
		if (SPI_Config->SPI_NSS == SPI_NSS_HARD_MASTER_INPUT) {
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	895b      	ldrh	r3, [r3, #10]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d10b      	bne.n	80008b2 <MCAL_SPI_Init+0x1c2>
			PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 800089a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089e:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_AF;
 80008a0:	2301      	movs	r3, #1
 80008a2:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4619      	mov	r1, r3
 80008aa:	4846      	ldr	r0, [pc, #280]	; (80009c4 <MCAL_SPI_Init+0x2d4>)
 80008ac:	f7ff fdc4 	bl	8000438 <MCAL_GPIO_Init>
 80008b0:	e010      	b.n	80008d4 <MCAL_SPI_Init+0x1e4>
		} else if (SPI_Config->SPI_NSS == SPI_NSS_HARD_MASTER_OUTPUT) {
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	895b      	ldrh	r3, [r3, #10]
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	d10c      	bne.n	80008d4 <MCAL_SPI_Init+0x1e4>
			PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 80008ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008be:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80008c0:	2306      	movs	r3, #6
 80008c2:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80008c4:	2301      	movs	r3, #1
 80008c6:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	4619      	mov	r1, r3
 80008ce:	483d      	ldr	r0, [pc, #244]	; (80009c4 <MCAL_SPI_Init+0x2d4>)
 80008d0:	f7ff fdb2 	bl	8000438 <MCAL_GPIO_Init>
		}
		//PB13 SCK;
		if (SPI_Config->SPI_DeviceMode == SPI_DeviceMode_MASTER) {
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d10d      	bne.n	80008f8 <MCAL_SPI_Init+0x208>
			PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80008dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e0:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80008e2:	2306      	movs	r3, #6
 80008e4:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 80008e6:	2301      	movs	r3, #1
 80008e8:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4619      	mov	r1, r3
 80008f0:	4834      	ldr	r0, [pc, #208]	; (80009c4 <MCAL_SPI_Init+0x2d4>)
 80008f2:	f7ff fda1 	bl	8000438 <MCAL_GPIO_Init>
 80008f6:	e00a      	b.n	800090e <MCAL_SPI_Init+0x21e>
		} else {
			PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80008f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fc:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_AF;
 80008fe:	2301      	movs	r3, #1
 8000900:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	4619      	mov	r1, r3
 8000908:	482e      	ldr	r0, [pc, #184]	; (80009c4 <MCAL_SPI_Init+0x2d4>)
 800090a:	f7ff fd95 	bl	8000438 <MCAL_GPIO_Init>
		}
		//PB14 MISO;
		if (SPI_Config->SPI_DeviceMode == SPI_DeviceMode_MASTER
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b04      	cmp	r3, #4
 8000914:	d10f      	bne.n	8000936 <MCAL_SPI_Init+0x246>
				&& SPI_Config->SPI_CommunicationMode == SPI_CommunicationMode_FD) {
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	885b      	ldrh	r3, [r3, #2]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d10b      	bne.n	8000936 <MCAL_SPI_Init+0x246>
			PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 800091e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000922:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000924:	2301      	movs	r3, #1
 8000926:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4619      	mov	r1, r3
 800092e:	4825      	ldr	r0, [pc, #148]	; (80009c4 <MCAL_SPI_Init+0x2d4>)
 8000930:	f7ff fd82 	bl	8000438 <MCAL_GPIO_Init>
 8000934:	e02a      	b.n	800098c <MCAL_SPI_Init+0x29c>
		} else if (SPI_Config->SPI_DeviceMode == SPI_DeviceMode_SLAVE
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d111      	bne.n	8000962 <MCAL_SPI_Init+0x272>
				&& SPI_Config->SPI_ConnectionMode == SPI_ConnectionMode_PtoP) {
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	791b      	ldrb	r3, [r3, #4]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d10d      	bne.n	8000962 <MCAL_SPI_Init+0x272>
			PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 8000946:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800094a:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800094c:	2306      	movs	r3, #6
 800094e:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000950:	2301      	movs	r3, #1
 8000952:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	4619      	mov	r1, r3
 800095a:	481a      	ldr	r0, [pc, #104]	; (80009c4 <MCAL_SPI_Init+0x2d4>)
 800095c:	f7ff fd6c 	bl	8000438 <MCAL_GPIO_Init>
 8000960:	e014      	b.n	800098c <MCAL_SPI_Init+0x29c>
		} else if (SPI_Config->SPI_DeviceMode == SPI_DeviceMode_SLAVE
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d110      	bne.n	800098c <MCAL_SPI_Init+0x29c>
				&& SPI_Config->SPI_ConnectionMode
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	791b      	ldrb	r3, [r3, #4]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d10c      	bne.n	800098c <MCAL_SPI_Init+0x29c>
						== SPI_ConnectionMode_MultiSlaves) {
			PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 8000972:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000976:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000978:	2307      	movs	r3, #7
 800097a:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800097c:	2301      	movs	r3, #1
 800097e:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	4619      	mov	r1, r3
 8000986:	480f      	ldr	r0, [pc, #60]	; (80009c4 <MCAL_SPI_Init+0x2d4>)
 8000988:	f7ff fd56 	bl	8000438 <MCAL_GPIO_Init>
		}
		//PB15 MOSI;
		if (SPI_Config->SPI_DeviceMode == SPI_DeviceMode_MASTER) {
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b04      	cmp	r3, #4
 8000992:	d119      	bne.n	80009c8 <MCAL_SPI_Init+0x2d8>
			PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000998:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800099a:	2306      	movs	r3, #6
 800099c:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 800099e:	2301      	movs	r3, #1
 80009a0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	4619      	mov	r1, r3
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <MCAL_SPI_Init+0x2d4>)
 80009aa:	f7ff fd45 	bl	8000438 <MCAL_GPIO_Init>
 80009ae:	e01e      	b.n	80009ee <MCAL_SPI_Init+0x2fe>
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40013000 	.word	0x40013000
 80009b8:	2000005c 	.word	0x2000005c
 80009bc:	40010800 	.word	0x40010800
 80009c0:	40003800 	.word	0x40003800
 80009c4:	40010c00 	.word	0x40010c00
		} else if (SPI_Config->SPI_DeviceMode == SPI_DeviceMode_SLAVE
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d10e      	bne.n	80009ee <MCAL_SPI_Init+0x2fe>
				&& SPI_Config->SPI_CommunicationMode == SPI_CommunicationMode_FD) {
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	885b      	ldrh	r3, [r3, #2]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d10a      	bne.n	80009ee <MCAL_SPI_Init+0x2fe>
			PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 80009d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009dc:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_AF;
 80009de:	2301      	movs	r3, #1
 80009e0:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4619      	mov	r1, r3
 80009e8:	4825      	ldr	r0, [pc, #148]	; (8000a80 <MCAL_SPI_Init+0x390>)
 80009ea:	f7ff fd25 	bl	8000438 <MCAL_GPIO_Init>
		}
	}


	SPIx->CR1|= (1<<6)|(SPI_Config->SPI_DeviceMode)|(SPI_Config->SPI_CommunicationMode)|(SPI_Config->SPI_DataSize)|(SPI_Config->SPI_CLKPolarity)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	683a      	ldr	r2, [r7, #0]
 80009f4:	7812      	ldrb	r2, [r2, #0]
 80009f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	4611      	mov	r1, r2
 80009fe:	683a      	ldr	r2, [r7, #0]
 8000a00:	8852      	ldrh	r2, [r2, #2]
 8000a02:	430a      	orrs	r2, r1
 8000a04:	6839      	ldr	r1, [r7, #0]
 8000a06:	88c9      	ldrh	r1, [r1, #6]
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	6839      	ldr	r1, [r7, #0]
 8000a0c:	7a09      	ldrb	r1, [r1, #8]
 8000a0e:	430a      	orrs	r2, r1
			|(SPI_Config->SPI_CLKPhase)|(SPI_Config->SPI_FrameFormat)|(SPI_Config->SPI_Prescaler)|(SPI_Config->SPI_NSS & 0xFF0);
 8000a10:	6839      	ldr	r1, [r7, #0]
 8000a12:	7a49      	ldrb	r1, [r1, #9]
 8000a14:	430a      	orrs	r2, r1
 8000a16:	6839      	ldr	r1, [r7, #0]
 8000a18:	7949      	ldrb	r1, [r1, #5]
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	6839      	ldr	r1, [r7, #0]
 8000a1e:	7b09      	ldrb	r1, [r1, #12]
 8000a20:	4311      	orrs	r1, r2
 8000a22:	683a      	ldr	r2, [r7, #0]
 8000a24:	8952      	ldrh	r2, [r2, #10]
 8000a26:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000a2a:	430a      	orrs	r2, r1
	SPIx->CR1|= (1<<6)|(SPI_Config->SPI_DeviceMode)|(SPI_Config->SPI_CommunicationMode)|(SPI_Config->SPI_DataSize)|(SPI_Config->SPI_CLKPolarity)
 8000a2c:	431a      	orrs	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	601a      	str	r2, [r3, #0]
	SPIx->CR2|= (SPI_Config->SPI_IRQ_ENABLE)|(SPI_Config->SPI_NSS & 0xF);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	683a      	ldr	r2, [r7, #0]
 8000a38:	7b52      	ldrb	r2, [r2, #13]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	8952      	ldrh	r2, [r2, #10]
 8000a40:	f002 020f 	and.w	r2, r2, #15
 8000a44:	430a      	orrs	r2, r1
 8000a46:	431a      	orrs	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	605a      	str	r2, [r3, #4]
	if(SPIx == SPI1){NVIC_IRQ35_SPI1_Enable;}
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <MCAL_SPI_Init+0x394>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d106      	bne.n	8000a62 <MCAL_SPI_Init+0x372>
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MCAL_SPI_Init+0x398>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <MCAL_SPI_Init+0x398>)
 8000a5a:	f043 0308 	orr.w	r3, r3, #8
 8000a5e:	6013      	str	r3, [r2, #0]
	else if(SPIx == SPI2){NVIC_IRQ36_SPI2_Enable;}
}
 8000a60:	e009      	b.n	8000a76 <MCAL_SPI_Init+0x386>
	else if(SPIx == SPI2){NVIC_IRQ36_SPI2_Enable;}
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a09      	ldr	r2, [pc, #36]	; (8000a8c <MCAL_SPI_Init+0x39c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d105      	bne.n	8000a76 <MCAL_SPI_Init+0x386>
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <MCAL_SPI_Init+0x398>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a06      	ldr	r2, [pc, #24]	; (8000a88 <MCAL_SPI_Init+0x398>)
 8000a70:	f043 0310 	orr.w	r3, r3, #16
 8000a74:	6013      	str	r3, [r2, #0]
}
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40010c00 	.word	0x40010c00
 8000a84:	40013000 	.word	0x40013000
 8000a88:	e000e104 	.word	0xe000e104
 8000a8c:	40003800 	.word	0x40003800

08000a90 <MCAL_SPI_Send_Read>:
* @param [in]       - Data: Pointer To data to be Sent
* @param [in]       - PollingEN: enum to specify Polling For Data Sending
* @retval           - None
* Note              - None
*/
void MCAL_SPI_Send_Read(SPI_TypeDef* SPIx, uint16* Data, enum Polling_Mechanism PollingEN){
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	71fb      	strb	r3, [r7, #7]
	if(PollingEN == Enable){
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d106      	bne.n	8000ab2 <MCAL_SPI_Send_Read+0x22>
		while(!( SPIx->SR & (1<<1)));
 8000aa4:	bf00      	nop
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d0f9      	beq.n	8000aa6 <MCAL_SPI_Send_Read+0x16>
	}
	SPIx->DR = (*Data) ;
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	60da      	str	r2, [r3, #12]
	if(PollingEN == Enable){
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d106      	bne.n	8000ad0 <MCAL_SPI_Send_Read+0x40>
		while(!( SPIx->SR & (1<<0)));
 8000ac2:	bf00      	nop
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d0f9      	beq.n	8000ac4 <MCAL_SPI_Send_Read+0x34>
	}
	*((uint16*) Data) = SPIx->DR;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	801a      	strh	r2, [r3, #0]
}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <SPI1_IRQHandler>:

void MCAL_SPI_Wait_TC(SPI_TypeDef* SPIx){
	while(!(SPIx->SR & (1<<1)));
}

void SPI1_IRQHandler(void){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	GP_IRQ_SPI_CallBack[0]();
 8000ae8:	4b02      	ldr	r3, [pc, #8]	; (8000af4 <SPI1_IRQHandler+0x10>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4798      	blx	r3
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000005c 	.word	0x2000005c

08000af8 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	GP_IRQ_SPI_CallBack[1]();
 8000afc:	4b02      	ldr	r3, [pc, #8]	; (8000b08 <SPI2_IRQHandler+0x10>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	4798      	blx	r3
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000005c 	.word	0x2000005c

08000b0c <MCAL_UART_Init>:
* @param [in]       - USARTx: Selected USART 1/2/3
* @param [in]       - USART_Config: pointer to USART_PinConfig_t structure that contains the config parameters
* @retval           - None
* Note              - None
*/
void MCAL_UART_Init(USART_TypeDef* USARTx, USART_PinConfig_t* USART_Config){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
	uint32 PCLK;
	GPIO_PinConfig_t PinConfig;
	AFIO_CLK_EN();//AFIO Clock Enable
 8000b16:	4b66      	ldr	r3, [pc, #408]	; (8000cb0 <MCAL_UART_Init+0x1a4>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	4a65      	ldr	r2, [pc, #404]	; (8000cb0 <MCAL_UART_Init+0x1a4>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6193      	str	r3, [r2, #24]
	GPIOA_CLK_EN();//GPIOA Clock Enable
 8000b22:	4b63      	ldr	r3, [pc, #396]	; (8000cb0 <MCAL_UART_Init+0x1a4>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	4a62      	ldr	r2, [pc, #392]	; (8000cb0 <MCAL_UART_Init+0x1a4>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6193      	str	r3, [r2, #24]
	if(USARTx == USART1){USART1_CLK_EN();PCLK = MCAL_RCC_GetPCLK2_Freq(); USARTx_Word_Length_Parity[0] = USART_Config->USART_Word_Length | USART_Config->USART_Parity;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a60      	ldr	r2, [pc, #384]	; (8000cb4 <MCAL_UART_Init+0x1a8>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d15e      	bne.n	8000bf4 <MCAL_UART_Init+0xe8>
 8000b36:	4b5e      	ldr	r3, [pc, #376]	; (8000cb0 <MCAL_UART_Init+0x1a4>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	4a5d      	ldr	r2, [pc, #372]	; (8000cb0 <MCAL_UART_Init+0x1a4>)
 8000b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b40:	6193      	str	r3, [r2, #24]
 8000b42:	f7ff fdc1 	bl	80006c8 <MCAL_RCC_GetPCLK2_Freq>
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	891a      	ldrh	r2, [r3, #8]
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	895b      	ldrh	r3, [r3, #10]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b58      	ldr	r3, [pc, #352]	; (8000cb8 <MCAL_UART_Init+0x1ac>)
 8000b56:	801a      	strh	r2, [r3, #0]
		GP_IRQ_UART_CallBack[0] = USART_Config->P_IRQ_CallBack;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	695b      	ldr	r3, [r3, #20]
 8000b5c:	4a57      	ldr	r2, [pc, #348]	; (8000cbc <MCAL_UART_Init+0x1b0>)
 8000b5e:	6013      	str	r3, [r2, #0]
		if (USART_Config->USART_Mode & USART_Mode_TX) {
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	f003 0308 	and.w	r3, r3, #8
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d00c      	beq.n	8000b86 <MCAL_UART_Init+0x7a>
			//PA9 TX;
			PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 8000b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b70:	813b      	strh	r3, [r7, #8]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000b72:	2306      	movs	r3, #6
 8000b74:	72bb      	strb	r3, [r7, #10]
			PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000b76:	2301      	movs	r3, #1
 8000b78:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	4619      	mov	r1, r3
 8000b80:	484f      	ldr	r0, [pc, #316]	; (8000cc0 <MCAL_UART_Init+0x1b4>)
 8000b82:	f7ff fc59 	bl	8000438 <MCAL_GPIO_Init>
		}
		if (USART_Config->USART_Mode & USART_Mode_RX) {
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d00a      	beq.n	8000ba8 <MCAL_UART_Init+0x9c>
			//PA10 RX;
			PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 8000b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b96:	813b      	strh	r3, [r7, #8]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	72bb      	strb	r3, [r7, #10]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4847      	ldr	r0, [pc, #284]	; (8000cc0 <MCAL_UART_Init+0x1b4>)
 8000ba4:	f7ff fc48 	bl	8000438 <MCAL_GPIO_Init>
		}
		if (USART_Config->USART_Mode & USART_FlowCTL_RTS) {
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d00c      	beq.n	8000bce <MCAL_UART_Init+0xc2>
			//PA12 RTS;
			PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb8:	813b      	strh	r3, [r7, #8]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000bba:	2306      	movs	r3, #6
 8000bbc:	72bb      	strb	r3, [r7, #10]
			PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	483d      	ldr	r0, [pc, #244]	; (8000cc0 <MCAL_UART_Init+0x1b4>)
 8000bca:	f7ff fc35 	bl	8000438 <MCAL_GPIO_Init>
		}
		if (USART_Config->USART_Mode & USART_FlowCTL_CTS) {
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 80dd 	beq.w	8000d96 <MCAL_UART_Init+0x28a>
			//PA1 CTS;
			PinConfig.GPIO_PinNumber = GPIO_PIN_11;
 8000bdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000be0:	813b      	strh	r3, [r7, #8]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000be2:	2301      	movs	r3, #1
 8000be4:	72bb      	strb	r3, [r7, #10]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	4619      	mov	r1, r3
 8000bec:	4834      	ldr	r0, [pc, #208]	; (8000cc0 <MCAL_UART_Init+0x1b4>)
 8000bee:	f7ff fc23 	bl	8000438 <MCAL_GPIO_Init>
 8000bf2:	e0d0      	b.n	8000d96 <MCAL_UART_Init+0x28a>
	}

	}
	else if(USARTx == USART2){USART2_CLK_EN();PCLK = MCAL_RCC_GetPCLK1_Freq(); USARTx_Word_Length_Parity[1] = USART_Config->USART_Word_Length | USART_Config->USART_Parity;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a33      	ldr	r2, [pc, #204]	; (8000cc4 <MCAL_UART_Init+0x1b8>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d165      	bne.n	8000cc8 <MCAL_UART_Init+0x1bc>
 8000bfc:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <MCAL_UART_Init+0x1a4>)
 8000bfe:	69db      	ldr	r3, [r3, #28]
 8000c00:	4a2b      	ldr	r2, [pc, #172]	; (8000cb0 <MCAL_UART_Init+0x1a4>)
 8000c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c06:	61d3      	str	r3, [r2, #28]
 8000c08:	f7ff fd4a 	bl	80006a0 <MCAL_RCC_GetPCLK1_Freq>
 8000c0c:	60f8      	str	r0, [r7, #12]
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	891a      	ldrh	r2, [r3, #8]
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	895b      	ldrh	r3, [r3, #10]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <MCAL_UART_Init+0x1ac>)
 8000c1c:	805a      	strh	r2, [r3, #2]
		GP_IRQ_UART_CallBack[1] = USART_Config->P_IRQ_CallBack;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	4a26      	ldr	r2, [pc, #152]	; (8000cbc <MCAL_UART_Init+0x1b0>)
 8000c24:	6053      	str	r3, [r2, #4]
		if (USART_Config->USART_Mode & USART_Mode_TX) {
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	f003 0308 	and.w	r3, r3, #8
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00b      	beq.n	8000c4a <MCAL_UART_Init+0x13e>
			//PA2 TX;
			PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 8000c32:	2304      	movs	r3, #4
 8000c34:	813b      	strh	r3, [r7, #8]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000c36:	2306      	movs	r3, #6
 8000c38:	72bb      	strb	r3, [r7, #10]
			PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	4619      	mov	r1, r3
 8000c44:	481e      	ldr	r0, [pc, #120]	; (8000cc0 <MCAL_UART_Init+0x1b4>)
 8000c46:	f7ff fbf7 	bl	8000438 <MCAL_GPIO_Init>
		}
		if (USART_Config->USART_Mode & USART_Mode_RX) {
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d009      	beq.n	8000c6a <MCAL_UART_Init+0x15e>
			//PA3 RX;
			PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 8000c56:	2308      	movs	r3, #8
 8000c58:	813b      	strh	r3, [r7, #8]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	72bb      	strb	r3, [r7, #10]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	4619      	mov	r1, r3
 8000c64:	4816      	ldr	r0, [pc, #88]	; (8000cc0 <MCAL_UART_Init+0x1b4>)
 8000c66:	f7ff fbe7 	bl	8000438 <MCAL_GPIO_Init>
		}
		if (USART_Config->USART_Mode & USART_FlowCTL_RTS) {
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00b      	beq.n	8000c8e <MCAL_UART_Init+0x182>
			//PA1 RTS;
			PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 8000c76:	2302      	movs	r3, #2
 8000c78:	813b      	strh	r3, [r7, #8]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000c7a:	2306      	movs	r3, #6
 8000c7c:	72bb      	strb	r3, [r7, #10]
			PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	4619      	mov	r1, r3
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <MCAL_UART_Init+0x1b4>)
 8000c8a:	f7ff fbd5 	bl	8000438 <MCAL_GPIO_Init>
		}
		if (USART_Config->USART_Mode & USART_FlowCTL_CTS) {
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d07d      	beq.n	8000d96 <MCAL_UART_Init+0x28a>
			//PA0 CTS;
			PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	813b      	strh	r3, [r7, #8]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	72bb      	strb	r3, [r7, #10]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MCAL_UART_Init+0x1b4>)
 8000caa:	f7ff fbc5 	bl	8000438 <MCAL_GPIO_Init>
 8000cae:	e072      	b.n	8000d96 <MCAL_UART_Init+0x28a>
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40013800 	.word	0x40013800
 8000cb8:	20000070 	.word	0x20000070
 8000cbc:	20000064 	.word	0x20000064
 8000cc0:	40010800 	.word	0x40010800
 8000cc4:	40004400 	.word	0x40004400
		}

	}
	else if(USARTx == USART3){USART3_CLK_EN();PCLK = MCAL_RCC_GetPCLK1_Freq(); USARTx_Word_Length_Parity[2] = USART_Config->USART_Word_Length | USART_Config->USART_Parity;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a76      	ldr	r2, [pc, #472]	; (8000ea4 <MCAL_UART_Init+0x398>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d162      	bne.n	8000d96 <MCAL_UART_Init+0x28a>
 8000cd0:	4b75      	ldr	r3, [pc, #468]	; (8000ea8 <MCAL_UART_Init+0x39c>)
 8000cd2:	69db      	ldr	r3, [r3, #28]
 8000cd4:	4a74      	ldr	r2, [pc, #464]	; (8000ea8 <MCAL_UART_Init+0x39c>)
 8000cd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cda:	61d3      	str	r3, [r2, #28]
 8000cdc:	f7ff fce0 	bl	80006a0 <MCAL_RCC_GetPCLK1_Freq>
 8000ce0:	60f8      	str	r0, [r7, #12]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	891a      	ldrh	r2, [r3, #8]
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	895b      	ldrh	r3, [r3, #10]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	4b6f      	ldr	r3, [pc, #444]	; (8000eac <MCAL_UART_Init+0x3a0>)
 8000cf0:	809a      	strh	r2, [r3, #4]
		GP_IRQ_UART_CallBack[2] = USART_Config->P_IRQ_CallBack;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	4a6e      	ldr	r2, [pc, #440]	; (8000eb0 <MCAL_UART_Init+0x3a4>)
 8000cf8:	6093      	str	r3, [r2, #8]
		GPIOB_CLK_EN();//GPIOB Clock Enable
 8000cfa:	4b6b      	ldr	r3, [pc, #428]	; (8000ea8 <MCAL_UART_Init+0x39c>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	4a6a      	ldr	r2, [pc, #424]	; (8000ea8 <MCAL_UART_Init+0x39c>)
 8000d00:	f043 0308 	orr.w	r3, r3, #8
 8000d04:	6193      	str	r3, [r2, #24]
		if (USART_Config->USART_Mode & USART_Mode_TX) {
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d00c      	beq.n	8000d2c <MCAL_UART_Init+0x220>
			//PB10 TX;
			PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 8000d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d16:	813b      	strh	r3, [r7, #8]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000d18:	2306      	movs	r3, #6
 8000d1a:	72bb      	strb	r3, [r7, #10]
			PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	4619      	mov	r1, r3
 8000d26:	4863      	ldr	r0, [pc, #396]	; (8000eb4 <MCAL_UART_Init+0x3a8>)
 8000d28:	f7ff fb86 	bl	8000438 <MCAL_GPIO_Init>
		}
		if (USART_Config->USART_Mode & USART_Mode_RX) {
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d00a      	beq.n	8000d4e <MCAL_UART_Init+0x242>
			//PB11 RX;
			PinConfig.GPIO_PinNumber = GPIO_PIN_11;
 8000d38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d3c:	813b      	strh	r3, [r7, #8]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	72bb      	strb	r3, [r7, #10]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	4619      	mov	r1, r3
 8000d48:	485a      	ldr	r0, [pc, #360]	; (8000eb4 <MCAL_UART_Init+0x3a8>)
 8000d4a:	f7ff fb75 	bl	8000438 <MCAL_GPIO_Init>
		}
		if (USART_Config->USART_Mode & USART_FlowCTL_RTS) {
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d00c      	beq.n	8000d74 <MCAL_UART_Init+0x268>
			//PA14 RTS;
			PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 8000d5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d5e:	813b      	strh	r3, [r7, #8]
			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000d60:	2306      	movs	r3, #6
 8000d62:	72bb      	strb	r3, [r7, #10]
			PinConfig.GPIO_Output_Speed = GPIO_Output_Speed_10M;
 8000d64:	2301      	movs	r3, #1
 8000d66:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4852      	ldr	r0, [pc, #328]	; (8000eb8 <MCAL_UART_Init+0x3ac>)
 8000d70:	f7ff fb62 	bl	8000438 <MCAL_GPIO_Init>
		}
		if (USART_Config->USART_Mode & USART_FlowCTL_CTS) {
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d00a      	beq.n	8000d96 <MCAL_UART_Init+0x28a>
			//PB13 CTS;
			PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000d80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d84:	813b      	strh	r3, [r7, #8]
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000d86:	2301      	movs	r3, #1
 8000d88:	72bb      	strb	r3, [r7, #10]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4848      	ldr	r0, [pc, #288]	; (8000eb4 <MCAL_UART_Init+0x3a8>)
 8000d92:	f7ff fb51 	bl	8000438 <MCAL_GPIO_Init>
		}

	}

	USARTx->CR1|= (1<<13)|(USART_Config->USART_Mode)|(USART_Config->USART_Parity);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	7812      	ldrb	r2, [r2, #0]
 8000d9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000da2:	6839      	ldr	r1, [r7, #0]
 8000da4:	8949      	ldrh	r1, [r1, #10]
 8000da6:	430a      	orrs	r2, r1
 8000da8:	431a      	orrs	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	60da      	str	r2, [r3, #12]
	USARTx->CR2|= (USART_Config->USART_StopBits);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	8992      	ldrh	r2, [r2, #12]
 8000db6:	431a      	orrs	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	611a      	str	r2, [r3, #16]
	USARTx->CR3|= (USART_Config->USART_FlowCTL);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	89d2      	ldrh	r2, [r2, #14]
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	615a      	str	r2, [r3, #20]
	USARTx->BRR = USART_BRR_Register( PCLK , USART_Config->USART_BaudRate );
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	68fa      	ldr	r2, [r7, #12]
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	0119      	lsls	r1, r3, #4
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	009a      	lsls	r2, r3, #2
 8000de2:	441a      	add	r2, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	fbb2 f2f3 	udiv	r2, r2, r3
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	011b      	lsls	r3, r3, #4
 8000df4:	68f8      	ldr	r0, [r7, #12]
 8000df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dfa:	2064      	movs	r0, #100	; 0x64
 8000dfc:	fb00 f303 	mul.w	r3, r0, r3
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	4a2d      	ldr	r2, [pc, #180]	; (8000ebc <MCAL_UART_Init+0x3b0>)
 8000e06:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0a:	095b      	lsrs	r3, r3, #5
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	ea41 0203 	orr.w	r2, r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	609a      	str	r2, [r3, #8]
	if(USART_Config->USART_IRQ_Enable != USART_IRQ_Enable_None){
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	691b      	ldr	r3, [r3, #16]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d03c      	beq.n	8000e9a <MCAL_UART_Init+0x38e>
		USARTx->CR1|= (USART_Config->USART_IRQ_Enable & 0x1FF);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60da      	str	r2, [r3, #12]
		USARTx->CR2|= ((USART_Config->USART_IRQ_Enable >> 10) & 0x7F);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	691a      	ldr	r2, [r3, #16]
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	0a9b      	lsrs	r3, r3, #10
 8000e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e40:	431a      	orrs	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	611a      	str	r2, [r3, #16]
		USARTx->CR3|= ((USART_Config->USART_IRQ_Enable >> 20) & 0x7FF);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	695a      	ldr	r2, [r3, #20]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	0d1b      	lsrs	r3, r3, #20
 8000e50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e54:	431a      	orrs	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	615a      	str	r2, [r3, #20]

		if(USARTx == USART1){NVIC_IRQ37_USART1_Enable;}
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a18      	ldr	r2, [pc, #96]	; (8000ec0 <MCAL_UART_Init+0x3b4>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d106      	bne.n	8000e70 <MCAL_UART_Init+0x364>
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MCAL_UART_Init+0x3b8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <MCAL_UART_Init+0x3b8>)
 8000e68:	f043 0320 	orr.w	r3, r3, #32
 8000e6c:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART2){NVIC_IRQ38_USART2_Enable;}
		else if(USARTx == USART3){NVIC_IRQ39_USART3_Enable;}
	}
}
 8000e6e:	e014      	b.n	8000e9a <MCAL_UART_Init+0x38e>
		else if(USARTx == USART2){NVIC_IRQ38_USART2_Enable;}
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a15      	ldr	r2, [pc, #84]	; (8000ec8 <MCAL_UART_Init+0x3bc>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d106      	bne.n	8000e86 <MCAL_UART_Init+0x37a>
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MCAL_UART_Init+0x3b8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a11      	ldr	r2, [pc, #68]	; (8000ec4 <MCAL_UART_Init+0x3b8>)
 8000e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	e009      	b.n	8000e9a <MCAL_UART_Init+0x38e>
		else if(USARTx == USART3){NVIC_IRQ39_USART3_Enable;}
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <MCAL_UART_Init+0x398>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d105      	bne.n	8000e9a <MCAL_UART_Init+0x38e>
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <MCAL_UART_Init+0x3b8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a0c      	ldr	r2, [pc, #48]	; (8000ec4 <MCAL_UART_Init+0x3b8>)
 8000e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e98:	6013      	str	r3, [r2, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40004800 	.word	0x40004800
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	20000070 	.word	0x20000070
 8000eb0:	20000064 	.word	0x20000064
 8000eb4:	40010c00 	.word	0x40010c00
 8000eb8:	40010800 	.word	0x40010800
 8000ebc:	51eb851f 	.word	0x51eb851f
 8000ec0:	40013800 	.word	0x40013800
 8000ec4:	e000e104 	.word	0xe000e104
 8000ec8:	40004400 	.word	0x40004400

08000ecc <MCAL_UART_Send>:
* @param [in]       - Data: Pointer To data to be Sent
* @param [in]       - PollingEN: enum to specify Polling For Data Sending
* @retval           - None
* Note              - None
*/
void MCAL_UART_Send(USART_TypeDef* USARTx, uint16* Data, enum Polling_Mechanism PollingEN){
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	71fb      	strb	r3, [r7, #7]
	if(PollingEN == Enable){
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d106      	bne.n	8000eee <MCAL_UART_Send+0x22>
		while(!( USARTx->SR & (1<<7)));
 8000ee0:	bf00      	nop
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0f9      	beq.n	8000ee2 <MCAL_UART_Send+0x16>
	}
	uint16* Word_Length_Parity;
	if(USARTx == USART1){Word_Length_Parity = &USARTx_Word_Length_Parity[0];}
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <MCAL_UART_Send+0x78>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d102      	bne.n	8000efc <MCAL_UART_Send+0x30>
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <MCAL_UART_Send+0x7c>)
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	e00c      	b.n	8000f16 <MCAL_UART_Send+0x4a>
	else if(USARTx == USART2){Word_Length_Parity = &USARTx_Word_Length_Parity[1];}
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4a13      	ldr	r2, [pc, #76]	; (8000f4c <MCAL_UART_Send+0x80>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d102      	bne.n	8000f0a <MCAL_UART_Send+0x3e>
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <MCAL_UART_Send+0x84>)
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	e005      	b.n	8000f16 <MCAL_UART_Send+0x4a>
	else if(USARTx == USART3){Word_Length_Parity = &USARTx_Word_Length_Parity[2];}
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4a11      	ldr	r2, [pc, #68]	; (8000f54 <MCAL_UART_Send+0x88>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d101      	bne.n	8000f16 <MCAL_UART_Send+0x4a>
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MCAL_UART_Send+0x8c>)
 8000f14:	617b      	str	r3, [r7, #20]

	if(*Word_Length_Parity & USART_Word_Length_9B){
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d006      	beq.n	8000f30 <MCAL_UART_Send+0x64>
		USARTx->DR = (*Data & (uint16)0x1FF);
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	605a      	str	r2, [r3, #4]
	}
	else{
		USARTx->DR = (*Data & (uint16)0xFF);
	}
}
 8000f2e:	e004      	b.n	8000f3a <MCAL_UART_Send+0x6e>
		USARTx->DR = (*Data & (uint16)0xFF);
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	605a      	str	r2, [r3, #4]
}
 8000f3a:	bf00      	nop
 8000f3c:	371c      	adds	r7, #28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	40013800 	.word	0x40013800
 8000f48:	20000070 	.word	0x20000070
 8000f4c:	40004400 	.word	0x40004400
 8000f50:	20000072 	.word	0x20000072
 8000f54:	40004800 	.word	0x40004800
 8000f58:	20000074 	.word	0x20000074

08000f5c <MCAL_USART_Read>:
* @param [in]       - Data: Pointer To data to be Sent
* @param [in]       - PollingEN: enum to specify Polling For Data Sending
* @retval           - None
* Note              - None
*/
void MCAL_USART_Read(USART_TypeDef* USARTx, uint16* Data, enum Polling_Mechanism PollingEN){
 8000f5c:	b480      	push	{r7}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	4613      	mov	r3, r2
 8000f68:	71fb      	strb	r3, [r7, #7]
	if(PollingEN == Enable){
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d106      	bne.n	8000f7e <MCAL_USART_Read+0x22>
		while(!( USARTx->SR & (1<<5)));
 8000f70:	bf00      	nop
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0320 	and.w	r3, r3, #32
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0f9      	beq.n	8000f72 <MCAL_USART_Read+0x16>
	}
	uint16* Word_Length_Parity;
	if(USARTx == USART1){Word_Length_Parity = &USARTx_Word_Length_Parity[0];}
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4a23      	ldr	r2, [pc, #140]	; (8001010 <MCAL_USART_Read+0xb4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d102      	bne.n	8000f8c <MCAL_USART_Read+0x30>
 8000f86:	4b23      	ldr	r3, [pc, #140]	; (8001014 <MCAL_USART_Read+0xb8>)
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	e00c      	b.n	8000fa6 <MCAL_USART_Read+0x4a>
	else if(USARTx == USART2){Word_Length_Parity = &USARTx_Word_Length_Parity[1];}
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4a22      	ldr	r2, [pc, #136]	; (8001018 <MCAL_USART_Read+0xbc>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d102      	bne.n	8000f9a <MCAL_USART_Read+0x3e>
 8000f94:	4b21      	ldr	r3, [pc, #132]	; (800101c <MCAL_USART_Read+0xc0>)
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	e005      	b.n	8000fa6 <MCAL_USART_Read+0x4a>
	else if(USARTx == USART3){Word_Length_Parity = &USARTx_Word_Length_Parity[2];}
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4a20      	ldr	r2, [pc, #128]	; (8001020 <MCAL_USART_Read+0xc4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <MCAL_USART_Read+0x4a>
 8000fa2:	4b20      	ldr	r3, [pc, #128]	; (8001024 <MCAL_USART_Read+0xc8>)
 8000fa4:	617b      	str	r3, [r7, #20]

	if(*Word_Length_Parity & USART_Word_Length_9B){
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d013      	beq.n	8000fda <MCAL_USART_Read+0x7e>
		if(*Word_Length_Parity & USART_Parity_Even){
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <MCAL_USART_Read+0x72>
			*((uint16*) Data) = USARTx->DR & 0xFF;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	801a      	strh	r2, [r3, #0]
		}
		else{
			*((uint16*) Data) = USARTx->DR & 0xFF;
		}
	}
}
 8000fcc:	e01b      	b.n	8001006 <MCAL_USART_Read+0xaa>
			*((uint16*) Data) = USARTx->DR;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	801a      	strh	r2, [r3, #0]
}
 8000fd8:	e015      	b.n	8001006 <MCAL_USART_Read+0xaa>
		if(*Word_Length_Parity & USART_Parity_Even){
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d008      	beq.n	8000ff8 <MCAL_USART_Read+0x9c>
			*((uint16*) Data) = USARTx->DR & 0x7F;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	801a      	strh	r2, [r3, #0]
}
 8000ff6:	e006      	b.n	8001006 <MCAL_USART_Read+0xaa>
			*((uint16*) Data) = USARTx->DR & 0xFF;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	b29a      	uxth	r2, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	801a      	strh	r2, [r3, #0]
}
 8001006:	bf00      	nop
 8001008:	371c      	adds	r7, #28
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	40013800 	.word	0x40013800
 8001014:	20000070 	.word	0x20000070
 8001018:	40004400 	.word	0x40004400
 800101c:	20000072 	.word	0x20000072
 8001020:	40004800 	.word	0x40004800
 8001024:	20000074 	.word	0x20000074

08001028 <USART1_IRQHandler>:
*/
void MCAL_UART_Wait_TC(USART_TypeDef* USARTx){
	while(!(USARTx->SR & (1<<6)));
}

void USART1_IRQHandler(void){
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	GP_IRQ_UART_CallBack[0]();
 800102c:	4b02      	ldr	r3, [pc, #8]	; (8001038 <USART1_IRQHandler+0x10>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4798      	blx	r3
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000064 	.word	0x20000064

0800103c <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	GP_IRQ_UART_CallBack[1]();
 8001040:	4b02      	ldr	r3, [pc, #8]	; (800104c <USART2_IRQHandler+0x10>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	4798      	blx	r3
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000064 	.word	0x20000064

08001050 <USART3_IRQHandler>:
void USART3_IRQHandler(void){
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	GP_IRQ_UART_CallBack[2]();
 8001054:	4b02      	ldr	r3, [pc, #8]	; (8001060 <USART3_IRQHandler+0x10>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	4798      	blx	r3
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000064 	.word	0x20000064

08001064 <MyUARTIRQHandler>:
#include "SPI_Stm32F103x8.h"

#define frequency 8000000UL
#define SPI_Master_Test
	uint8 Character;
void MyUARTIRQHandler(void){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	if (USART_Rcomplete(USART1)) {
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MyUARTIRQHandler+0x54>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	f003 0320 	and.w	r3, r3, #32
 8001070:	2b00      	cmp	r3, #0
 8001072:	d01e      	beq.n	80010b2 <MyUARTIRQHandler+0x4e>
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <MyUARTIRQHandler+0x54>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0320 	and.w	r3, r3, #32
 800107c:	2b00      	cmp	r3, #0
 800107e:	d018      	beq.n	80010b2 <MyUARTIRQHandler+0x4e>
		MCAL_USART_Read(USART1, (uint16*) &(Character), Disable);
 8001080:	2200      	movs	r2, #0
 8001082:	490e      	ldr	r1, [pc, #56]	; (80010bc <MyUARTIRQHandler+0x58>)
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MyUARTIRQHandler+0x54>)
 8001086:	f7ff ff69 	bl	8000f5c <MCAL_USART_Read>
		MCAL_UART_Send(USART1, (uint16*) &(Character), Enable);
 800108a:	2201      	movs	r2, #1
 800108c:	490b      	ldr	r1, [pc, #44]	; (80010bc <MyUARTIRQHandler+0x58>)
 800108e:	480a      	ldr	r0, [pc, #40]	; (80010b8 <MyUARTIRQHandler+0x54>)
 8001090:	f7ff ff1c 	bl	8000ecc <MCAL_UART_Send>
		MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_LOW);
 8001094:	2200      	movs	r2, #0
 8001096:	2110      	movs	r1, #16
 8001098:	4809      	ldr	r0, [pc, #36]	; (80010c0 <MyUARTIRQHandler+0x5c>)
 800109a:	f7ff fa83 	bl	80005a4 <MCAL_GPIO_WritePin>
		MCAL_SPI_Send_Read(SPI1, (uint16*) &(Character), Enable);
 800109e:	2201      	movs	r2, #1
 80010a0:	4906      	ldr	r1, [pc, #24]	; (80010bc <MyUARTIRQHandler+0x58>)
 80010a2:	4808      	ldr	r0, [pc, #32]	; (80010c4 <MyUARTIRQHandler+0x60>)
 80010a4:	f7ff fcf4 	bl	8000a90 <MCAL_SPI_Send_Read>
		MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_HIGH);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2110      	movs	r1, #16
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MyUARTIRQHandler+0x5c>)
 80010ae:	f7ff fa79 	bl	80005a4 <MCAL_GPIO_WritePin>
	}
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40013800 	.word	0x40013800
 80010bc:	20000076 	.word	0x20000076
 80010c0:	40010800 	.word	0x40010800
 80010c4:	40013000 	.word	0x40013000

080010c8 <main>:
	for(i=0;i<j;i++);
}

#ifdef SPI_Master_Test
int main(void)
{	USART_PinConfig_t USART_Config = {USART_Mode_RX_TX, USART_BaudRate_115200,USART_Word_Length_8B, USART_Parity_Disabled, USART_StopBits_1, USART_FlowCTL_None, USART_IRQ_Enable_RXNE, MyUARTIRQHandler};
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <main+0x70>)
 80010d0:	f107 0418 	add.w	r4, r7, #24
 80010d4:	461d      	mov	r5, r3
 80010d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010de:	e884 0003 	stmia.w	r4, {r0, r1}
	MCAL_UART_Init(USART1, &USART_Config);
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	4619      	mov	r1, r3
 80010e8:	4814      	ldr	r0, [pc, #80]	; (800113c <main+0x74>)
 80010ea:	f7ff fd0f 	bl	8000b0c <MCAL_UART_Init>
	SPI_PinConfig_t SPI_Config = {SPI_DeviceMode_MASTER, SPI_CommunicationMode_FD, SPI_ConnectionMode_PtoP, SPI_FrameFormat_MSBFirst, SPI_DataSize_8bit, SPI_CLKPolarity_IDLE_HIGH, SPI_CLKPhase_2nd_CLKtran, SPI_NSS_SOFT_MASTER, SPI_Prescaler_fPCLK_8, SPI_IRQ_ENABLE_None};
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
 80010fc:	2304      	movs	r3, #4
 80010fe:	713b      	strb	r3, [r7, #4]
 8001100:	2302      	movs	r3, #2
 8001102:	733b      	strb	r3, [r7, #12]
 8001104:	2301      	movs	r3, #1
 8001106:	737b      	strb	r3, [r7, #13]
 8001108:	f44f 7340 	mov.w	r3, #768	; 0x300
 800110c:	81fb      	strh	r3, [r7, #14]
 800110e:	2310      	movs	r3, #16
 8001110:	743b      	strb	r3, [r7, #16]
	MCAL_SPI_Init(SPI1, &SPI_Config);
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4619      	mov	r1, r3
 8001116:	480a      	ldr	r0, [pc, #40]	; (8001140 <main+0x78>)
 8001118:	f7ff faea 	bl	80006f0 <MCAL_SPI_Init>
	GPIO_PinConfig_t PA4 = {GPIO_PIN_4,GPIO_MODE_OUTPUT_PP,GPIO_Output_Speed_10M};
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <main+0x7c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	603b      	str	r3, [r7, #0]
	MCAL_GPIO_Init(GPIOA,&PA4);
 8001122:	463b      	mov	r3, r7
 8001124:	4619      	mov	r1, r3
 8001126:	4808      	ldr	r0, [pc, #32]	; (8001148 <main+0x80>)
 8001128:	f7ff f986 	bl	8000438 <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_HIGH);
 800112c:	2201      	movs	r2, #1
 800112e:	2110      	movs	r1, #16
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <main+0x80>)
 8001132:	f7ff fa37 	bl	80005a4 <MCAL_GPIO_WritePin>

	while(1){
 8001136:	e7fe      	b.n	8001136 <main+0x6e>
 8001138:	08001200 	.word	0x08001200
 800113c:	40013800 	.word	0x40013800
 8001140:	40013000 	.word	0x40013000
 8001144:	08001218 	.word	0x08001218
 8001148:	40010800 	.word	0x40010800

0800114c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800114e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001150:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001154:	480c      	ldr	r0, [pc, #48]	; (8001188 <LoopForever+0x6>)
  ldr r1, =_edata
 8001156:	490d      	ldr	r1, [pc, #52]	; (800118c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001158:	4a0d      	ldr	r2, [pc, #52]	; (8001190 <LoopForever+0xe>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <LoopForever+0x12>)
  ldr r4, =_ebss
 800116c:	4c0a      	ldr	r4, [pc, #40]	; (8001198 <LoopForever+0x16>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800117a:	f000 f811 	bl	80011a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800117e:	f7ff ffa3 	bl	80010c8 <main>

08001182 <LoopForever>:

LoopForever:
    b LoopForever
 8001182:	e7fe      	b.n	8001182 <LoopForever>
  ldr   r0, =_estack
 8001184:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800118c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001190:	0800124c 	.word	0x0800124c
  ldr r2, =_sbss
 8001194:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001198:	20000078 	.word	0x20000078

0800119c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC1_2_IRQHandler>
	...

080011a0 <__libc_init_array>:
 80011a0:	b570      	push	{r4, r5, r6, lr}
 80011a2:	2500      	movs	r5, #0
 80011a4:	4e0c      	ldr	r6, [pc, #48]	; (80011d8 <__libc_init_array+0x38>)
 80011a6:	4c0d      	ldr	r4, [pc, #52]	; (80011dc <__libc_init_array+0x3c>)
 80011a8:	1ba4      	subs	r4, r4, r6
 80011aa:	10a4      	asrs	r4, r4, #2
 80011ac:	42a5      	cmp	r5, r4
 80011ae:	d109      	bne.n	80011c4 <__libc_init_array+0x24>
 80011b0:	f000 f81a 	bl	80011e8 <_init>
 80011b4:	2500      	movs	r5, #0
 80011b6:	4e0a      	ldr	r6, [pc, #40]	; (80011e0 <__libc_init_array+0x40>)
 80011b8:	4c0a      	ldr	r4, [pc, #40]	; (80011e4 <__libc_init_array+0x44>)
 80011ba:	1ba4      	subs	r4, r4, r6
 80011bc:	10a4      	asrs	r4, r4, #2
 80011be:	42a5      	cmp	r5, r4
 80011c0:	d105      	bne.n	80011ce <__libc_init_array+0x2e>
 80011c2:	bd70      	pop	{r4, r5, r6, pc}
 80011c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011c8:	4798      	blx	r3
 80011ca:	3501      	adds	r5, #1
 80011cc:	e7ee      	b.n	80011ac <__libc_init_array+0xc>
 80011ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011d2:	4798      	blx	r3
 80011d4:	3501      	adds	r5, #1
 80011d6:	e7f2      	b.n	80011be <__libc_init_array+0x1e>
 80011d8:	08001244 	.word	0x08001244
 80011dc:	08001244 	.word	0x08001244
 80011e0:	08001244 	.word	0x08001244
 80011e4:	08001248 	.word	0x08001248

080011e8 <_init>:
 80011e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ea:	bf00      	nop
 80011ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ee:	bc08      	pop	{r3}
 80011f0:	469e      	mov	lr, r3
 80011f2:	4770      	bx	lr

080011f4 <_fini>:
 80011f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f6:	bf00      	nop
 80011f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011fa:	bc08      	pop	{r3}
 80011fc:	469e      	mov	lr, r3
 80011fe:	4770      	bx	lr
