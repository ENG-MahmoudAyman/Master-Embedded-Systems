
Toggle_Led_Stm32F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000200  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000330  08000330  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000330  08000330  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000330  08000330  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000330  08000330  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000330  08000330  00010330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000334  08000334  00010334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  0800033c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800033c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000240  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000fb  00000000  00000000  0002026d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000068  00000000  00000000  00020368  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000050  00000000  00000000  000203d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000fee  00000000  00000000  00020420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000004e9  00000000  00000000  0002140e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003f38  00000000  00000000  000218f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002582f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000d8  00000000  00000000  000258ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000318 	.word	0x08000318

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000318 	.word	0x08000318

08000170 <init_RCC>:

}R_16bit_t;

volatile R_16bit_t* R_ODR = (volatile R_16bit_t*) (GPIOC_BASE + 0x0C);

void init_RCC(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	SET_BIT(RCC_APB2ENR,RCC_IOPCEN);
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <init_RCC+0x30>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <init_RCC+0x30>)
 800017a:	f043 0310 	orr.w	r3, r3, #16
 800017e:	6013      	str	r3, [r2, #0]
	//RCC_APB2ENR |=(1<<RCC_IOPAEN);
	SET_BIT(RCC_APB2ENR,RCC_IOPAEN);
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <init_RCC+0x30>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <init_RCC+0x30>)
 8000186:	f043 0304 	orr.w	r3, r3, #4
 800018a:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC_APB2ENR,RCC_AFIO);
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <init_RCC+0x30>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <init_RCC+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6013      	str	r3, [r2, #0]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021018 	.word	0x40021018

080001a4 <init_GPIO>:
void init_GPIO(){
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
	RESET_HBYTE(GPIOC_CRH,20);
 80001a8:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <init_GPIO+0x30>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a09      	ldr	r2, [pc, #36]	; (80001d4 <init_GPIO+0x30>)
 80001ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001b2:	6013      	str	r3, [r2, #0]
	//GPIOC_CRH &= 0xFF0FFFFF;
	SET_BIT(GPIOC_CRH,21);
 80001b4:	4b07      	ldr	r3, [pc, #28]	; (80001d4 <init_GPIO+0x30>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <init_GPIO+0x30>)
 80001ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001be:	6013      	str	r3, [r2, #0]
	//GPIOC_CRH |= 0x00200000;
	//In input mode (MODE[1:0]=00):
	//01: Floating input (reset state)
	SET_BIT(GPIOA_CRL,2);
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <init_GPIO+0x34>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a04      	ldr	r2, [pc, #16]	; (80001d8 <init_GPIO+0x34>)
 80001c6:	f043 0304 	orr.w	r3, r3, #4
 80001ca:	6013      	str	r3, [r2, #0]
}
 80001cc:	bf00      	nop
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr
 80001d4:	40011004 	.word	0x40011004
 80001d8:	40010800 	.word	0x40010800

080001dc <init_EXTI>:
void init_EXTI(){
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	SET_BIT(NVIC_ISER0,6);
 80001e0:	4b0d      	ldr	r3, [pc, #52]	; (8000218 <init_EXTI+0x3c>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a0c      	ldr	r2, [pc, #48]	; (8000218 <init_EXTI+0x3c>)
 80001e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001ea:	6013      	str	r3, [r2, #0]
	//EXTI0[3:0]: EXTI0
	//0000: PA0 pin
	RESET_HBYTE(AFIO_EXTICR1,0);
 80001ec:	4b0b      	ldr	r3, [pc, #44]	; (800021c <init_EXTI+0x40>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a0a      	ldr	r2, [pc, #40]	; (800021c <init_EXTI+0x40>)
 80001f2:	f023 030f 	bic.w	r3, r3, #15
 80001f6:	6013      	str	r3, [r2, #0]
	SET_BIT(EXTI_IMR,MR0);
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <init_EXTI+0x44>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a08      	ldr	r2, [pc, #32]	; (8000220 <init_EXTI+0x44>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6013      	str	r3, [r2, #0]
	SET_BIT(EXTI_RTSR,TR0);
 8000204:	4b07      	ldr	r3, [pc, #28]	; (8000224 <init_EXTI+0x48>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a06      	ldr	r2, [pc, #24]	; (8000224 <init_EXTI+0x48>)
 800020a:	f043 0301 	orr.w	r3, r3, #1
 800020e:	6013      	str	r3, [r2, #0]
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr
 8000218:	e000e100 	.word	0xe000e100
 800021c:	40010008 	.word	0x40010008
 8000220:	40010400 	.word	0x40010400
 8000224:	40010408 	.word	0x40010408

08000228 <main>:
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	init_RCC();
 800022c:	f7ff ffa0 	bl	8000170 <init_RCC>
	init_GPIO();
 8000230:	f7ff ffb8 	bl	80001a4 <init_GPIO>
	init_EXTI();
 8000234:	f7ff ffd2 	bl	80001dc <init_EXTI>
	while(1);
 8000238:	e7fe      	b.n	8000238 <main+0x10>
	...

0800023c <EXTI0_IRQHandler>:
}
void EXTI0_IRQHandler(){
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	(R_ODR->PIN.P_13) ^= 1;
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <EXTI0_IRQHandler+0x38>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f3c3 3340 	ubfx	r3, r3, #13, #1
 800024a:	b2db      	uxtb	r3, r3
 800024c:	4a09      	ldr	r2, [pc, #36]	; (8000274 <EXTI0_IRQHandler+0x38>)
 800024e:	6812      	ldr	r2, [r2, #0]
 8000250:	f083 0301 	eor.w	r3, r3, #1
 8000254:	b2d9      	uxtb	r1, r3
 8000256:	8813      	ldrh	r3, [r2, #0]
 8000258:	f361 334d 	bfi	r3, r1, #13, #1
 800025c:	8013      	strh	r3, [r2, #0]
	SET_BIT(EXTI_PR,PR0);
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <EXTI0_IRQHandler+0x3c>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a05      	ldr	r2, [pc, #20]	; (8000278 <EXTI0_IRQHandler+0x3c>)
 8000264:	f043 0301 	orr.w	r3, r3, #1
 8000268:	6013      	str	r3, [r2, #0]
}
 800026a:	bf00      	nop
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000000 	.word	0x20000000
 8000278:	40010414 	.word	0x40010414

0800027c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800027c:	480d      	ldr	r0, [pc, #52]	; (80002b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000280:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000284:	480c      	ldr	r0, [pc, #48]	; (80002b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000286:	490d      	ldr	r1, [pc, #52]	; (80002bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000288:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <LoopForever+0xe>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800028c:	e002      	b.n	8000294 <LoopCopyDataInit>

0800028e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000292:	3304      	adds	r3, #4

08000294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000298:	d3f9      	bcc.n	800028e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029a:	4a0a      	ldr	r2, [pc, #40]	; (80002c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800029c:	4c0a      	ldr	r4, [pc, #40]	; (80002c8 <LoopForever+0x16>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a0:	e001      	b.n	80002a6 <LoopFillZerobss>

080002a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a4:	3204      	adds	r2, #4

080002a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a8:	d3fb      	bcc.n	80002a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002aa:	f000 f811 	bl	80002d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ae:	f7ff ffbb 	bl	8000228 <main>

080002b2 <LoopForever>:

LoopForever:
    b LoopForever
 80002b2:	e7fe      	b.n	80002b2 <LoopForever>
  ldr   r0, =_estack
 80002b4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002bc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002c0:	08000338 	.word	0x08000338
  ldr r2, =_sbss
 80002c4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002c8:	20000020 	.word	0x20000020

080002cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002cc:	e7fe      	b.n	80002cc <ADC1_2_IRQHandler>
	...

080002d0 <__libc_init_array>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	2500      	movs	r5, #0
 80002d4:	4e0c      	ldr	r6, [pc, #48]	; (8000308 <__libc_init_array+0x38>)
 80002d6:	4c0d      	ldr	r4, [pc, #52]	; (800030c <__libc_init_array+0x3c>)
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	10a4      	asrs	r4, r4, #2
 80002dc:	42a5      	cmp	r5, r4
 80002de:	d109      	bne.n	80002f4 <__libc_init_array+0x24>
 80002e0:	f000 f81a 	bl	8000318 <_init>
 80002e4:	2500      	movs	r5, #0
 80002e6:	4e0a      	ldr	r6, [pc, #40]	; (8000310 <__libc_init_array+0x40>)
 80002e8:	4c0a      	ldr	r4, [pc, #40]	; (8000314 <__libc_init_array+0x44>)
 80002ea:	1ba4      	subs	r4, r4, r6
 80002ec:	10a4      	asrs	r4, r4, #2
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d105      	bne.n	80002fe <__libc_init_array+0x2e>
 80002f2:	bd70      	pop	{r4, r5, r6, pc}
 80002f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002f8:	4798      	blx	r3
 80002fa:	3501      	adds	r5, #1
 80002fc:	e7ee      	b.n	80002dc <__libc_init_array+0xc>
 80002fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000302:	4798      	blx	r3
 8000304:	3501      	adds	r5, #1
 8000306:	e7f2      	b.n	80002ee <__libc_init_array+0x1e>
 8000308:	08000330 	.word	0x08000330
 800030c:	08000330 	.word	0x08000330
 8000310:	08000330 	.word	0x08000330
 8000314:	08000334 	.word	0x08000334

08000318 <_init>:
 8000318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031a:	bf00      	nop
 800031c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031e:	bc08      	pop	{r3}
 8000320:	469e      	mov	lr, r3
 8000322:	4770      	bx	lr

08000324 <_fini>:
 8000324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000326:	bf00      	nop
 8000328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032a:	bc08      	pop	{r3}
 800032c:	469e      	mov	lr, r3
 800032e:	4770      	bx	lr
